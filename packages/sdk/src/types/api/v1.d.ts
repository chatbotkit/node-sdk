/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/bot/{botId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a bot */
        post: operations["deleteBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/{botId}/downvote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Downvote a bot */
        post: operations["downvoteBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/{botId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a bot */
        get: operations["fetchBot"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/{botId}/session/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create bot session */
        post: operations["createBotSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/{botId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update bot */
        post: operations["updateBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/{botId}/upvote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upvote a bot */
        post: operations["upvoteBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create bot */
        post: operations["createBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of bots */
        get: operations["listBots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contact/{contactId}/conversation/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export contact conversations */
        get: operations["exportContactConversations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contact/{contactId}/conversation/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List contact conversations */
        get: operations["listContactConversations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contact/{contactId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete contact */
        post: operations["deleteContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contact/{contactId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch contact */
        get: operations["fetchContact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contact/{contactId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update contact */
        post: operations["updateContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contact/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new contact
         * @description Create a new contact with the given parameters.
         *
         */
        post: operations["createContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contact/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export contacts */
        get: operations["exportContacts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contact/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List contacts */
        get: operations["listContacts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/attachment/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a file as a conversation attachment
         * @description Upload the specified file to the conversation. The file can be
         *     specified either as a HTTP URL, a data URL, a multipart/form-data, or
         *     as a raw file stream. There is currently a limit of 4.5MB for files
         *     uploaded via all available methods except for direct-to-source uploads
         *     when using application/json request body with a file object.
         *
         */
        post: operations["uploadConversationAttachment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send and receive a conversation response */
        post: operations["completeConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/contact/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upsert contact */
        post: operations["upsertConversationContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete conversation */
        post: operations["deleteConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/downvote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Downvote conversation */
        post: operations["downvoteConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch conversation */
        get: operations["fetchConversation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/{messageId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a message */
        post: operations["deleteConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/{messageId}/downvote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Downvote conversation message */
        post: operations["downvoteConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/{messageId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch conversation message */
        get: operations["fetchConversationMessage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/{messageId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update conversation message */
        post: operations["updateConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/{messageId}/upvote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upvote conversation message */
        post: operations["upvoteConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create message */
        post: operations["createConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List conversation messages */
        get: operations["listConversationMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/receive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Receive a conversation response */
        post: operations["receiveConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a message to a conversation */
        post: operations["sendConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/session/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create conversation session
         * @description Conversation tokens allow client-side applications to create a unique, authenticated credential for each conversation. This token can be used to interact with the conversation/{conversationId}/send, conversation/{conversationId}/receive, and conversation/{conversationId}/message/create routes on api.chatbotkit.com. By creating an individual token for each conversation, a client-side application is able to directly access and manipulate the conversation through these routes. Without conversation tokens, a client-side application would need to authenticate and access ChatBotKit conversation routes through a server-side application, which can be more complex and require additional infrastructure. By providing a way for client-side applications to authenticate and access the conversation routes directly, the token route simplifies the process of integrating with api.chatbotkit.com and makes it more convenient for developers to build chatbot applications.
         *
         */
        post: operations["createConversationSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update conversation */
        post: operations["updateConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/upvote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upvote conversation */
        post: operations["upvoteConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete the next message in a conversation */
        post: operations["completeConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new conversation
         * @description Create a new conversation with the given parameters and optional
         *     messages. The conversation will be initialized with the the backstory,
         *     model, dataset, skillset and other configuration options of the bot.
         *     Alternatively the conversation can be initialized directly with the
         *     backstory, model, dataset, skillset and other configuration options.
         *
         *     An array of messages can be included in the request body to add to the
         *     conversation.
         *
         */
        post: operations["createConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export conversations */
        get: operations["exportConversations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List conversations */
        get: operations["listConversations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a dataset */
        post: operations["deleteDataset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a dataset */
        get: operations["fetchDataset"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/file/{fileId}/attach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Attach dataset file */
        post: operations["attachDatasetFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/file/{fileId}/detach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Detach dataset file */
        post: operations["detachDatasetFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/file/{fileId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sync dataset file */
        post: operations["syncDatasetFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/file/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of dataset files */
        get: operations["listDatasetFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/{recordId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a record from a dataset */
        post: operations["deleteDatasetRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/{recordId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a record from a dataset */
        get: operations["fetchDatasetRecord"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/{recordId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a dataset record */
        post: operations["updateDatasetRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create record */
        post: operations["createDatasetRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export dataset records */
        get: operations["exportDatasetRecords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of dataset records */
        get: operations["listDatasetRecords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search a dataset for records matching a given search query */
        post: operations["searchDataset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update dataset */
        post: operations["updateDataset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create dataset */
        post: operations["createDataset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of datasets */
        get: operations["listDatasets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a file */
        post: operations["deleteFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a file
         * @description Download a file. If the file is not public, the user must be
         *     authenticated.
         *
         */
        get: operations["downloadFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a file */
        get: operations["fetchFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sync file */
        post: operations["syncFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update file */
        post: operations["updateFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload the specified file
         * @description Upload the specified file to the file storage service. The file can be
         *     specified either as a HTTP URL, a data URL, a multipart/form-data, or
         *     as a raw file stream. There is currently a limit of 4.5MB for files
         *     uploaded via all available methods except for direct-to-source uploads
         *     when using application/json request body with a file object.
         *
         */
        post: operations["uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create file */
        post: operations["createFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of files */
        get: operations["listFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/discord/{discordIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Discord integration */
        post: operations["deleteDiscordIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/discord/{discordIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a discordIntegration */
        get: operations["fetchDiscordIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/discord/{discordIntegrationId}/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Setup Discord integration */
        post: operations["setupDiscordIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/discord/{discordIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Discord integration */
        post: operations["updateDiscordIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/discord/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Discord integration */
        post: operations["createDiscordIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/discord/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Discord integrations */
        get: operations["listDiscordIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/email/{emailIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Email integration */
        post: operations["deleteEmailIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/email/{emailIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a emailIntegration */
        get: operations["fetchEmailIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/email/{emailIntegrationId}/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Setup a Email integration */
        post: operations["setupEmailIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/email/{emailIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Email integration */
        post: operations["updateEmailIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/email/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Email integration */
        post: operations["createEmailIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/email/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Email integrations */
        get: operations["listEmailIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/extract/{extractIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Extract integration */
        post: operations["deleteExtractIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/extract/{extractIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a extractIntegration */
        get: operations["fetchExtractIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/extract/{extractIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Extract integration */
        post: operations["updateExtractIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/extract/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Extract integration */
        post: operations["createExtractIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/extract/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Extract integrations */
        get: operations["listExtractIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/messenger/{messengerIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Messenger integration */
        post: operations["deleteMessengerIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/messenger/{messengerIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a messengerIntegration */
        get: operations["fetchMessengerIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/messenger/{messengerIntegrationId}/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Setup a Messenger integration */
        post: operations["setupMessengerIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/messenger/{messengerIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Messenger integration */
        post: operations["updateMessengerIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/messenger/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Messenger integration */
        post: operations["createMessengerIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/messenger/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Messenger integrations */
        get: operations["listMessengerIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/notion/{notionIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Notion integration */
        post: operations["deleteNotionIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/notion/{notionIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a notionIntegration */
        get: operations["fetchNotionIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/notion/{notionIntegrationId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sync Notion integration */
        post: operations["syncNotionIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/notion/{notionIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Notion integration */
        post: operations["updateNotionIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/notion/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Notion integration */
        post: operations["createNotionIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/notion/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Notion integrations */
        get: operations["listNotionIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/{sitemapIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Sitemap integration */
        post: operations["deleteSitemapIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/{sitemapIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a sitemapIntegration */
        get: operations["fetchSitemapIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/{sitemapIntegrationId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sync a Sitemap integration */
        post: operations["syncSitemapIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/{sitemapIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Sitemap integration */
        post: operations["updateSitemapIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Sitemap integration */
        post: operations["createSitemapIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Sitemap integrations */
        get: operations["listSitemapIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/slack/{slackIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Slack integration */
        post: operations["deleteSlackIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/slack/{slackIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a slackIntegration */
        get: operations["fetchSlackIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/slack/{slackIntegrationId}/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Setup Slack integration */
        post: operations["setupSlackIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/slack/{slackIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Slack integration */
        post: operations["updateSlackIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/slack/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Slack integration */
        post: operations["createSlackIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/slack/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Slack integrations */
        get: operations["listSlackIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/support/{supportIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Support integration */
        post: operations["deleteSupportIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/support/{supportIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a supportIntegration */
        get: operations["fetchSupportIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/support/{supportIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Support integration */
        post: operations["updateSupportIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/support/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Support integration */
        post: operations["createSupportIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/support/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Support integrations */
        get: operations["listSupportIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/telegram/{telegramIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Telegram integration */
        post: operations["deleteTelegramIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/telegram/{telegramIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a telegramIntegration */
        get: operations["fetchTelegramIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/telegram/{telegramIntegrationId}/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Setup a Telegram integration */
        post: operations["setupTelegramIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/telegram/{telegramIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Telegram integration */
        post: operations["updateTelegramIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/telegram/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Telegram integration */
        post: operations["createTelegramIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/telegram/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Telegram integrations */
        get: operations["listTelegramIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/trigger/{triggerIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Trigger integration */
        post: operations["deleteTriggerIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/trigger/{triggerIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a triggerIntegration */
        get: operations["fetchTriggerIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/trigger/{triggerIntegrationId}/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Setup a Trigger integration */
        post: operations["setupTriggerIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/trigger/{triggerIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Trigger integration */
        post: operations["updateTriggerIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/trigger/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Trigger integration */
        post: operations["createTriggerIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/trigger/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Trigger integrations */
        get: operations["listTriggerIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/{whatsappIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete WhatsApp integration */
        post: operations["deleteWhatsAppIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/{whatsappIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a whatsappIntegration */
        get: operations["fetchWhatsAppIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/{whatsappIntegrationId}/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Setup a WhatsApp integration */
        post: operations["setupWhatsAppIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/{whatsappIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a WhatsApp integration */
        post: operations["updateWhatsAppIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create WhatsApp integration */
        post: operations["createWhatsAppIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List WhatsApp integrations */
        get: operations["listWhatsAppIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/widget/{widgetIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Widget integration */
        post: operations["deleteWidgetIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/widget/{widgetIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a widgetIntegration */
        get: operations["fetchWidgetIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/widget/{widgetIntegrationId}/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Setup Widget integration */
        post: operations["setupWidgetIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/widget/{widgetIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Widget integration */
        post: operations["updateWidgetIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/widget/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Widget integration */
        post: operations["createWidgetIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/widget/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Widget integrations */
        get: operations["listWidgetIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/magic/{promptId}/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate text (description, records, abilities and more) based on input. */
        post: operations["generateMagicFromPrompt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/magic/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of magic prompts */
        get: operations["listMagicPrompts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a partner user */
        post: operations["deletePartnerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a partner user */
        get: operations["fetchPartnerUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/token/{tokenId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a partner user token */
        post: operations["deletePartnerUserToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/token/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create partner user token */
        post: operations["createPartnerUserToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/token/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List partner user tokens */
        get: operations["listPartnerUserTokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a partner user */
        post: operations["updatePartnerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create partner user */
        post: operations["createPartnerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List partner users */
        get: operations["listPartnerUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/platform/model/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of platform models */
        get: operations["listPlatformModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secret/{secretId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a secret */
        post: operations["deleteSecret"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secret/{secretId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a secret */
        get: operations["fetchSecret"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secret/{secretId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update secret */
        post: operations["updateSecret"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secret/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create secret */
        post: operations["createSecret"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/secret/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of secrets */
        get: operations["listSecrets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/{abilityId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a ability from a skillset */
        post: operations["deleteSkillsetAbility"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/{abilityId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a ability from a skillset */
        get: operations["fetchSkillsetAbility"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/{abilityId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a skillset ability */
        post: operations["updateSkillsetAbility"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create ability */
        post: operations["createSkillsetAbility"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export skillset abilities */
        get: operations["exportSkillsetAbilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of skillset abilities */
        get: operations["listSkillsetAbilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a skillset */
        post: operations["deleteSkillset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a skillset */
        get: operations["fetchSkillset"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update skillset */
        post: operations["updateSkillset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create skillset */
        post: operations["createSkillset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of skillsets */
        get: operations["listSkillsets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/usage/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch usage
         * @description Fetches the usage data for the user in the current billing period.
         */
        get: operations["fetchUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/usage/series/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch usage series
         * @description Fetches a series of usage data points for the user for the last 90 days.
         */
        get: operations["fetchUsageSeries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description A message in the conversation */
        Message: {
            /**
             * @description The type of the message
             * @enum {string}
             */
            type: "user" | "bot" | "context" | "instruction" | "backstory" | "activity";
            /** @description The text of the message */
            text: string;
            /** @description Meta data information */
            meta?: {
                [key: string]: unknown;
            };
        };
        /** @description Extracted entity from the message */
        Entity: {
            /** @description The entity type */
            type: string;
            /** @description Start offset */
            begin: number;
            /** @description End offset */
            end: number;
            /** @description The text value of the entity */
            text: string;
            replacement?: {
                /** @description Start offset */
                begin: number;
                /** @description End offset */
                end: number;
                /** @description The text value of the replacement */
                text: string;
            };
        };
        /**
         * @description The type of the message
         * @enum {string}
         */
        MessageType: "user" | "bot" | "context" | "instruction" | "backstory" | "activity";
        /**
         * @description The bot visibility
         * @enum {string}
         */
        BotVisibility: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
        /**
         * @description The dataset visibility
         * @enum {string}
         */
        DatasetVisibility: "private" | "public";
        /**
         * @description The dataset file attachment type
         * @enum {string}
         */
        DatasetFileAttachmentType: "source";
        /**
         * @description The skillset visibility
         * @enum {string}
         */
        SkillsetVisibility: "private" | "public";
        /**
         * @description The file visibility
         * @enum {string}
         */
        FileVisibility: "private" | "public";
        /**
         * @description The type of the secret
         * @enum {string}
         */
        SecretType: "bearer" | "plain" | "basic";
        /** @description Usage information */
        Usage: {
            /** @description The tokens used in this exchange */
            token: number;
        };
        /** @description Meta data information */
        Meta: {
            [key: string]: unknown;
        };
        /**
         * @description A model definition
         * @example gpt-4-turbo/temperature=0.7
         */
        Model: string;
        /** @description A bot configuration that can be applied without a dedicated bot instance. */
        BotRef: {
            /** @description The ID of the bot this configuration is using */
            botId?: string;
        };
        /** @description A bot configuration that can be applied without a dedicated bot instance. */
        BotConfig: {
            /**
             * @description A model definition
             * @example gpt-4-turbo/temperature=0.7
             */
            model?: string;
            /** @description The backstory this configuration is using */
            backstory?: string;
            /** @description The id of the dataset this configuration is using */
            datasetId?: string;
            /** @description The id of the skillset this configuration is using */
            skillsetId?: string;
            /** @description The privacy flag for this configuration */
            privacy?: boolean;
            /** @description The moderation flag for this configuration */
            moderation?: boolean;
        };
        /** @description A bot configuration or reference */
        BotRefOrConfig: {
            /** @description The ID of the bot this configuration is using */
            botId?: string;
        } | {
            /**
             * @description A model definition
             * @example gpt-4-turbo/temperature=0.7
             */
            model?: string;
            /** @description The backstory this configuration is using */
            backstory?: string;
            /** @description The id of the dataset this configuration is using */
            datasetId?: string;
            /** @description The id of the skillset this configuration is using */
            skillsetId?: string;
            /** @description The privacy flag for this configuration */
            privacy?: boolean;
            /** @description The moderation flag for this configuration */
            moderation?: boolean;
        };
        /** @description Instance crud properties */
        InstanceCrudProps: {
            /** @description The associated name */
            name?: string;
            /** @description The associated description */
            description?: string;
            /** @description Meta data information */
            meta?: {
                [key: string]: unknown;
            };
        };
        /** @description Instance list properties */
        InstanceListProps: {
            /** @description The associated name */
            name?: string;
            /** @description The associated description */
            description?: string;
            /** @description Meta data information */
            meta?: {
                [key: string]: unknown;
            };
            /** @description The instance ID */
            id: string;
            /** @description The creation date */
            createdAt: number;
            /** @description The last update date */
            updatedAt: number;
        };
        ErrorResponse: {
            /** @description The error message */
            message?: string;
            /** @description The error code */
            code?: string;
        };
    };
    responses: {
        /** @description The resource was not modified */
        NotModified: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The error message */
                    message?: string;
                    /** @description The error code */
                    code?: string;
                };
            };
        };
        /** @description The request could not be understood or was missing required parameters. */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The error message */
                    message?: string;
                    /** @description The error code */
                    code?: string;
                };
            };
        };
        /** @description The request could not be completed due to a conflict with the current state of the resource. */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The error message */
                    message?: string;
                    /** @description The error code */
                    code?: string;
                };
            };
        };
        /** @description The user is not authorized to access the requested resource */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The error message */
                    message?: string;
                    /** @description The error code */
                    code?: string;
                };
            };
        };
        /** @description The specified resource was not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The error message */
                    message?: string;
                    /** @description The error code */
                    code?: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    deleteBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The bot was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted bot */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    downvoteBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The value of the downvote
                     * @default -100
                     */
                    value: number;
                };
            };
        };
        responses: {
            /** @description The message was downvoted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The bot ID of the downvoted bot */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The bot was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the bot */
                        id: string;
                        /** @description The name of the bot */
                        name?: string;
                        /** @description The description of the bot */
                        description?: string;
                        /** @description The backstory for the bot */
                        backstory?: string;
                        /** @description The model used in the bot */
                        model?: string;
                        /** @description The ID of the dataset used in the bot */
                        datasetId?: string;
                        /** @description The ID of the skillset used in the bot */
                        skillsetId?: string;
                        /**
                         * @description The bot visibility
                         * @enum {string}
                         */
                        visibility: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the bot was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the bot was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createBotSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The maximum amount of time this session will stay open */
                    durationInSeconds?: number;
                    /** @description An array of messages to be included in the conversation */
                    messages?: {
                        /**
                         * @description The type of the message
                         * @enum {string}
                         */
                        type: "user" | "bot" | "context" | "instruction" | "backstory" | "activity";
                        /** @description The text of the message */
                        text: string;
                    }[];
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The bot was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the bot */
                        id: string;
                        /** @description The ID of the conversation */
                        conversationId: string;
                        /** @description The token for this conversation */
                        token: string;
                        /** @description The time the token will expire in milliseconds */
                        expiresAt: number;
                        /** @description An array of messages included in the conversation */
                        messages?: {
                            /**
                             * @description The type of the message
                             * @enum {string}
                             */
                            type: "user" | "bot" | "context" | "instruction" | "backstory" | "activity";
                            /** @description The text of the message */
                            text: string;
                        }[];
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the bot */
                    name?: string;
                    /** @description The description of the bot */
                    description?: string;
                    /** @description The backstory of the bot */
                    backstory?: string;
                    /** @description The model of the bot */
                    model?: string;
                    /** @description The id of the dataset the bot is using */
                    datasetId?: string;
                    /** @description The id of the skillset the bot is using */
                    skillsetId?: string;
                    /**
                     * @description The bot visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The bot was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated bot */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    upvoteBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The value of the upvote
                     * @default 100
                     */
                    value: number;
                };
            };
        };
        responses: {
            /** @description The bot was upvoted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the upvoted bot */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createBot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the bot */
                    name?: string;
                    /** @description The description of the bot */
                    description?: string;
                    /** @description The backstory of the bot */
                    backstory?: string;
                    /** @description The model of the bot */
                    model?: string;
                    /** @description The id of the dataset the bot is using */
                    datasetId?: string;
                    /** @description The id of the skillset the bot is using */
                    skillsetId?: string;
                    /**
                     * @description The bot visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The bot was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created bot */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listBots: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of bots was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of bots */
                        items: {
                            /** @description The ID of the bot */
                            id: string;
                            /** @description The name of the bot */
                            name?: string;
                            /** @description The description of the bot */
                            description?: string;
                            /** @description The backstory of the bot */
                            backstory?: string;
                            /** @description The model of the bot */
                            model?: string;
                            /** @description The id of the dataset the bot is using */
                            datasetId?: string;
                            /** @description The id of the skillset the bot is using */
                            skillsetId?: string;
                            /**
                             * @description The bot visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the bot was created */
                            createdAt: number;
                            /** @description The timestamp when the bot was last updated */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the bot */
                            id: string;
                            /** @description The name of the bot */
                            name?: string;
                            /** @description The description of the bot */
                            description?: string;
                            /** @description The backstory of the bot */
                            backstory?: string;
                            /** @description The model of the bot */
                            model?: string;
                            /** @description The id of the dataset the bot is using */
                            datasetId?: string;
                            /** @description The id of the skillset the bot is using */
                            skillsetId?: string;
                            /**
                             * @description The bot visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the bot was created */
                            createdAt: number;
                            /** @description The timestamp when the bot was last updated */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    exportContactConversations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path: {
                contactId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of conversations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The contact id assigned to this conversation */
                            contactId?: string;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The contact id assigned to this conversation */
                            contactId?: string;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                    "text/csv": string;
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listContactConversations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path: {
                contactId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of conversations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The contact id assigned to this conversation */
                            contactId?: string;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The contact id assigned to this conversation */
                            contactId?: string;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The contact was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted contact */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The contact was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The email address of the contact */
                        email?: string;
                        /** @description The phone number of the contact */
                        phone?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The email address of the contact */
                    email?: string;
                    /** @description The phone number of the contact */
                    phone?: string;
                };
            };
        };
        responses: {
            /** @description The contact was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated contact */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createContact: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The email address of the contact */
                    email?: string;
                    /** @description The phone number of the contact */
                    phone?: string;
                };
            };
        };
        responses: {
            /** @description The contact was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created contact */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    exportContacts: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of contacts was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The email address of the contact */
                            email?: string;
                            /** @description The phone number of the contact */
                            phone?: string;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description Instance list properties */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The email address of the contact */
                            email?: string;
                            /** @description The phone number of the contact */
                            phone?: string;
                        };
                    };
                    "text/csv": string;
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listContacts: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of contacts was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The email address of the contact */
                            email?: string;
                            /** @description The phone number of the contact */
                            phone?: string;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description Instance list properties */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The email address of the contact */
                            email?: string;
                            /** @description The phone number of the contact */
                            phone?: string;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    uploadConversationAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The file to upload either as http: or data: URL */
                    file: string;
                } | {
                    /** @description The file definition to upload */
                    file: {
                        /** @description The file type */
                        type: string;
                        /** @description The file size */
                        size: number;
                        /** @description The file name */
                        name?: string;
                    };
                };
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description The file to upload
                     */
                    file: string;
                };
                "*/*": string;
            };
        };
        responses: {
            /** @description The file was upload successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the upload file */
                        id: string;
                        /** @description The name of the upload file */
                        name?: string;
                        /** @description The request required to upload the file */
                        uploadRequest?: {
                            /** @description The HTTP method to use */
                            method: string;
                            /** @description The HTTP url to use */
                            url: string;
                            /** @description The HTTP url to use */
                            headers: Record<string, never>;
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    completeConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The text of the message to send */
                    text: string;
                    /** @description Known entities */
                    entities?: {
                        /** @description The entity type */
                        type: string;
                        /** @description Start offset */
                        begin: number;
                        /** @description End offset */
                        end: number;
                        /** @description The text value of the entity */
                        text: string;
                        replacement?: {
                            /** @description Start offset */
                            begin: number;
                            /** @description End offset */
                            end: number;
                            /** @description The text value of the replacement */
                            text: string;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description The message was received successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created message */
                        id: string;
                        /** @description The text of the message received */
                        text: string;
                        /** @description Usage information */
                        usage: {
                            /** @description The tokens used in this exchange */
                            token: number;
                        };
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "result";
                        data: {
                            /** @description The ID of the created message */
                            id: string;
                            /** @description The text of the message received */
                            text: string;
                            /** @description Usage information */
                            usage: {
                                /** @description The tokens used in this exchange */
                                token: number;
                            };
                        };
                    } | {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "token";
                        /** @description The data for the event */
                        data: {
                            /** @description The token generated */
                            token: string;
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    upsertConversationContact: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The email address of the contact */
                    email?: string;
                    /** @description The phone number of the contact */
                    phone?: string;
                };
            };
        };
        responses: {
            /** @description The contact was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created contact */
                        id: string;
                    };
                };
            };
            /** @description The resource was not modified */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteConversation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The conversation was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted conversation */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    downvoteConversation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The value of the downvote
                     * @default -100
                     */
                    value: number;
                };
            };
        };
        responses: {
            /** @description The message was downvoted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The conversation ID of the downvoted conversation */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchConversation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The conversation was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The contact id assigned to this conversation */
                        contactId?: string;
                    } & ({
                        /** @description The ID of the bot this configuration is using */
                        botId?: string;
                    } | {
                        /**
                         * @description A model definition
                         * @example gpt-4-turbo/temperature=0.7
                         */
                        model?: string;
                        /** @description The backstory this configuration is using */
                        backstory?: string;
                        /** @description The id of the dataset this configuration is using */
                        datasetId?: string;
                        /** @description The id of the skillset this configuration is using */
                        skillsetId?: string;
                        /** @description The privacy flag for this configuration */
                        privacy?: boolean;
                        /** @description The moderation flag for this configuration */
                        moderation?: boolean;
                    });
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The message was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted message */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    downvoteConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The value of the downvote
                     * @default -100
                     */
                    value: number;
                };
            };
        };
        responses: {
            /** @description The message was downvoted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the downvoted message */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The message was fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the fetched message */
                        id: string;
                        /**
                         * @description The type of the message
                         * @enum {string}
                         */
                        type: "user" | "bot" | "context" | "instruction" | "backstory" | "activity";
                        /** @description The text of the fetched message */
                        text: string;
                        /** @description The date and time when the message was created (in milliseconds) */
                        createdAt: number;
                        /** @description The date and time when the message was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The updated text of the message */
                    text?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The message was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated message */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    upvoteConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The value of the upvote
                     * @default 100
                     */
                    value: number;
                };
            };
        };
        responses: {
            /** @description The message was upvoted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the upvoted message */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The type of the message
                     * @enum {string}
                     */
                    type: "user" | "bot" | "context" | "instruction" | "backstory" | "activity";
                    /** @description The text of the message */
                    text: string;
                    /** @description Known entities */
                    entities?: {
                        /** @description The entity type */
                        type: string;
                        /** @description Start offset */
                        begin: number;
                        /** @description End offset */
                        end: number;
                        /** @description The text value of the entity */
                        text: string;
                        replacement?: {
                            /** @description Start offset */
                            begin: number;
                            /** @description End offset */
                            end: number;
                            /** @description The text value of the replacement */
                            text: string;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description The message was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created message */
                        id: string;
                        /** @description Extracted entities from the message */
                        entities: {
                            /** @description The entity type */
                            type: string;
                            /** @description Start offset */
                            begin: number;
                            /** @description End offset */
                            end: number;
                            /** @description The text value of the entity */
                            text: string;
                            replacement?: {
                                /** @description Start offset */
                                begin: number;
                                /** @description End offset */
                                end: number;
                                /** @description The text value of the replacement */
                                text: string;
                            };
                        }[];
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listConversationMessages: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The messages were listed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of conversation messages */
                        items: {
                            /** @description The ID of the message */
                            id: string;
                            /**
                             * @description The type of the message
                             * @enum {string}
                             */
                            type: "user" | "bot" | "context" | "instruction" | "backstory" | "activity";
                            /** @description The text of the message */
                            text: string;
                            /** @description The timestamp of when the message was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp of when the message was last updated  (in milliseconds) */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the message */
                            id: string;
                            /**
                             * @description The type of the message
                             * @enum {string}
                             */
                            type: "user" | "bot" | "context" | "instruction" | "backstory" | "activity";
                            /** @description The text of the message */
                            text: string;
                            /** @description The timestamp of when the message was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp of when the message was last updated  (in milliseconds) */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    receiveConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The message was received successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created message */
                        id: string;
                        /** @description The text of the message received */
                        text: string;
                        /** @description Usage information */
                        usage: {
                            /** @description The tokens used in this exchange */
                            token: number;
                        };
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "result";
                        data: {
                            /** @description The ID of the created message */
                            id: string;
                            /** @description The text of the message received */
                            text: string;
                            /** @description Usage information */
                            usage: {
                                /** @description The tokens used in this exchange */
                                token: number;
                            };
                        };
                    } | {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "token";
                        /** @description The data for the event */
                        data: {
                            /** @description The token generated */
                            token: string;
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    sendConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The text of the message to send */
                    text: string;
                    /** @description Known entities */
                    entities?: {
                        /** @description The entity type */
                        type: string;
                        /** @description Start offset */
                        begin: number;
                        /** @description End offset */
                        end: number;
                        /** @description The text value of the entity */
                        text: string;
                        replacement?: {
                            /** @description Start offset */
                            begin: number;
                            /** @description End offset */
                            end: number;
                            /** @description The text value of the replacement */
                            text: string;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description The message was sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the sent message */
                        id: string;
                        /** @description Extracted entities from the message */
                        entities: {
                            /** @description The entity type */
                            type: string;
                            /** @description Start offset */
                            begin: number;
                            /** @description End offset */
                            end: number;
                            /** @description The text value of the entity */
                            text: string;
                            replacement?: {
                                /** @description Start offset */
                                begin: number;
                                /** @description End offset */
                                end: number;
                                /** @description The text value of the replacement */
                                text: string;
                            };
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "result";
                        data: {
                            /** @description The ID of the sent message */
                            id: string;
                            /** @description Extracted entities from the message */
                            entities: {
                                /** @description The entity type */
                                type: string;
                                /** @description Start offset */
                                begin: number;
                                /** @description End offset */
                                end: number;
                                /** @description The text value of the entity */
                                text: string;
                                replacement?: {
                                    /** @description Start offset */
                                    begin: number;
                                    /** @description End offset */
                                    end: number;
                                    /** @description The text value of the replacement */
                                    text: string;
                                };
                            }[];
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createConversationSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The maximum amount of time this session will stay open */
                    durationInSeconds?: number;
                };
            };
        };
        responses: {
            /** @description The session was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the conversation */
                        id: string;
                        /** @description The token for this conversation */
                        token: string;
                        /** @description The time the token will expire in milliseconds */
                        expiresAt: number;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateConversation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The contact id assigned to this conversation */
                    contactId?: string;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The conversation was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated conversation */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    upvoteConversation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The value of the upvote
                     * @default 100
                     */
                    value: number;
                };
            };
        };
        responses: {
            /** @description The conversation was upvoted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the upvoted conversation */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    completeConversation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description An array of messages to be added to the conversation */
                    messages: {
                        /**
                         * @description The type of the message
                         * @enum {string}
                         */
                        type: "user" | "bot" | "context" | "instruction" | "backstory" | "activity";
                        /** @description The text of the message */
                        text: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                    }[];
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The next message in the conversation completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The next bot message */
                        text: string;
                        /** @description Usage information */
                        usage: {
                            /** @description The tokens used in this exchange */
                            token: number;
                        };
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "result";
                        data: {
                            /** @description The next bot message */
                            text: string;
                            /** @description Usage information */
                            usage: {
                                /** @description The tokens used in this exchange */
                                token: number;
                            };
                        };
                    } | {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "token";
                        /** @description The data for the event */
                        data: {
                            /** @description The token generated */
                            token: string;
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createConversation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The contact id assigned to this conversation */
                    contactId?: string;
                    /** @description An array of messages to be added to the conversation */
                    messages?: {
                        /**
                         * @description The type of the message
                         * @enum {string}
                         */
                        type: "user" | "bot" | "context" | "instruction" | "backstory" | "activity";
                        /** @description The text of the message */
                        text: string;
                    }[];
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The conversation was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created conversation */
                        id: string;
                        /** @description An array of messages included in the conversation */
                        messages?: {
                            /**
                             * @description The type of the message
                             * @enum {string}
                             */
                            type: "user" | "bot" | "context" | "instruction" | "backstory" | "activity";
                            /** @description The text of the message */
                            text: string;
                        }[];
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    exportConversations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of conversations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The contact id assigned to this conversation */
                            contactId?: string;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The contact id assigned to this conversation */
                            contactId?: string;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                    "text/csv": string;
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listConversations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of conversations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The contact id assigned to this conversation */
                            contactId?: string;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The contact id assigned to this conversation */
                            contactId?: string;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The dataset was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted dataset */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The dataset was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset */
                        id: string;
                        /** @description The name of the dataset */
                        name?: string;
                        /** @description The description of the dataset */
                        description?: string;
                        /** @description The store for the dataset */
                        store: string;
                        /** @description The total number of tokens for each record */
                        recordMaxTokens?: number;
                        /** @description The minimum score to filter search results by */
                        searchMinScore?: number;
                        /** @description The total number of records to return during search */
                        searchMaxRecords?: number;
                        /** @description The total number of tokens to use during search */
                        searchMaxTokens?: number;
                        /** @description An instruction to include before found records */
                        matchInstruction?: string;
                        /** @description An instruction to include if no records where found */
                        mismatchInstruction?: string;
                        /** @description A list of separators to use when tokenizing text */
                        separators?: string;
                        /**
                         * @description The dataset visibility
                         * @enum {string}
                         */
                        visibility: "private" | "public";
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the dataset was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the dataset was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    attachDatasetFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The dataset file attachment type
                     * @enum {string}
                     */
                    type?: "source";
                };
            };
        };
        responses: {
            /** @description The dataset file that was attached successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset file */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    detachDatasetFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The dataset file that was detached successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset file */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    syncDatasetFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The dataset file that was synced successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset file */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listDatasetFiles: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of files was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of files */
                        items: {
                            /** @description The ID of the file */
                            id: string;
                            /** @description The name of the file */
                            name?: string;
                            /** @description The description of the file */
                            description?: string;
                            /**
                             * @description The file visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the file was created */
                            createdAt: number;
                            /** @description The timestamp when the file was last updated */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the file */
                            id: string;
                            /** @description The name of the file */
                            name?: string;
                            /** @description The description of the file */
                            description?: string;
                            /**
                             * @description The file visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the file was created */
                            createdAt: number;
                            /** @description The timestamp when the file was last updated */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteDatasetRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                recordId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The record was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted record */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchDatasetRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                recordId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The dataset was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset record */
                        id: string;
                        /** @description The text of the dataset record */
                        text: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the dataset record was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the dataset record was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateDatasetRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                recordId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The text to update the record with */
                    text?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The record was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated record */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createDatasetRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The text of the record */
                    text: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The record was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created record */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    exportDatasetRecords: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The export of dataset records was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            id: string;
                            text: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            id: string;
                            text: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        };
                    };
                    "text/csv": string;
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listDatasetRecords: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of records was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            id: string;
                            text: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            id: string;
                            text: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    searchDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The search query to use for the search */
                    search: string;
                };
            };
        };
        responses: {
            /** @description The search was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset that was searched */
                        id: string;
                        /** @description An array of records matching the search query */
                        records: {
                            id: string;
                            text: string;
                        }[];
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The new name for the dataset */
                    name?: string;
                    /** @description The new description for the dataset */
                    description?: string;
                    /** @description The total number of tokens to for each record */
                    recordMaxTokens?: number;
                    /** @description The minimum score to filter search results by */
                    searchMinScore?: number;
                    /** @description The total number of records to return during search */
                    searchMaxRecords?: number;
                    /** @description The total number of tokens to use during search */
                    searchMaxTokens?: number;
                    /** @description An instruction to include before found records */
                    matchInstruction?: string;
                    /** @description An instruction to include if no records where found */
                    mismatchInstruction?: string;
                    /** @description A list of separators to use when tokenizing text */
                    separators?: string;
                    /**
                     * @description The dataset visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The dataset was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated dataset */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createDataset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the dataset */
                    name?: string;
                    /** @description A description of the dataset */
                    description?: string;
                    /** @description The storage class for this dataset */
                    store?: string;
                    /** @description The total number of tokens for each record */
                    recordMaxTokens?: number;
                    /** @description The minimum score to filter search results by */
                    searchMinScore?: number;
                    /** @description The total number of records to return during search */
                    searchMaxRecords?: number;
                    /** @description The total number of tokens to use during search */
                    searchMaxTokens?: number;
                    /** @description An instruction to include before found records */
                    matchInstruction?: string;
                    /** @description An instruction to include if no records where found */
                    mismatchInstruction?: string;
                    /** @description A list of separators to use when tokenizing text */
                    separators?: string;
                    /**
                     * @description The dataset visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The dataset was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created dataset */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listDatasets: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of datasets was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of datasets */
                        items: {
                            /** @description The ID of the dataset */
                            id: string;
                            /** @description The name of the dataset */
                            name?: string;
                            /** @description The description of the dataset */
                            description?: string;
                            /** @description The store for the dataset */
                            store: string;
                            /** @description The total number of tokens for each record */
                            recordMaxTokens?: number;
                            /** @description The minimum score to filter search results by */
                            searchMinScore?: number;
                            /** @description The total number of records to return during search */
                            searchMaxRecords?: number;
                            /** @description The total number of tokens to use during search */
                            searchMaxTokens?: number;
                            /** @description An instruction to include before found records */
                            matchInstruction?: string;
                            /** @description An instruction to include if no records where found */
                            mismatchInstruction?: string;
                            /** @description A list of separators to use when tokenizing text */
                            separators?: string;
                            /**
                             * @description The dataset visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the dataset was created */
                            createdAt: number;
                            /** @description The timestamp when the dataset was last updated */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the dataset */
                            id: string;
                            /** @description The name of the dataset */
                            name?: string;
                            /** @description The description of the dataset */
                            description?: string;
                            /** @description The store for the dataset */
                            store: string;
                            /** @description The total number of tokens for each record */
                            recordMaxTokens?: number;
                            /** @description The minimum score to filter search results by */
                            searchMinScore?: number;
                            /** @description The total number of records to return during search */
                            searchMaxRecords?: number;
                            /** @description The total number of tokens to use during search */
                            searchMaxTokens?: number;
                            /** @description An instruction to include before found records */
                            matchInstruction?: string;
                            /** @description An instruction to include if no records where found */
                            mismatchInstruction?: string;
                            /** @description A list of separators to use when tokenizing text */
                            separators?: string;
                            /**
                             * @description The dataset visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the dataset was created */
                            createdAt: number;
                            /** @description The timestamp when the dataset was last updated */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The file was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted file */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    downloadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The file was downloaded successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The URL to download the file */
                        url: string;
                    };
                    "*/*": string;
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The file was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the file */
                        id: string;
                        /** @description The name of the file */
                        name?: string;
                        /** @description The description of the file */
                        description?: string;
                        /**
                         * @description The file visibility
                         * @enum {string}
                         */
                        visibility: "private" | "public";
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the file was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the file was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    syncFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The file was synced successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the file */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The new name for the file */
                    name?: string;
                    /** @description The new description for the file */
                    description?: string;
                    /**
                     * @description The file visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The file was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated file */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The file to upload either as http: or data: URL */
                    file: string;
                } | {
                    /** @description The file definition to upload */
                    file: {
                        /** @description The file type */
                        type: string;
                        /** @description The file size */
                        size: number;
                        /** @description The file name */
                        name?: string;
                    };
                };
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description The file to upload
                     */
                    file: string;
                };
                "*/*": string;
            };
        };
        responses: {
            /** @description The file was upload successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the upload file */
                        id: string;
                        /** @description The request required to upload the file */
                        uploadRequest?: {
                            /** @description The HTTP method to use */
                            method: string;
                            /** @description The HTTP url to use */
                            url: string;
                            /** @description The HTTP url to use */
                            headers: Record<string, never>;
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the file */
                    name?: string;
                    /** @description A description of the file */
                    description?: string;
                    /**
                     * @description The file visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The file was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created file */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listFiles: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of files was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of files */
                        items: {
                            /** @description The ID of the file */
                            id: string;
                            /** @description The name of the file */
                            name?: string;
                            /** @description The description of the file */
                            description?: string;
                            /**
                             * @description The file visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the file was created */
                            createdAt: number;
                            /** @description The timestamp when the file was last updated */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the file */
                            id: string;
                            /** @description The name of the file */
                            name?: string;
                            /** @description The description of the file */
                            description?: string;
                            /**
                             * @description The file visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the file was created */
                            createdAt: number;
                            /** @description The timestamp when the file was last updated */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteDiscordIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discordIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Discord integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Discord integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchDiscordIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discordIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Discord integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The Discord application ID */
                        appId?: string;
                        /** @description The Discord command handle */
                        handle?: string;
                        /** @description The chat session duration */
                        sessionDuration?: number;
                    } & ({
                        /** @description The ID of the bot this configuration is using */
                        botId?: string;
                    } | {
                        /**
                         * @description A model definition
                         * @example gpt-4-turbo/temperature=0.7
                         */
                        model?: string;
                        /** @description The backstory this configuration is using */
                        backstory?: string;
                        /** @description The id of the dataset this configuration is using */
                        datasetId?: string;
                        /** @description The id of the skillset this configuration is using */
                        skillsetId?: string;
                        /** @description The privacy flag for this configuration */
                        privacy?: boolean;
                        /** @description The moderation flag for this configuration */
                        moderation?: boolean;
                    });
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    setupDiscordIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discordIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Discord integration was setup successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the setuped Discord integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateDiscordIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discordIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The Discord application ID */
                    appId?: string;
                    /** @description The Discord bot token */
                    botToken?: string;
                    /** @description The Discord public key */
                    publicKey?: string;
                    /** @description The Discord command handle */
                    handle?: string;
                    /** @description The chat session duration */
                    sessionDuration?: number;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Discord integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Discord Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createDiscordIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The Discord application ID */
                    appId?: string;
                    /** @description The Discord bot token */
                    botToken?: string;
                    /** @description The Discord public key */
                    publicKey?: string;
                    /** @description The Discord command handle */
                    handle?: string;
                    /** @description The chat session duration */
                    sessionDuration?: number;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Discord integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Discord Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listDiscordIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Discord integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The Discord application ID */
                            appId?: string;
                            /** @description The Discord command handle */
                            handle?: string;
                            /** @description The chat session duration */
                            sessionDuration?: number;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The Discord application ID */
                            appId?: string;
                            /** @description The Discord command handle */
                            handle?: string;
                            /** @description The chat session duration */
                            sessionDuration?: number;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteEmailIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                emailIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Email integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Email integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchEmailIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                emailIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Email integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description Weather to collect contacts */
                        contactCollection?: boolean;
                        /** @description The session duration (in milliseconds) */
                        sessionDuration?: number;
                    } & ({
                        /** @description The ID of the bot this configuration is using */
                        botId?: string;
                    } | {
                        /**
                         * @description A model definition
                         * @example gpt-4-turbo/temperature=0.7
                         */
                        model?: string;
                        /** @description The backstory this configuration is using */
                        backstory?: string;
                        /** @description The id of the dataset this configuration is using */
                        datasetId?: string;
                        /** @description The id of the skillset this configuration is using */
                        skillsetId?: string;
                        /** @description The privacy flag for this configuration */
                        privacy?: boolean;
                        /** @description The moderation flag for this configuration */
                        moderation?: boolean;
                    });
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    setupEmailIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                emailIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Email integration was successfully setup */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Email Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateEmailIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                emailIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description Weather to collect contacts */
                    contactCollection?: boolean;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Email integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Email Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createEmailIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description Weather to collect contacts */
                    contactCollection?: boolean;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Email integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Email Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listEmailIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Email integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description Weather to collect contacts */
                            contactCollection?: boolean;
                            /** @description The session duration (in milliseconds) */
                            sessionDuration?: number;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description Weather to collect contacts */
                            contactCollection?: boolean;
                            /** @description The session duration (in milliseconds) */
                            sessionDuration?: number;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteExtractIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                extractIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Extract integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Extract integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchExtractIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                extractIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Extract integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The ID of the Bot to use */
                        botId: string;
                        /** @description The configured extraction schema */
                        schema?: {
                            [key: string]: unknown;
                        };
                        /** @description Optional webhook to receive the extracted data */
                        request?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateExtractIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                extractIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The ID of the Bot to use */
                    botId?: string;
                    /** @description The configured extraction schema */
                    schema?: {
                        [key: string]: unknown;
                    };
                    /** @description Optional webhook to receive the extracted data */
                    request?: string;
                };
            };
        };
        responses: {
            /** @description The Extract integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Extract Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createExtractIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The ID of the Bot to use */
                    botId: string;
                    /** @description The configured extraction schema */
                    schema?: {
                        [key: string]: unknown;
                    };
                    /** @description Optional webhook to receive the extracted data */
                    request?: string;
                };
            };
        };
        responses: {
            /** @description The Extract integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Extract Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listExtractIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Extract integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The ID of the Bot to use */
                            botId: string;
                            /** @description The configured extraction schema */
                            schema?: {
                                [key: string]: unknown;
                            };
                            /** @description Optional webhook to receive the extracted data */
                            request?: string;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description Instance list properties */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The ID of the Bot to use */
                            botId: string;
                            /** @description The configured extraction schema */
                            schema?: {
                                [key: string]: unknown;
                            };
                            /** @description Optional webhook to receive the extracted data */
                            request?: string;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteMessengerIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                messengerIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Messenger integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Messenger integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchMessengerIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                messengerIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Messenger integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The Messenger integration verify token */
                        verifyToken: string;
                        /** @description The session duration (in milliseconds) */
                        sessionDuration?: number;
                        /** @description Weather the bot supports attachments */
                        attachments?: boolean;
                    } & ({
                        /** @description The ID of the bot this configuration is using */
                        botId?: string;
                    } | {
                        /**
                         * @description A model definition
                         * @example gpt-4-turbo/temperature=0.7
                         */
                        model?: string;
                        /** @description The backstory this configuration is using */
                        backstory?: string;
                        /** @description The id of the dataset this configuration is using */
                        datasetId?: string;
                        /** @description The id of the skillset this configuration is using */
                        skillsetId?: string;
                        /** @description The privacy flag for this configuration */
                        privacy?: boolean;
                        /** @description The moderation flag for this configuration */
                        moderation?: boolean;
                    });
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    setupMessengerIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                messengerIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Messenger integration was successfully setup */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Messenger Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateMessengerIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                messengerIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The Messenger integration access token */
                    accessToken?: string;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                    /** @description Weather the bot supports attachments */
                    attachments?: boolean;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Messenger integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Messenger Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createMessengerIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The Messenger integration access token */
                    accessToken?: string;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                    /** @description Weather the bot supports attachments */
                    attachments?: boolean;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Messenger integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Messenger Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listMessengerIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Messenger integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The Messenger integration verify token */
                            verifyToken: string;
                            /** @description The session duration (in milliseconds) */
                            sessionDuration?: number;
                            /** @description Weather the bot supports attachments */
                            attachments?: boolean;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The Messenger integration verify token */
                            verifyToken: string;
                            /** @description The session duration (in milliseconds) */
                            sessionDuration?: number;
                            /** @description Weather the bot supports attachments */
                            attachments?: boolean;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteNotionIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notionIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Notion integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Notion integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchNotionIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notionIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Notion integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The ID of the dataset to sync into */
                        datasetId: string;
                        /** @description The Notion API token */
                        token?: string;
                        /** @description The sync schedule */
                        syncSchedule?: string;
                        /** @description The time in milliseconds until records expire */
                        expiresIn?: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    syncNotionIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notionIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Notion integration was synced successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the synced Notion integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateNotionIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notionIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The ID of the dataset to sync into */
                    datasetId?: string;
                    /** @description The Notion API token */
                    token?: string;
                    /** @description The sync schedule */
                    syncSchedule?: string;
                    /** @description The time in milliseconds until records expire */
                    expiresIn?: number;
                };
            };
        };
        responses: {
            /** @description The Notion integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Notion Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createNotionIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The ID of the dataset to sync into */
                    datasetId: string;
                    /** @description The Notion API token */
                    token?: string;
                    /** @description The sync schedule */
                    syncSchedule?: string;
                    /** @description The time in milliseconds until records expire */
                    expiresIn?: number;
                };
            };
        };
        responses: {
            /** @description The Notion integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Notion Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listNotionIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Notion integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The ID of the dataset to sync into */
                            datasetId: string;
                            /** @description The Notion API token */
                            token?: string;
                            /** @description The sync schedule */
                            syncSchedule?: string;
                            /** @description The time in milliseconds until records expire */
                            expiresIn?: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description Instance list properties */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The ID of the dataset to sync into */
                            datasetId: string;
                            /** @description The Notion API token */
                            token?: string;
                            /** @description The sync schedule */
                            syncSchedule?: string;
                            /** @description The time in milliseconds until records expire */
                            expiresIn?: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteSitemapIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sitemapIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Sitemap integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Sitemap integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchSitemapIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sitemapIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Sitemap integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The ID of the dataset used in the Sitemap integration */
                        datasetId: string;
                        /** @description The URL to use for this Sitemap integration */
                        url?: string;
                        /** @description The glob rules to use for this Sitemap integration */
                        glob?: string;
                        /** @description The selector rules to use for this Sitemap integration */
                        selectors?: string;
                        /** @description Indicates if the Sitemap integration should use JavaScript during the spidering process */
                        javascript?: boolean;
                        /** @description The sync schedule to use for this Sitemap integration */
                        syncSchedule?: string;
                        /** @description Record expiry in milliseconds */
                        expiresIn?: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    syncSitemapIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sitemapIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Sitemap integration was scheduled for syncing successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Sitemap Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateSitemapIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sitemapIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The ID of the dataset to use for this Sitemap integration */
                    datasetId?: string;
                    /** @description The URL to use for this Sitemap integration */
                    url?: string;
                    /** @description The glob rules to use for this Sitemap integration */
                    glob?: string;
                    /** @description The selector rules to use for this Sitemap integration */
                    selectors?: string;
                    /** @description Indicates if the Sitemap integration should use JavaScript during the spidering process */
                    javascript?: boolean;
                    /** @description The sync schedule to use for this Sitemap integration */
                    syncSchedule?: string;
                    /** @description Record expiry in milliseconds */
                    expiresIn?: number;
                };
            };
        };
        responses: {
            /** @description The Sitemap integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Sitemap Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createSitemapIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The ID of the dataset to use for this Sitemap integration */
                    datasetId: string;
                    /** @description The URL to use for this Sitemap integration */
                    url?: string;
                    /** @description The glob rules to use for this Sitemap integration */
                    glob?: string;
                    /** @description The selector rules to use for this Sitemap integration */
                    selectors?: string;
                    /** @description Indicates if the Sitemap integration should use JavaScript during the spidering process */
                    javascript?: boolean;
                    /** @description The sync schedule to use for this Sitemap integration */
                    syncSchedule?: string;
                    /** @description Record expiry in milliseconds */
                    expiresIn?: number;
                };
            };
        };
        responses: {
            /** @description The Sitemap integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Sitemap Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listSitemapIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Sitemap integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The ID of the dataset used in the Sitemap integration */
                            datasetId: string;
                            /** @description The URL to use for this Sitemap integration */
                            url?: string;
                            /** @description The glob rules to use for this Sitemap integration */
                            glob?: string;
                            /** @description The selector rules to use for this Sitemap integration */
                            selectors?: string;
                            /** @description Indicates if the Sitemap integration should use JavaScript during the spidering process */
                            javascript?: boolean;
                            /** @description The sync schedule to use for this Sitemap integration */
                            syncSchedule?: string;
                            /** @description Record expiry in milliseconds */
                            expiresIn?: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description Instance list properties */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The ID of the dataset used in the Sitemap integration */
                            datasetId: string;
                            /** @description The URL to use for this Sitemap integration */
                            url?: string;
                            /** @description The glob rules to use for this Sitemap integration */
                            glob?: string;
                            /** @description The selector rules to use for this Sitemap integration */
                            selectors?: string;
                            /** @description Indicates if the Sitemap integration should use JavaScript during the spidering process */
                            javascript?: boolean;
                            /** @description The sync schedule to use for this Sitemap integration */
                            syncSchedule?: string;
                            /** @description Record expiry in milliseconds */
                            expiresIn?: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteSlackIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slackIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Slack integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Slack integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchSlackIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slackIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Slack integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The session duration for the Slack integration */
                        sessionDuration?: number;
                        /** @description The number of visible messages outside of the new thread */
                        visibleMessages?: number;
                    } & ({
                        /** @description The ID of the bot this configuration is using */
                        botId?: string;
                    } | {
                        /**
                         * @description A model definition
                         * @example gpt-4-turbo/temperature=0.7
                         */
                        model?: string;
                        /** @description The backstory this configuration is using */
                        backstory?: string;
                        /** @description The id of the dataset this configuration is using */
                        datasetId?: string;
                        /** @description The id of the skillset this configuration is using */
                        skillsetId?: string;
                        /** @description The privacy flag for this configuration */
                        privacy?: boolean;
                        /** @description The moderation flag for this configuration */
                        moderation?: boolean;
                    });
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    setupSlackIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slackIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Slack integration was setuped successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the setuped Slack integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateSlackIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slackIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The signing secret for the Slack integration */
                    signingSecret?: string;
                    /** @description The bot token for the Slack integration */
                    botToken?: string;
                    /** @description The session duration for the Slack integration */
                    sessionDuration?: number;
                    /** @description The number of visible messages outside of the new thread */
                    visibleMessages?: number;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Slack integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Slack Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createSlackIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The signing secret for the Slack integration */
                    signingSecret?: string;
                    /** @description The bot token for the Slack integration */
                    botToken?: string;
                    /** @description The session duration for the Slack integration */
                    sessionDuration?: number;
                    /** @description The number of visible messages outside of the new thread */
                    visibleMessages?: number;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Slack integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Slack Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listSlackIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Slack integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The session duration for the Slack integration */
                            sessionDuration?: number;
                            /** @description The number of visible messages outside of the new thread */
                            visibleMessages?: number;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The session duration for the Slack integration */
                            sessionDuration?: number;
                            /** @description The number of visible messages outside of the new thread */
                            visibleMessages?: number;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteSupportIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                supportIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Support integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Support integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchSupportIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                supportIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Support integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The ID of the Bot to use */
                        botId: string;
                        /** @description The email to use */
                        email?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateSupportIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                supportIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The ID of the Bot to use */
                    botId?: string;
                    /** @description The email to use */
                    email?: string;
                };
            };
        };
        responses: {
            /** @description The Support integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Support Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createSupportIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The ID of the Bot to use */
                    botId: string;
                    /** @description The email to use */
                    email?: string;
                };
            };
        };
        responses: {
            /** @description The Support integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Support Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listSupportIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Support integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The ID of the Bot to use */
                            botId: string;
                            /** @description The email to use */
                            email?: string;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description Instance list properties */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The ID of the Bot to use */
                            botId: string;
                            /** @description The email to use */
                            email?: string;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteTelegramIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                telegramIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Telegram integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Telegram integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchTelegramIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                telegramIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Telegram integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The session duration (in milliseconds) */
                        sessionDuration?: number;
                        /** @description Weather the bot supports attachments */
                        attachments?: boolean;
                    } & ({
                        /** @description The ID of the bot this configuration is using */
                        botId?: string;
                    } | {
                        /**
                         * @description A model definition
                         * @example gpt-4-turbo/temperature=0.7
                         */
                        model?: string;
                        /** @description The backstory this configuration is using */
                        backstory?: string;
                        /** @description The id of the dataset this configuration is using */
                        datasetId?: string;
                        /** @description The id of the skillset this configuration is using */
                        skillsetId?: string;
                        /** @description The privacy flag for this configuration */
                        privacy?: boolean;
                        /** @description The moderation flag for this configuration */
                        moderation?: boolean;
                    });
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    setupTelegramIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                telegramIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Telegram integration was successfully setup */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Telegram Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateTelegramIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                telegramIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The Telegram integration bot token */
                    botToken?: string;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                    /** @description Weather the bot supports attachments */
                    attachments?: boolean;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Telegram integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Telegram Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createTelegramIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The Telegram integration bot token */
                    botToken?: string;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                    /** @description Weather the bot supports attachments */
                    attachments?: boolean;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Telegram integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Telegram Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listTelegramIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Telegram integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The session duration (in milliseconds) */
                            sessionDuration?: number;
                            /** @description Weather the bot supports attachments */
                            attachments?: boolean;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The session duration (in milliseconds) */
                            sessionDuration?: number;
                            /** @description Weather the bot supports attachments */
                            attachments?: boolean;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteTriggerIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                triggerIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Trigger integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Trigger integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchTriggerIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                triggerIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Trigger integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The Trigger integration secret */
                        secret: string;
                        /** @description The text message to trigger the integration */
                        text?: string;
                        /** @description The session duration (in milliseconds) */
                        sessionDuration?: number;
                    } & ({
                        /** @description The ID of the bot this configuration is using */
                        botId?: string;
                    } | {
                        /**
                         * @description A model definition
                         * @example gpt-4-turbo/temperature=0.7
                         */
                        model?: string;
                        /** @description The backstory this configuration is using */
                        backstory?: string;
                        /** @description The id of the dataset this configuration is using */
                        datasetId?: string;
                        /** @description The id of the skillset this configuration is using */
                        skillsetId?: string;
                        /** @description The privacy flag for this configuration */
                        privacy?: boolean;
                        /** @description The moderation flag for this configuration */
                        moderation?: boolean;
                    });
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    setupTriggerIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                triggerIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Trigger integration was successfully setup */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Trigger Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateTriggerIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                triggerIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The text message to trigger the integration */
                    text?: string;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Trigger integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Trigger Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createTriggerIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The text message to trigger the integration */
                    text?: string;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Trigger integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Trigger Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listTriggerIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Trigger integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The Trigger integration secret */
                            secret: string;
                            /** @description The text message to trigger the integration */
                            text?: string;
                            /** @description The session duration (in milliseconds) */
                            sessionDuration?: number;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The Trigger integration secret */
                            secret: string;
                            /** @description The text message to trigger the integration */
                            text?: string;
                            /** @description The session duration (in milliseconds) */
                            sessionDuration?: number;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteWhatsAppIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                whatsappIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The WhatsApp integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted WhatsApp integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchWhatsAppIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                whatsappIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The WhatsApp integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The WhatsApp integration verify token */
                        verifyToken: string;
                        /** @description The WhatsApp integration phone number ID */
                        phoneNumberId?: string;
                        /** @description Weather to collect contacts */
                        contactCollection?: boolean;
                        /** @description The session duration (in milliseconds) */
                        sessionDuration?: number;
                        /** @description Weather the bot supports attachments */
                        attachments?: boolean;
                    } & ({
                        /** @description The ID of the bot this configuration is using */
                        botId?: string;
                    } | {
                        /**
                         * @description A model definition
                         * @example gpt-4-turbo/temperature=0.7
                         */
                        model?: string;
                        /** @description The backstory this configuration is using */
                        backstory?: string;
                        /** @description The id of the dataset this configuration is using */
                        datasetId?: string;
                        /** @description The id of the skillset this configuration is using */
                        skillsetId?: string;
                        /** @description The privacy flag for this configuration */
                        privacy?: boolean;
                        /** @description The moderation flag for this configuration */
                        moderation?: boolean;
                    });
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    setupWhatsAppIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                whatsappIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The WhatsApp integration was successfully setup */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the WhatsApp Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateWhatsAppIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                whatsappIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The WhatsApp integration phone number ID */
                    phoneNumberId?: string;
                    /** @description The WhatsApp integration access token */
                    accessToken?: string;
                    /** @description Weather to collect contacts */
                    contactCollection?: boolean;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                    /** @description Weather the bot supports attachments */
                    attachments?: boolean;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The WhatsApp integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the WhatsApp Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createWhatsAppIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The WhatsApp integration phone number ID */
                    phoneNumberId?: string;
                    /** @description The WhatsApp integration access token */
                    accessToken?: string;
                    /** @description Weather to collect contacts */
                    contactCollection?: boolean;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                    /** @description Weather the bot supports attachments */
                    attachments?: boolean;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The WhatsApp integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the WhatsApp Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listWhatsAppIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of WhatsApp integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The WhatsApp integration verify token */
                            verifyToken: string;
                            /** @description The WhatsApp integration phone number ID */
                            phoneNumberId?: string;
                            /** @description Weather to collect contacts */
                            contactCollection?: boolean;
                            /** @description The session duration (in milliseconds) */
                            sessionDuration?: number;
                            /** @description Weather the bot supports attachments */
                            attachments?: boolean;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The WhatsApp integration verify token */
                            verifyToken: string;
                            /** @description The WhatsApp integration phone number ID */
                            phoneNumberId?: string;
                            /** @description Weather to collect contacts */
                            contactCollection?: boolean;
                            /** @description The session duration (in milliseconds) */
                            sessionDuration?: number;
                            /** @description Weather the bot supports attachments */
                            attachments?: boolean;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteWidgetIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                widgetIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Widget integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Widget integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchWidgetIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                widgetIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Widget integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The associated name */
                        name?: string;
                        /** @description The associated description */
                        description?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The instance ID */
                        id: string;
                        /** @description The creation date */
                        createdAt: number;
                        /** @description The last update date */
                        updatedAt: number;
                        /** @description The theme of the Widget integration */
                        theme?: string;
                        /** @description The default layout of the Widget integration */
                        layout?: string;
                        /** @description The title of the Widget integration */
                        title?: string;
                        /** @description The intro of the Widget integration */
                        intro?: string;
                        /** @description The initial message of the Widget integration */
                        initial?: string;
                        /** @description The input placeholder of the Widget integration */
                        placeholder?: string;
                        /** @description The origin URLs of the Widget integration */
                        origin?: string;
                        /** @description The session duration of the Widget integration */
                        sessionDuration?: number;
                        /** @description The language of the Widget integration */
                        language?: string;
                        /** @description Whether the Widget integration is streaming */
                        stream?: boolean;
                        /** @description Whether the Widget integration is verbose */
                        verbose?: boolean;
                        /** @description Whether the Widget integration has tools */
                        tools?: boolean;
                        /** @description Whether the Widget integration unfurls links */
                        unfurl?: boolean;
                        /** @description Whether the Widget integration supports math */
                        math?: boolean;
                        /** @description Whether the Widget integration supports carousels */
                        carousel?: boolean;
                        /** @description Whether the Widget integration supports attachments */
                        attachments?: boolean;
                        /** @description Whether the Widget integration auto scrolls */
                        autoScroll?: boolean;
                        /** @description Whether the Widget integration starts first */
                        startFirst?: boolean;
                        /** @description Whether the Widget integration collects contacts */
                        contactCollection?: boolean;
                        /** @description Controls whether the Widget allows exporting the current conversation */
                        exportConversation?: boolean;
                        /** @description Controls whether the Widget allows restarting the conversation */
                        restartConversation?: boolean;
                        /** @description Controls whether the Widget allows maximizing the conversation */
                        maximize?: boolean;
                        /** @description Controls whether the Widget allows peeking at the initial messages */
                        messagePeek?: boolean;
                        /** @description Whether the Widget integration displays powered by ChatBotKit */
                        poweredBy?: boolean;
                    } & ({
                        /** @description The ID of the bot this configuration is using */
                        botId?: string;
                    } | {
                        /**
                         * @description A model definition
                         * @example gpt-4-turbo/temperature=0.7
                         */
                        model?: string;
                        /** @description The backstory this configuration is using */
                        backstory?: string;
                        /** @description The id of the dataset this configuration is using */
                        datasetId?: string;
                        /** @description The id of the skillset this configuration is using */
                        skillsetId?: string;
                        /** @description The privacy flag for this configuration */
                        privacy?: boolean;
                        /** @description The moderation flag for this configuration */
                        moderation?: boolean;
                    });
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    setupWidgetIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                widgetIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Widget integration was setup successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Widget integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateWidgetIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                widgetIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The theme of the Widget integration */
                    theme?: string;
                    /** @description The default layout of the Widget integration */
                    layout?: string;
                    /** @description The title of the Widget integration */
                    title?: string;
                    /** @description The intro of the Widget integration */
                    intro?: string;
                    /** @description The initial message of the Widget integration */
                    initial?: string;
                    /** @description The input placeholder of the Widget integration */
                    placeholder?: string;
                    /** @description The origin URLs of the Widget integration */
                    origin?: string;
                    /** @description The session duration of the Widget integration */
                    sessionDuration?: number;
                    /** @description The language of the Widget integration */
                    language?: string;
                    /** @description Whether the Widget integration is streaming */
                    stream?: boolean;
                    /** @description Whether the Widget integration is verbose */
                    verbose?: boolean;
                    /** @description Whether the Widget integration has tools */
                    tools?: boolean;
                    /** @description Whether the Widget integration unfurls links */
                    unfurl?: boolean;
                    /** @description Whether the Widget integration supports math */
                    math?: boolean;
                    /** @description Whether the Widget integration supports carousels */
                    carousel?: boolean;
                    /** @description Whether the Widget integration supports attachments */
                    attachments?: boolean;
                    /** @description Whether the Widget integration auto scrolls */
                    autoScroll?: boolean;
                    /** @description Whether the Widget integration starts first */
                    startFirst?: boolean;
                    /** @description Whether the Widget integration collects contacts */
                    contactCollection?: boolean;
                    /** @description Controls whether the Widget allows exporting the current conversation */
                    exportConversation?: boolean;
                    /** @description Controls whether the Widget allows restarting the conversation */
                    restartConversation?: boolean;
                    /** @description Controls whether the Widget allows maximizing the conversation */
                    maximize?: boolean;
                    /** @description Controls whether the Widget allows peeking at the initial messages */
                    messagePeek?: boolean;
                    /** @description Whether the Widget integration displays powered by ChatBotKit */
                    poweredBy?: boolean;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Widget integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Widget Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createWidgetIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The associated name */
                    name?: string;
                    /** @description The associated description */
                    description?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                    /** @description The theme of the Widget integration */
                    theme?: string;
                    /** @description The default layout of the Widget integration */
                    layout?: string;
                    /** @description The title of the Widget integration */
                    title?: string;
                    /** @description The intro of the Widget integration */
                    intro?: string;
                    /** @description The initial message of the Widget integration */
                    initial?: string;
                    /** @description The input placeholder of the Widget integration */
                    placeholder?: string;
                    /** @description The origin URLs of the Widget integration */
                    origin?: string;
                    /** @description The session duration of the Widget integration */
                    sessionDuration?: number;
                    /** @description The language of the Widget integration */
                    language?: string;
                    /** @description Whether the Widget integration is streaming */
                    stream?: boolean;
                    /** @description Whether the Widget integration is verbose */
                    verbose?: boolean;
                    /** @description Whether the Widget integration has tools */
                    tools?: boolean;
                    /** @description Whether the Widget integration unfurls links */
                    unfurl?: boolean;
                    /** @description Weather the Widget integration supports math */
                    math?: boolean;
                    /** @description Weather the Widget integration supports carousels */
                    carousel?: boolean;
                    /** @description Weather the Widget integration supports attachments */
                    attachments?: boolean;
                    /** @description Whether the Widget integration auto scrolls */
                    autoScroll?: boolean;
                    /** @description Whether the Widget integration starts first */
                    startFirst?: boolean;
                    /** @description Whether the Widget integration collects contacts */
                    contactCollection?: boolean;
                    /** @description Controls whether the Widget allows exporting the current conversation */
                    exportConversation?: boolean;
                    /** @description Controls whether the Widget allows maximizing the conversation */
                    maximize?: boolean;
                    /** @description Controls whether the Widget allows peeking at the initial messages */
                    messagePeek?: boolean;
                    /** @description Controls whether the Widget allows restarting the conversation */
                    restartConversation?: boolean;
                    /** @description Whether the Widget integration displays powered by ChatBotKit */
                    poweredBy?: boolean;
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /**
                     * @description A model definition
                     * @example gpt-4-turbo/temperature=0.7
                     */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The Widget integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Widget Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listWidgetIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Widget integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The theme of the Widget integration */
                            theme?: string;
                            /** @description The default layout of the Widget integration */
                            layout?: string;
                            /** @description The title of the Widget integration */
                            title?: string;
                            /** @description The intro of the Widget integration */
                            intro?: string;
                            /** @description The initial message of the Widget integration */
                            initial?: string;
                            /** @description The input placeholder of the Widget integration */
                            placeholder?: string;
                            /** @description The origin URLs of the Widget integration */
                            origin?: string;
                            /** @description The session duration of the Widget integration */
                            sessionDuration?: number;
                            /** @description The language of the Widget integration */
                            language?: string;
                            /** @description Whether the Widget integration is streaming */
                            stream?: boolean;
                            /** @description Whether the Widget integration is verbose */
                            verbose?: boolean;
                            /** @description Whether the Widget integration has tools */
                            tools?: boolean;
                            /** @description Whether the Widget integration unfurls links */
                            unfurl?: boolean;
                            /** @description Weather the Widget integration supports math */
                            math?: boolean;
                            /** @description Weather the Widget integration supports carousels */
                            carousel?: boolean;
                            /** @description Weather the Widget integration supports attachments */
                            attachments?: boolean;
                            /** @description Whether the Widget integration auto scrolls */
                            autoScroll?: boolean;
                            /** @description Whether the Widget integration starts first */
                            startFirst?: boolean;
                            /** @description Whether the Widget integration collects contacts */
                            contactCollection?: boolean;
                            /** @description Controls whether the Widget allows exporting the current conversation */
                            exportConversation?: boolean;
                            /** @description Controls whether the Widget allows restarting the conversation */
                            restartConversation?: boolean;
                            /** @description Controls whether the Widget allows maximizing the conversation */
                            maximize?: boolean;
                            /** @description Controls whether the Widget allows peeking at the initial messages */
                            messagePeek?: boolean;
                            /** @description Whether the Widget integration displays powered by ChatBotKit */
                            poweredBy?: boolean;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        /** @description A bot configuration or reference */
                        data: {
                            /** @description The associated name */
                            name?: string;
                            /** @description The associated description */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The instance ID */
                            id: string;
                            /** @description The creation date */
                            createdAt: number;
                            /** @description The last update date */
                            updatedAt: number;
                            /** @description The theme of the Widget integration */
                            theme?: string;
                            /** @description The default layout of the Widget integration */
                            layout?: string;
                            /** @description The title of the Widget integration */
                            title?: string;
                            /** @description The intro of the Widget integration */
                            intro?: string;
                            /** @description The initial message of the Widget integration */
                            initial?: string;
                            /** @description The input placeholder of the Widget integration */
                            placeholder?: string;
                            /** @description The origin URLs of the Widget integration */
                            origin?: string;
                            /** @description The session duration of the Widget integration */
                            sessionDuration?: number;
                            /** @description The language of the Widget integration */
                            language?: string;
                            /** @description Whether the Widget integration is streaming */
                            stream?: boolean;
                            /** @description Whether the Widget integration is verbose */
                            verbose?: boolean;
                            /** @description Whether the Widget integration has tools */
                            tools?: boolean;
                            /** @description Whether the Widget integration unfurls links */
                            unfurl?: boolean;
                            /** @description Weather the Widget integration supports math */
                            math?: boolean;
                            /** @description Weather the Widget integration supports carousels */
                            carousel?: boolean;
                            /** @description Weather the Widget integration supports attachments */
                            attachments?: boolean;
                            /** @description Whether the Widget integration auto scrolls */
                            autoScroll?: boolean;
                            /** @description Whether the Widget integration starts first */
                            startFirst?: boolean;
                            /** @description Whether the Widget integration collects contacts */
                            contactCollection?: boolean;
                            /** @description Controls whether the Widget allows exporting the current conversation */
                            exportConversation?: boolean;
                            /** @description Controls whether the Widget allows restarting the conversation */
                            restartConversation?: boolean;
                            /** @description Controls whether the Widget allows maximizing the conversation */
                            maximize?: boolean;
                            /** @description Controls whether the Widget allows peeking at the initial messages */
                            messagePeek?: boolean;
                            /** @description Whether the Widget integration displays powered by ChatBotKit */
                            poweredBy?: boolean;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /**
                             * @description A model definition
                             * @example gpt-4-turbo/temperature=0.7
                             */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    generateMagicFromPrompt: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                promptId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The text to use as input */
                    text: string;
                    /** @description The model to use for generation */
                    model?: string;
                };
            };
        };
        responses: {
            /** @description The magic prompt completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The input text */
                        text: string;
                        /** @description Usage information */
                        usage: {
                            /** @description The tokens used in this exchange */
                            token: number;
                        };
                    };
                    "application/jsonl": {
                        /**
                         * @description The generated text
                         * @enum {string}
                         */
                        type: "result";
                        data: {
                            /** @description The input text */
                            text: string;
                            /** @description Usage information */
                            usage: {
                                /** @description The tokens used in this exchange */
                                token: number;
                            };
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listMagicPrompts: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of magic prompts was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of magic prompts */
                        items: {
                            /** @description The ID of the magic prompt */
                            id: string;
                            /** @description The ID of the magic prompt */
                            name: string;
                            /** @description The description of the magic prompt */
                            description: string;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the magic prompt */
                            id: string;
                            /** @description The ID of the magic prompt */
                            name: string;
                            /** @description The description of the magic prompt */
                            description: string;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deletePartnerUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The user was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted user */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchPartnerUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The partner user was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the partner user */
                        id: string;
                        /** @description The name of the partner user */
                        name?: string;
                        /** @description The image of the partner user */
                        image?: string;
                        /** @description The email of the partner user */
                        email?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the partner user was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the partner user was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deletePartnerUserToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
                tokenId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The user token was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted user token */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createPartnerUserToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The user token was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created user token */
                        id: string;
                        /** @description The token of the created user token */
                        token: string;
                        /** @description The timestamp for when the user token was created (in milliseconds) */
                        createdAt: number;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listPartnerUserTokens: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of user tokens was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The ID of the user */
                            id: string;
                            /** @description The timestamp for when the user token was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the user token was updated (in milliseconds) */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the user */
                            id: string;
                            /** @description The timestamp for when the user token was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the user token was updated (in milliseconds) */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updatePartnerUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the partner user */
                    name?: string;
                    /** @description The image of the partner user */
                    image?: string;
                    /** @description The email of the partner user */
                    email?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The message was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated partner user */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createPartnerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the partner user */
                    name?: string;
                    /** @description The image of the partner user */
                    image?: string;
                    /** @description The email of the partner user */
                    email?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The user was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created user */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listPartnerUsers: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of users was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The ID of the partner user */
                            id: string;
                            /** @description The name of the partner user */
                            name?: string;
                            /** @description The image of the partner user */
                            image?: string;
                            /** @description The email of the partner user */
                            email?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the user was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the user was last updated (in milliseconds) */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the partner user */
                            id: string;
                            /** @description The name of the partner user */
                            name?: string;
                            /** @description The image of the partner user */
                            image?: string;
                            /** @description The email of the partner user */
                            email?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the user was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the user was last updated (in milliseconds) */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listPlatformModels: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of models was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of models */
                        items: {
                            /** @description The ID of the model */
                            id: string;
                            /** @description The description of the model */
                            description: string;
                            /** @description The backstory of the model */
                            provider: string;
                            /** @description The model of the model */
                            family: string;
                            /** @description The maximum number of tokens the model can use */
                            maxTokens: number;
                            /** @description The maximum number of tokens the model can accept */
                            maxInputTokens: number;
                            /** @description The maximum number of tokens the model can generate */
                            maxOutputTokens: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the model */
                            id: string;
                            /** @description The description of the model */
                            description: string;
                            /** @description The backstory of the model */
                            provider: string;
                            /** @description The model of the model */
                            family: string;
                            /** @description The maximum number of tokens the model can use */
                            maxTokens: number;
                            /** @description The maximum number of tokens the model can accept */
                            maxInputTokens: number;
                            /** @description The maximum number of tokens the model can generate */
                            maxOutputTokens: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteSecret: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                secretId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The secret was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted secret */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchSecret: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                secretId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The secret was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the secret */
                        id: string;
                        /** @description The name of the secret */
                        name?: string;
                        /** @description The description of the secret */
                        description?: string;
                        /**
                         * @description The type of the secret
                         * @enum {string}
                         */
                        type: "bearer" | "plain" | "basic";
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the secret was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the secret was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateSecret: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                secretId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The new name for the secret */
                    name?: string;
                    /** @description The new description for the secret */
                    description?: string;
                    /**
                     * @description The type of the secret
                     * @enum {string}
                     */
                    type?: "bearer" | "plain" | "basic";
                    /** @description The value of the secret */
                    value?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The secret was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated secret */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createSecret: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the secret */
                    name?: string;
                    /** @description A description of the secret */
                    description?: string;
                    /**
                     * @description The type of the secret
                     * @enum {string}
                     */
                    type?: "bearer" | "plain" | "basic";
                    /** @description The value of the secret */
                    value?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The secret was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created secret */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listSecrets: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of secrets was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of secrets */
                        items: {
                            /** @description The ID of the secret */
                            id: string;
                            /** @description The name of the secret */
                            name?: string;
                            /** @description The description of the secret */
                            description?: string;
                            /**
                             * @description The type of the secret
                             * @enum {string}
                             */
                            type: "bearer" | "plain" | "basic";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the secret was created */
                            createdAt: number;
                            /** @description The timestamp when the secret was last updated */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the secret */
                            id: string;
                            /** @description The name of the secret */
                            name?: string;
                            /** @description The description of the secret */
                            description?: string;
                            /**
                             * @description The type of the secret
                             * @enum {string}
                             */
                            type: "bearer" | "plain" | "basic";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the secret was created */
                            createdAt: number;
                            /** @description The timestamp when the secret was last updated */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteSkillsetAbility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
                abilityId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The ability was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted ability */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchSkillsetAbility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
                abilityId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The skillset was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the skillset ability */
                        id: string;
                        /** @description The name of the skillset ability */
                        name: string;
                        /** @description The description of the skillset ability */
                        description: string;
                        /** @description The instruction of the skillset ability */
                        instruction: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the skillset ability was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the skillset ability was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateSkillsetAbility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
                abilityId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the ability */
                    name?: string;
                    /** @description The description for the ability */
                    description?: string;
                    /** @description The text to update the ability with */
                    instruction?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The ability was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated ability */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createSkillsetAbility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the ability */
                    name: string;
                    /** @description The description for the ability */
                    description: string;
                    /** @description The instruction of the ability */
                    instruction: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The ability was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created ability */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    exportSkillsetAbilities: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The export of skillset abilities was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            id: string;
                            name: string;
                            description: string;
                            instruction: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            id: string;
                            name: string;
                            description: string;
                            instruction: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        };
                    };
                    "text/csv": string;
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listSkillsetAbilities: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of abilities was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            id: string;
                            name: string;
                            description: string;
                            instruction: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            id: string;
                            name: string;
                            description: string;
                            instruction: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteSkillset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The skillset was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted skillset */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchSkillset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The skillset was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the skillset */
                        id: string;
                        /** @description The name of the skillset */
                        name?: string;
                        /** @description The description of the skillset */
                        description?: string;
                        /**
                         * @description The skillset visibility
                         * @enum {string}
                         */
                        visibility: "private" | "public";
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the skillset was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the skillset was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateSkillset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The new name for the skillset */
                    name?: string;
                    /** @description The new description for the skillset */
                    description?: string;
                    /**
                     * @description The skillset visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The skillset was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated skillset */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createSkillset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the skillset */
                    name?: string;
                    /** @description A description of the skillset */
                    description?: string;
                    /**
                     * @description The skillset visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The skillset was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created skillset */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listSkillsets: {
        parameters: {
            query?: {
                cursor?: string;
                order?: "asc" | "desc";
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of skillsets was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of skillsets */
                        items: {
                            /** @description The ID of the skillset */
                            id: string;
                            /** @description The name of the skillset */
                            name?: string;
                            /** @description The description of the skillset */
                            description?: string;
                            /**
                             * @description The skillset visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the skillset was created */
                            createdAt: number;
                            /** @description The timestamp when the skillset was last updated */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the skillset */
                            id: string;
                            /** @description The name of the skillset */
                            name?: string;
                            /** @description The description of the skillset */
                            description?: string;
                            /**
                             * @description The skillset visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the skillset was created */
                            createdAt: number;
                            /** @description The timestamp when the skillset was last updated */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchUsage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The usage information was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The number of tokens the user has used */
                        tokens: number;
                        /** @description The number of conversations the user has created */
                        conversations: number;
                        /** @description The number of messages the user has sent */
                        messages: number;
                        /** @description Database usage information */
                        database: {
                            /** @description The number of datasets the user has created */
                            datasets: number;
                            /** @description The number of records the user has created */
                            records: number;
                            /** @description The number of skillsets the user has created */
                            skillsets: number;
                            /** @description The number of abilities the user has created */
                            abilities: number;
                            /** @description The number of files the user has created */
                            files: number;
                            /** @description The number of users the user has created */
                            users: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchUsageSeries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The usage series information was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The number of tokens the user has used */
                        tokens: {
                            /** @description The date of the data point */
                            date: number;
                            /** @description The total number of tokens the user has used */
                            total: number;
                        }[];
                        /** @description The number of conversations the user has created */
                        conversations: {
                            /** @description The date of the data point */
                            date: number;
                            /** @description The total number of conversations the user has used */
                            total: number;
                        }[];
                        /** @description The number of messages the user has created */
                        messages: {
                            /** @description The date of the data point */
                            date: number;
                            /** @description The total number of messages the user has used */
                            total: number;
                        }[];
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
}
