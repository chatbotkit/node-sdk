/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/bot/{botId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a bot */
        post: operations["deleteBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/{botId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a bot */
        get: operations["fetchBot"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/{botId}/session/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create bot session */
        post: operations["createBotSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/{botId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update the specified bot */
        post: operations["updateBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new bot */
        post: operations["createBot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bot/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of bots belonging to the current user */
        get: operations["listBots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send and receive a conversation response */
        post: operations["completeConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a conversation */
        post: operations["deleteConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a conversation */
        get: operations["fetchConversation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/{messageId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a message from a conversation */
        post: operations["deleteConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/{messageId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a conversation message */
        get: operations["fetchConversationMessage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/{messageId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a conversation message */
        post: operations["updateConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new message */
        post: operations["createConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/message/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List messages in a conversation */
        get: operations["listConversationMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/receive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Receive a conversation response */
        post: operations["receiveConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a message to a conversation */
        post: operations["sendConversationMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/session/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new session
         * @description Conversation tokens allow client-side applications to create a unique, authenticated credential for each conversation. This token can be used to interact with the conversation/{conversationId}/send, conversation/{conversationId}/receive, and conversation/{conversationId}/message/create routes on api.chatbotkit.com. By creating an individual token for each conversation, a client-side application is able to directly access and manipulate the conversation through these routes. Without conversation tokens, a client-side application would need to authenticate and access ChatBotKit conversation routes through a server-side application, which can be more complex and require additional infrastructure. By providing a way for client-side applications to authenticate and access the conversation routes directly, the token route simplifies the process of integrating with api.chatbotkit.com and makes it more convenient for developers to build chatbot applications.
         *
         */
        post: operations["createConversationSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/{conversationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update the specified conversation */
        post: operations["updateConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete the next message in a conversation */
        post: operations["completeConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new conversation */
        post: operations["createConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export conversations */
        get: operations["exportConversations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List conversations */
        get: operations["listConversations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a dataset */
        post: operations["deleteDataset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a dataset */
        get: operations["fetchDataset"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/file/{fileId}/attach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Attach dataset file */
        post: operations["attachDatasetFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/file/{fileId}/detach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Detach dataset file */
        post: operations["detachDatasetFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/file/{fileId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sync dataset file */
        post: operations["syncDatasetFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/file/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of files attached to the dataset */
        get: operations["listDatasetFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/{recordId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a record from a dataset */
        post: operations["deleteDatasetRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/{recordId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a record from a dataset */
        get: operations["fetchDatasetRecord"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/{recordId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a dataset record */
        post: operations["updateDatasetRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new record */
        post: operations["createDatasetRecord"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export dataset records */
        get: operations["exportDatasetRecords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/record/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of records for a dataset */
        get: operations["listDatasetRecords"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search a dataset for records matching a given search query */
        post: operations["searchDataset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/{datasetId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update the specified dataset */
        post: operations["updateDataset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new dataset */
        post: operations["createDataset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dataset/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of datasets belonging to the current user */
        get: operations["listDatasets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a file */
        post: operations["deleteFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download a file */
        get: operations["downloadFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a file */
        get: operations["fetchFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sync file */
        post: operations["syncFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update the specified file */
        post: operations["updateFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{fileId}/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload the specified file */
        post: operations["uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new file */
        post: operations["createFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of files belonging to the current user */
        get: operations["listFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/{sitemapIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Sitemap integration */
        post: operations["deleteSitemapIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/{sitemapIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a sitemapIntegration */
        get: operations["fetchSitemapIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/{sitemapIntegrationId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sync a Sitemap integration */
        post: operations["syncSitemapIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/{sitemapIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a Sitemap integration */
        post: operations["updateSitemapIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new Sitemap integration */
        post: operations["createSitemapIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/sitemap/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Sitemap integrations */
        get: operations["listSitemapIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/{whatsappIntegrationId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete WhatsApp integration */
        post: operations["deleteWhatsAppIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/{whatsappIntegrationId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a whatsappIntegration */
        get: operations["fetchWhatsAppIntegration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/{whatsappIntegrationId}/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Setup a WhatsApp integration */
        post: operations["setupWhatsAppIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/{whatsappIntegrationId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a WhatsApp integration */
        post: operations["updateWhatsAppIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new WhatsApp integration */
        post: operations["createWhatsAppIntegration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/integration/whatsapp/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List WhatsApp integrations */
        get: operations["listWhatsAppIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/magic/{magicId}/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate text (description, records, abilities and more) based on input. */
        post: operations["generateMagic"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a partner user */
        post: operations["deletePartnerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a partner user */
        get: operations["fetchPartnerUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/token/{tokenId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a partner user token */
        post: operations["deletePartnerUserToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/token/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new partner user token */
        post: operations["createPartnerUserToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/token/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List partner user tokens */
        get: operations["listPartnerUserTokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/{userId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a partner user */
        post: operations["updatePartnerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new partner user */
        post: operations["createPartnerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/partner/user/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List partner users */
        get: operations["listPartnerUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/{abilityId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a ability from a skillset */
        post: operations["deleteSkillsetAbility"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/{abilityId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a ability from a skillset */
        get: operations["fetchSkillsetAbility"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/{abilityId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a skillset ability */
        post: operations["updateSkillsetAbility"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new ability */
        post: operations["createSkillsetAbility"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export skillset abilities */
        get: operations["exportSkillsetAbilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/ability/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of abilities for a skillset */
        get: operations["listSkillsetAbilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a skillset */
        post: operations["deleteSkillset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a skillset */
        get: operations["fetchSkillset"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/{skillsetId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update the specified skillset */
        post: operations["updateSkillset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new skillset */
        post: operations["createSkillset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skillset/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of skillsets belonging to the current user */
        get: operations["listSkillsets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/usage/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch usage */
        get: operations["fetchUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Extracted entity from the message */
        Entity: {
            /** @description The entity type */
            type: string;
            /** @description Start offset */
            begin: number;
            /** @description End offset */
            end: number;
            /** @description The text value of the entity */
            text: string;
            replacement?: {
                /** @description Start offset */
                begin: number;
                /** @description End offset */
                end: number;
                /** @description The text value of the replacement */
                text: string;
            };
        };
        /**
         * @description The type of the message
         * @enum {string}
         */
        MessageType: "user" | "bot" | "context" | "instruction" | "backstory";
        /**
         * @description The bot visibility
         * @enum {string}
         */
        BotVisibility: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
        /**
         * @description The dataset visibility
         * @enum {string}
         */
        DatasetVisibility: "private" | "public";
        /**
         * @description The dataset file attachment type
         * @enum {string}
         */
        DatasetFileAttachmentType: "source";
        /**
         * @description The skillset visibility
         * @enum {string}
         */
        SkillsetVisibility: "private" | "public";
        /**
         * @description The file visibility
         * @enum {string}
         */
        FileVisibility: "private" | "public";
        /** @description Usage information */
        Usage: {
            /** @description The tokens used in this exchange */
            token: number;
        };
        /** @description Meta data information */
        Meta: {
            [key: string]: unknown;
        };
        /** @description A bot configuration that can be applied without a dedicated bot instance. */
        BotRef: {
            /** @description The ID of the bot this configuration is using */
            botId?: string;
        };
        /** @description A bot configuration that can be applied without a dedicated bot instance. */
        BotConfig: {
            /** @description The model this configuration is using */
            model?: string;
            /** @description The backstory this configuration is using */
            backstory?: string;
            /** @description The id of the dataset this configuration is using */
            datasetId?: string;
            /** @description The id of the skillset this configuration is using */
            skillsetId?: string;
            /** @description The privacy flag for this configuration */
            privacy?: boolean;
            /** @description The moderation flag for this configuration */
            moderation?: boolean;
        };
        BotRefOrConfig: {
            /** @description The ID of the bot this configuration is using */
            botId?: string;
        } | {
            /** @description The model this configuration is using */
            model?: string;
            /** @description The backstory this configuration is using */
            backstory?: string;
            /** @description The id of the dataset this configuration is using */
            datasetId?: string;
            /** @description The id of the skillset this configuration is using */
            skillsetId?: string;
            /** @description The privacy flag for this configuration */
            privacy?: boolean;
            /** @description The moderation flag for this configuration */
            moderation?: boolean;
        };
        ErrorResponse: {
            /** @description The error message */
            message?: string;
            /** @description The error code */
            code?: string;
        };
    };
    responses: {
        /** @description The request could not be understood or was missing required parameters. */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The error message */
                    message?: string;
                    /** @description The error code */
                    code?: string;
                };
            };
        };
        /** @description The request could not be completed due to a conflict with the current state of the resource. */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The error message */
                    message?: string;
                    /** @description The error code */
                    code?: string;
                };
            };
        };
        /** @description The user is not authorized to access the requested resource */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The error message */
                    message?: string;
                    /** @description The error code */
                    code?: string;
                };
            };
        };
        /** @description The specified resource was not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description The error message */
                    message?: string;
                    /** @description The error code */
                    code?: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    deleteBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The bot was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted bot */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The bot was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the bot */
                        id: string;
                        /** @description The name of the bot */
                        name?: string;
                        /** @description The description of the bot */
                        description?: string;
                        /** @description The backstory for the bot */
                        backstory?: string;
                        /** @description The model used in the bot */
                        model?: string;
                        /** @description The ID of the dataset used in the bot */
                        datasetId?: string;
                        /** @description The ID of the skillset used in the bot */
                        skillsetId?: string;
                        /**
                         * @description The bot visibility
                         * @enum {string}
                         */
                        visibility?: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the bot was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the bot was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createBotSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The maximum amount of time this session will stay open */
                    durationInSeconds?: number;
                    /** @description An array of messages to be included in the conversation */
                    messages?: {
                        /**
                         * @description The type of the message
                         * @enum {string}
                         */
                        type: "user" | "bot" | "context" | "instruction" | "backstory";
                        /** @description The text of the message */
                        text: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description The bot was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the bot */
                        id: string;
                        /** @description The ID of the conversation */
                        conversationId: string;
                        /** @description The token for this conversaion */
                        token: string;
                        /** @description The time the token will expire in milliseconds */
                        expiresAt: number;
                        /** @description An array of messages included in the conversation */
                        messages?: {
                            /**
                             * @description The type of the message
                             * @enum {string}
                             */
                            type: "user" | "bot" | "context" | "instruction" | "backstory";
                            /** @description The text of the message */
                            text: string;
                        }[];
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateBot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                botId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the bot */
                    name?: string;
                    /** @description The description of the bot */
                    description?: string;
                    /** @description The backstory of the bot */
                    backstory?: string;
                    /** @description The model of the bot */
                    model?: string;
                    /** @description The id of the dataset the bot is using */
                    datasetId?: string;
                    /** @description The id of the skillset the bot is using */
                    skillsetId?: string;
                    /**
                     * @description The bot visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The bot was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated bot */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createBot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the bot */
                    name?: string;
                    /** @description The description of the bot */
                    description?: string;
                    /** @description The backstory of the bot */
                    backstory?: string;
                    /** @description The model of the bot */
                    model?: string;
                    /** @description The id of the dataset the bot is using */
                    datasetId?: string;
                    /** @description The id of the skillset the bot is using */
                    skillsetId?: string;
                    /**
                     * @description The bot visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The bot was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created bot */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listBots: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of bots was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of bots */
                        items: {
                            /** @description The ID of the bot */
                            id: string;
                            /** @description The name of the bot */
                            name?: string;
                            /** @description The description of the bot */
                            description?: string;
                            /** @description The backstory of the bot */
                            backstory?: string;
                            /** @description The model of the bot */
                            model?: string;
                            /** @description The id of the dataset the bot is using */
                            datasetId?: string;
                            /** @description The id of the skillset the bot is using */
                            skillsetId?: string;
                            /**
                             * @description The bot visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the bot was created */
                            createdAt: number;
                            /** @description The timestamp when the bot was last updated */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the bot */
                            id: string;
                            /** @description The name of the bot */
                            name?: string;
                            /** @description The description of the bot */
                            description?: string;
                            /** @description The backstory of the bot */
                            backstory?: string;
                            /** @description The model of the bot */
                            model?: string;
                            /** @description The id of the dataset the bot is using */
                            datasetId?: string;
                            /** @description The id of the skillset the bot is using */
                            skillsetId?: string;
                            /**
                             * @description The bot visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public" | "restrictedAccessChat" | "unrestrictedAccessChat";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the bot was created */
                            createdAt: number;
                            /** @description The timestamp when the bot was last updated */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    completeConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The text of the message to send */
                    text: string;
                    /** @description Known entities */
                    entities?: {
                        /** @description The entity type */
                        type: string;
                        /** @description Start offset */
                        begin: number;
                        /** @description End offset */
                        end: number;
                        /** @description The text value of the entity */
                        text: string;
                        replacement?: {
                            /** @description Start offset */
                            begin: number;
                            /** @description End offset */
                            end: number;
                            /** @description The text value of the replacement */
                            text: string;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description The message was received successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created message */
                        id: string;
                        /** @description The text of the message received */
                        text: string;
                        /** @description Usage information */
                        usage: {
                            /** @description The tokens used in this exchange */
                            token: number;
                        };
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "result";
                        data: {
                            /** @description The ID of the created message */
                            id: string;
                            /** @description The text of the message received */
                            text: string;
                            /** @description Usage information */
                            usage: {
                                /** @description The tokens used in this exchange */
                                token: number;
                            };
                        };
                    } | {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "token";
                        /** @description The data for the event */
                        data: {
                            /** @description The token generated */
                            token: string;
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteConversation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The conversation was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted conversation */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchConversation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The conversation was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the conversation */
                        id: string;
                        /** @description The backstory for the conversation */
                        backstory?: string;
                        /** @description The model used in the conversation */
                        model?: string;
                        /** @description The ID of the dataset used in the conversation */
                        datasetId?: string;
                        /** @description The ID of the skillset used in the conversation */
                        skillsetId?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the conversation was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the conversation was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The message was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted message */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The message was fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the fetched message */
                        id: string;
                        /**
                         * @description The type of the message
                         * @enum {string}
                         */
                        type: "user" | "bot" | "context" | "instruction" | "backstory";
                        /** @description The text of the fetched message */
                        text: string;
                        /** @description The date and time when the message was created (in milliseconds) */
                        createdAt: number;
                        /** @description The date and time when the message was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
                messageId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The updated text of the message */
                    text?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The message was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated message */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The type of the message
                     * @enum {string}
                     */
                    type: "user" | "bot" | "context" | "instruction" | "backstory";
                    /** @description The text of the message */
                    text: string;
                    /** @description Known entities */
                    entities?: {
                        /** @description The entity type */
                        type: string;
                        /** @description Start offset */
                        begin: number;
                        /** @description End offset */
                        end: number;
                        /** @description The text value of the entity */
                        text: string;
                        replacement?: {
                            /** @description Start offset */
                            begin: number;
                            /** @description End offset */
                            end: number;
                            /** @description The text value of the replacement */
                            text: string;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description The message was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created message */
                        id: string;
                        /** @description Extracted entities from the message */
                        entities: {
                            /** @description The entity type */
                            type: string;
                            /** @description Start offset */
                            begin: number;
                            /** @description End offset */
                            end: number;
                            /** @description The text value of the entity */
                            text: string;
                            replacement?: {
                                /** @description Start offset */
                                begin: number;
                                /** @description End offset */
                                end: number;
                                /** @description The text value of the replacement */
                                text: string;
                            };
                        }[];
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listConversationMessages: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The messages were listed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of conversation messages */
                        items: {
                            /** @description The ID of the message */
                            id: string;
                            /**
                             * @description The type of the message
                             * @enum {string}
                             */
                            type: "user" | "bot" | "context" | "instruction" | "backstory";
                            /** @description The text of the message */
                            text: string;
                            /** @description The timestamp of when the message was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp of when the message was last updated  (in milliseconds) */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the message */
                            id: string;
                            /**
                             * @description The type of the message
                             * @enum {string}
                             */
                            type: "user" | "bot" | "context" | "instruction" | "backstory";
                            /** @description The text of the message */
                            text: string;
                            /** @description The timestamp of when the message was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp of when the message was last updated  (in milliseconds) */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    receiveConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The message was received successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created message */
                        id: string;
                        /** @description The text of the message received */
                        text: string;
                        /** @description Usage information */
                        usage: {
                            /** @description The tokens used in this exchange */
                            token: number;
                        };
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "result";
                        data: {
                            /** @description The ID of the created message */
                            id: string;
                            /** @description The text of the message received */
                            text: string;
                            /** @description Usage information */
                            usage: {
                                /** @description The tokens used in this exchange */
                                token: number;
                            };
                        };
                    } | {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "token";
                        /** @description The data for the event */
                        data: {
                            /** @description The token generated */
                            token: string;
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    sendConversationMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The text of the message to send */
                    text: string;
                    /** @description Known entities */
                    entities?: {
                        /** @description The entity type */
                        type: string;
                        /** @description Start offset */
                        begin: number;
                        /** @description End offset */
                        end: number;
                        /** @description The text value of the entity */
                        text: string;
                        replacement?: {
                            /** @description Start offset */
                            begin: number;
                            /** @description End offset */
                            end: number;
                            /** @description The text value of the replacement */
                            text: string;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description The message was sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the sent message */
                        id: string;
                        /** @description Extracted entities from the message */
                        entities: {
                            /** @description The entity type */
                            type: string;
                            /** @description Start offset */
                            begin: number;
                            /** @description End offset */
                            end: number;
                            /** @description The text value of the entity */
                            text: string;
                            replacement?: {
                                /** @description Start offset */
                                begin: number;
                                /** @description End offset */
                                end: number;
                                /** @description The text value of the replacement */
                                text: string;
                            };
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "result";
                        data: {
                            /** @description The ID of the sent message */
                            id: string;
                            /** @description Extracted entities from the message */
                            entities: {
                                /** @description The entity type */
                                type: string;
                                /** @description Start offset */
                                begin: number;
                                /** @description End offset */
                                end: number;
                                /** @description The text value of the entity */
                                text: string;
                                replacement?: {
                                    /** @description Start offset */
                                    begin: number;
                                    /** @description End offset */
                                    end: number;
                                    /** @description The text value of the replacement */
                                    text: string;
                                };
                            }[];
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createConversationSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The maximum amount of time this session will stay open */
                    durationInSeconds?: number;
                };
            };
        };
        responses: {
            /** @description The session was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the conversation */
                        id: string;
                        /** @description The token for this conversation */
                        token: string;
                        /** @description The time the token will expire in milliseconds */
                        expiresAt: number;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateConversation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The conversation was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated conversation */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    completeConversation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The model to use for the conversation */
                    model?: string;
                    /** @description An array of messages to be added to the conversation */
                    messages: {
                        /**
                         * @description The type of the message
                         * @enum {string}
                         */
                        type: "user" | "bot" | "context" | "instruction" | "backstory";
                        /** @description The text of the message */
                        text: string;
                    }[];
                    /** @description The id of the dataset to use */
                    datasetId?: string;
                    /** @description The id of the skillset to use */
                    skillsetId?: string;
                };
            };
        };
        responses: {
            /** @description The next message in the conversation completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The next bot message */
                        text: string;
                        /** @description Usage information */
                        usage: {
                            /** @description The tokens used in this exchange */
                            token: number;
                        };
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "result";
                        data: {
                            /** @description The next bot message */
                            text: string;
                            /** @description Usage information */
                            usage: {
                                /** @description The tokens used in this exchange */
                                token: number;
                            };
                        };
                    } | {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "token";
                        /** @description The data for the event */
                        data: {
                            /** @description The token generated */
                            token: string;
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createConversation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The bot id assigned to this conversation */
                    botId?: string;
                    /** @description The backstory for the conversation */
                    backstory?: string;
                    /** @description The model to use for the conversation */
                    model?: string;
                    /** @description The ID of the dataset to use for the conversation */
                    datasetId?: string;
                    /** @description The ID of the skillset to use for the conversation */
                    skillsetId?: string;
                    /** @description Turn conversation privacy features on */
                    privacy?: boolean;
                    /** @description Turn conversation moderation features on */
                    moderation?: boolean;
                    /** @description An array of messages to be added to the conversation */
                    messages?: {
                        /**
                         * @description The type of the message
                         * @enum {string}
                         */
                        type: "user" | "bot" | "context" | "instruction" | "backstory";
                        /** @description The text of the message */
                        text: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description The conversation was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created conversation */
                        id: string;
                        /** @description An array of messages included in the conversation */
                        messages?: {
                            /**
                             * @description The type of the message
                             * @enum {string}
                             */
                            type: "user" | "bot" | "context" | "instruction" | "backstory";
                            /** @description The text of the message */
                            text: string;
                        }[];
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    exportConversations: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The export of conversations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The ID of the conversation */
                            id: string;
                            /** @description The bot id assigned to this conversation */
                            botId?: string;
                            /** @description The backstory for the conversation */
                            backstory?: string;
                            /** @description The model used in the conversation */
                            model?: string;
                            /** @description The ID of the dataset used in the conversation */
                            datasetId?: string;
                            /** @description The ID of the skillset used in the conversation */
                            skillsetId?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the conversation was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the conversation was last updated (in milliseconds) */
                            updatedAt: number;
                            /** @description The messages associated with this conversation */
                            messages?: {
                                /** @description The ID of the message */
                                id: string;
                                /**
                                 * @description The type of the message
                                 * @enum {string}
                                 */
                                type: "user" | "bot" | "context" | "instruction" | "backstory";
                                /** @description The text of the message */
                                text: string;
                                /** @description The timestamp of when the message was created (in milliseconds) */
                                createdAt: number;
                                /** @description The timestamp of when the message was last updated  (in milliseconds) */
                                updatedAt: number;
                            }[];
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the conversation */
                            id: string;
                            /** @description The bot id assigned to this conversation */
                            botId?: string;
                            /** @description The backstory for the conversation */
                            backstory?: string;
                            /** @description The model used in the conversation */
                            model?: string;
                            /** @description The ID of the dataset used in the conversation */
                            datasetId?: string;
                            /** @description The ID of the skillset used in the conversation */
                            skillsetId?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the conversation was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the conversation was last updated (in milliseconds) */
                            updatedAt: number;
                            /** @description The messages associated with this conversation */
                            messages?: {
                                /** @description The ID of the message */
                                id: string;
                                /**
                                 * @description The type of the message
                                 * @enum {string}
                                 */
                                type: "user" | "bot" | "context" | "instruction" | "backstory";
                                /** @description The text of the message */
                                text: string;
                                /** @description The timestamp of when the message was created (in milliseconds) */
                                createdAt: number;
                                /** @description The timestamp of when the message was last updated  (in milliseconds) */
                                updatedAt: number;
                            }[];
                        };
                    };
                    "text/csv": string;
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listConversations: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of conversations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The ID of the conversation */
                            id: string;
                            /** @description The bot id assigned to this conversation */
                            botId?: string;
                            /** @description The backstory for the conversation */
                            backstory?: string;
                            /** @description The model used in the conversation */
                            model?: string;
                            /** @description The ID of the dataset used in the conversation */
                            datasetId?: string;
                            /** @description The ID of the skillset used in the conversation */
                            skillsetId?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the conversation was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the conversation was last updated (in milliseconds) */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the conversation */
                            id: string;
                            /** @description The bot id assigned to this conversation */
                            botId?: string;
                            /** @description The backstory for the conversation */
                            backstory?: string;
                            /** @description The model used in the conversation */
                            model?: string;
                            /** @description The ID of the dataset used in the conversation */
                            datasetId?: string;
                            /** @description The ID of the skillset used in the conversation */
                            skillsetId?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the conversation was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the conversation was last updated (in milliseconds) */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The dataset was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted dataset */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The dataset was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset */
                        id: string;
                        /** @description The name of the dataset */
                        name?: string;
                        /** @description The description of the dataset */
                        description?: string;
                        /** @description The store for the dataset */
                        store: string;
                        /** @description The total number of tokens for each record */
                        recordMaxTokens?: number;
                        /** @description The total number of records to return during search */
                        searchMaxRecords?: number;
                        /** @description The total number of tokens to use during search */
                        searchMaxTokens?: number;
                        /** @description An instruction to include before found records */
                        matchInstruction?: string;
                        /** @description An instruction to include if no records where found */
                        mismatchInstruction?: string;
                        /**
                         * @description The dataset visibility
                         * @enum {string}
                         */
                        visibility: "private" | "public";
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the dataset was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the dataset was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    attachDatasetFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The dataset file attachment type
                     * @enum {string}
                     */
                    type?: "source";
                };
            };
        };
        responses: {
            /** @description The dataset file that was attached successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset file */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    detachDatasetFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The dataset file that was detached successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset file */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    syncDatasetFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The dataset file that was synced successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset file */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listDatasetFiles: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of files was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of files */
                        items: {
                            /** @description The ID of the file */
                            id: string;
                            /** @description The name of the file */
                            name?: string;
                            /** @description The description of the file */
                            description?: string;
                            /**
                             * @description The file visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the file was created */
                            createdAt: number;
                            /** @description The timestamp when the file was last updated */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the file */
                            id: string;
                            /** @description The name of the file */
                            name?: string;
                            /** @description The description of the file */
                            description?: string;
                            /**
                             * @description The file visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the file was created */
                            createdAt: number;
                            /** @description The timestamp when the file was last updated */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteDatasetRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                recordId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The record was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted record */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchDatasetRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                recordId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The dataset was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset record */
                        id: string;
                        /** @description The text of the dataset record */
                        text: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the dataset record was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the dataset record was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateDatasetRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
                recordId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The text to update the record with */
                    text?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The record was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated record */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createDatasetRecord: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The text of the record */
                    text: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The record was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created record */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    exportDatasetRecords: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The export of dataset records was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            id: string;
                            text: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            id: string;
                            text: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        };
                    };
                    "text/csv": string;
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listDatasetRecords: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of records was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            id: string;
                            text: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            id: string;
                            text: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    searchDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The search query to use for the search */
                    search: string;
                };
            };
        };
        responses: {
            /** @description The search was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the dataset that was searched */
                        id: string;
                        /** @description An array of records matching the search query */
                        records: {
                            id: string;
                            text: string;
                        }[];
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateDataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                datasetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The new name for the dataset */
                    name?: string;
                    /** @description The new description for the dataset */
                    description?: string;
                    /** @description The total number of tokens to for each record */
                    recordMaxTokens?: number;
                    /** @description The total number of records to return during search */
                    searchMaxRecords?: number;
                    /** @description The total number of tokens to use during search */
                    searchMaxTokens?: number;
                    /** @description An instruction to include before found records */
                    matchInstruction?: string;
                    /** @description An instruction to include if no records where found */
                    mismatchInstruction?: string;
                    /**
                     * @description The dataset visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The dataset was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated dataset */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createDataset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the dataset */
                    name?: string;
                    /** @description A description of the dataset */
                    description?: string;
                    /** @description The storage class for this dataset */
                    store?: string;
                    /** @description The total number of tokens for each record */
                    recordMaxTokens?: number;
                    /** @description The total number of records to return during search */
                    searchMaxRecords?: number;
                    /** @description The total number of tokens to use during search */
                    searchMaxTokens?: number;
                    /** @description An instruction to include before found records */
                    matchInstruction?: string;
                    /** @description An instruction to include if no records where found */
                    mismatchInstruction?: string;
                    /**
                     * @description The dataset visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The dataset was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created dataset */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listDatasets: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of datasets was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of datasets */
                        items: {
                            /** @description The ID of the dataset */
                            id: string;
                            /** @description The name of the dataset */
                            name?: string;
                            /** @description The description of the dataset */
                            description?: string;
                            /** @description The store for the dataset */
                            store: string;
                            /**
                             * @description The dataset visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the dataset was created */
                            createdAt: number;
                            /** @description The timestamp when the dataset was last updated */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the dataset */
                            id: string;
                            /** @description The name of the dataset */
                            name?: string;
                            /** @description The description of the dataset */
                            description?: string;
                            /** @description The store for the dataset */
                            store: string;
                            /**
                             * @description The dataset visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the dataset was created */
                            createdAt: number;
                            /** @description The timestamp when the dataset was last updated */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The file was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted file */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    downloadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The file was downloaded successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The file was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the file */
                        id: string;
                        /** @description The name of the file */
                        name?: string;
                        /** @description The description of the file */
                        description?: string;
                        /**
                         * @description The file visibility
                         * @enum {string}
                         */
                        visibility: "private" | "public";
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the file was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the file was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    syncFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The file was synced successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the file */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The new name for the file */
                    name?: string;
                    /** @description The new description for the file */
                    description?: string;
                    /**
                     * @description The file visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The file was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated file */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description The file to upload
                     */
                    file: string;
                };
            };
        };
        responses: {
            /** @description The file was uploadd successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the uploadd file */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the file */
                    name?: string;
                    /** @description A description of the file */
                    description?: string;
                    /**
                     * @description The file visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The file was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created file */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listFiles: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of files was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of files */
                        items: {
                            /** @description The ID of the file */
                            id: string;
                            /** @description The name of the file */
                            name?: string;
                            /** @description The description of the file */
                            description?: string;
                            /**
                             * @description The file visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the file was created */
                            createdAt: number;
                            /** @description The timestamp when the file was last updated */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the file */
                            id: string;
                            /** @description The name of the file */
                            name?: string;
                            /** @description The description of the file */
                            description?: string;
                            /**
                             * @description The file visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the file was created */
                            createdAt: number;
                            /** @description The timestamp when the file was last updated */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteSitemapIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sitemapIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Sitemap integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted Sitemap integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchSitemapIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sitemapIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Sitemap integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Sitemap integration */
                        id: string;
                        /** @description The name of the Sitemap integration */
                        name?: string;
                        /** @description The description of the Sitemap integration */
                        description?: string;
                        /** @description The ID of the dataset used in the Sitemap integration */
                        datasetId?: string;
                        /** @description The URL to use for this Sitemap integration */
                        url?: string;
                        /** @description The glob rules to use for this Sitemap integration */
                        glob?: string;
                        /** @description The selector rules to use for this Sitemap integration */
                        selectors?: string;
                        /** @description Indicates if the Sitemap integration should use JavaScript during the spidering process */
                        javascript?: boolean;
                        /** @description The sync schedule to use for this Sitemap integration */
                        syncSchedule?: string;
                        /** @description Record expiry in milliseconds */
                        expiresIn?: number;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the Sitemap integration was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the Sitemap integration was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    syncSitemapIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sitemapIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The Sitemap integration was scheduled for syncing successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Sitemap Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateSitemapIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sitemapIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name for this Sitemap integration */
                    name?: string;
                    /** @description The description for this Sitemap integration */
                    description?: string;
                    /** @description The ID of the dataset to use for this Sitemap integration */
                    datasetId?: string;
                    /** @description The URL to use for this Sitemap integration */
                    url?: string;
                    /** @description The glob rules to use for this Sitemap integration */
                    glob?: string;
                    /** @description The selector rules to use for this Sitemap integration */
                    selectors?: string;
                    /** @description Indicates if the Sitemap integration should use JavaScript during the spidering process */
                    javascript?: boolean;
                    /** @description The sync schedule to use for this Sitemap integration */
                    syncSchedule?: string;
                    /** @description Record expiry in milliseconds */
                    expiresIn?: number;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The Sitemap integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Sitemap Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createSitemapIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name for this Sitemap integration */
                    name?: string;
                    /** @description The description for this Sitemap integration */
                    description?: string;
                    /** @description The ID of the dataset to use for this Sitemap integration */
                    datasetId: string;
                    /** @description The URL to use for this Sitemap integration */
                    url?: string;
                    /** @description The glob rules to use for this Sitemap integration */
                    glob?: string;
                    /** @description The selector rules to use for this Sitemap integration */
                    selectors?: string;
                    /** @description Indicates if the Sitemap integration should use JavaScript during the spidering process */
                    javascript?: boolean;
                    /** @description The sync schedule to use for this Sitemap integration */
                    syncSchedule?: string;
                    /** @description Record expiry in milliseconds */
                    expiresIn?: number;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The Sitemap integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the Sitemap Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listSitemapIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of Sitemap integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The ID of the Sitemap integration */
                            id: string;
                            /** @description The name of the Sitemap integration */
                            name?: string;
                            /** @description The description of the Sitemap integration */
                            description?: string;
                            /** @description The ID of the dataset used by the Sitemap integration */
                            datasetId?: string;
                            /** @description The sync schedule to use for this Sitemap integration */
                            syncSchedule: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the Sitemap integration was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the Sitemap integration was last updated (in milliseconds) */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the Sitemap integration */
                            id: string;
                            /** @description The name of the Sitemap integration */
                            name?: string;
                            /** @description The description of the Sitemap integration */
                            description?: string;
                            /** @description The ID of the dataset used by the Sitemap integration */
                            datasetId?: string;
                            /** @description The sync schedule to use for this Sitemap integration */
                            syncSchedule: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the Sitemap integration was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the Sitemap integration was last updated (in milliseconds) */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteWhatsAppIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                whatsappIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The WhatsApp integration was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted WhatsApp integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchWhatsAppIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                whatsappIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The WhatsApp integration was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the WhatsApp integration */
                        id: string;
                        /** @description The name of the WhatsApp integration */
                        name?: string;
                        /** @description The description of the WhatsApp integration */
                        description?: string;
                        /** @description The WhatsApp integration phone number ID */
                        phoneNumberId?: string;
                        /** @description The WhatsApp integration access token */
                        accessToken?: string;
                        /** @description The session duration (in milliseconds) */
                        sessionDuration?: number;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the Sitemap integration was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the Sitemap integration was last updated (in milliseconds) */
                        updatedAt: number;
                    } & ({
                        /** @description The ID of the bot this configuration is using */
                        botId?: string;
                    } | {
                        /** @description The model this configuration is using */
                        model?: string;
                        /** @description The backstory this configuration is using */
                        backstory?: string;
                        /** @description The id of the dataset this configuration is using */
                        datasetId?: string;
                        /** @description The id of the skillset this configuration is using */
                        skillsetId?: string;
                        /** @description The privacy flag for this configuration */
                        privacy?: boolean;
                        /** @description The moderation flag for this configuration */
                        moderation?: boolean;
                    });
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    setupWhatsAppIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                whatsappIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The WhatsApp integration was successfully setup */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the WhatsApp Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateWhatsAppIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                whatsappIntegrationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name for this WhatsApp integration */
                    name?: string;
                    /** @description The description for this WhatsApp integration */
                    description?: string;
                    /** @description The WhatsApp integration phone number ID */
                    phoneNumberId?: string;
                    /** @description The WhatsApp integration access token */
                    accessToken?: string;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /** @description The model this configuration is using */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The WhatsApp integration was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the WhatsApp Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createWhatsAppIntegration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name for this WhatsApp integration */
                    name?: string;
                    /** @description The description for this WhatsApp integration */
                    description?: string;
                    /** @description The WhatsApp integration phone number ID */
                    phoneNumberId?: string;
                    /** @description The WhatsApp integration access token */
                    accessToken?: string;
                    /** @description The session duration (in milliseconds) */
                    sessionDuration?: number;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                } & ({
                    /** @description The ID of the bot this configuration is using */
                    botId?: string;
                } | {
                    /** @description The model this configuration is using */
                    model?: string;
                    /** @description The backstory this configuration is using */
                    backstory?: string;
                    /** @description The id of the dataset this configuration is using */
                    datasetId?: string;
                    /** @description The id of the skillset this configuration is using */
                    skillsetId?: string;
                    /** @description The privacy flag for this configuration */
                    privacy?: boolean;
                    /** @description The moderation flag for this configuration */
                    moderation?: boolean;
                });
            };
        };
        responses: {
            /** @description The WhatsApp integration was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the WhatsApp Integration */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listWhatsAppIntegrations: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of WhatsApp integrations was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            /** @description The ID of the WhatsApp integration */
                            id: string;
                            /** @description The name of the WhatsApp integration */
                            name?: string;
                            /** @description The description of the WhatsApp integration */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the WhatsApp integration was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the WhatsApp integration was last updated (in milliseconds) */
                            updatedAt: number;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /** @description The model this configuration is using */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        }))[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the WhatsApp integration */
                            id: string;
                            /** @description The name of the WhatsApp integration */
                            name?: string;
                            /** @description The description of the WhatsApp integration */
                            description?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the WhatsApp integration was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the WhatsApp integration was last updated (in milliseconds) */
                            updatedAt: number;
                        } & ({
                            /** @description The ID of the bot this configuration is using */
                            botId?: string;
                        } | {
                            /** @description The model this configuration is using */
                            model?: string;
                            /** @description The backstory this configuration is using */
                            backstory?: string;
                            /** @description The id of the dataset this configuration is using */
                            datasetId?: string;
                            /** @description The id of the skillset this configuration is using */
                            skillsetId?: string;
                            /** @description The privacy flag for this configuration */
                            privacy?: boolean;
                            /** @description The moderation flag for this configuration */
                            moderation?: boolean;
                        });
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    generateMagic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The text to use as input */
                    text: string;
                };
            };
        };
        responses: {
            /** @description The next message in the conversation completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The input text */
                        text: string;
                        /** @description Usage information */
                        usage: {
                            /** @description The tokens used in this exchange */
                            token: number;
                        };
                    };
                    "application/jsonl": {
                        /**
                         * @description The generated text
                         * @enum {string}
                         */
                        type: "result";
                        data: {
                            /** @description The input text */
                            text: string;
                            /** @description Usage information */
                            usage: {
                                /** @description The tokens used in this exchange */
                                token: number;
                            };
                        };
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deletePartnerUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The user was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted user */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchPartnerUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The partner user was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the partner user */
                        id: string;
                        /** @description The name of the partner user */
                        name?: string;
                        /** @description The image of the partner user */
                        image?: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the partner user was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the partner user was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deletePartnerUserToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
                tokenId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The user token was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted user token */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createPartnerUserToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The user token was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created user token */
                        id: string;
                        /** @description The token of the created user token */
                        token: string;
                        /** @description The timestamp for when the user token was created (in milliseconds) */
                        createdAt: number;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listPartnerUserTokens: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of user tokens was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The ID of the user */
                            id: string;
                            /** @description The timestamp for when the user token was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the user token was updated (in milliseconds) */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the user */
                            id: string;
                            /** @description The timestamp for when the user token was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the user token was updated (in milliseconds) */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updatePartnerUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the partner user */
                    name?: string;
                    /** @description The image of the partner user */
                    image?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The message was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated partner user */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createPartnerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the partner user */
                    name?: string;
                    /** @description The image of the partner user */
                    image?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The user was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created user */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listPartnerUsers: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of users was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            /** @description The ID of the user */
                            id: string;
                            /** @description The name of the user */
                            name?: string;
                            /** @description The image of the user */
                            image?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the user was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the user was last updated (in milliseconds) */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the user */
                            id: string;
                            /** @description The name of the user */
                            name?: string;
                            /** @description The image of the user */
                            image?: string;
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp for when the user was created (in milliseconds) */
                            createdAt: number;
                            /** @description The timestamp for when the user was last updated (in milliseconds) */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteSkillsetAbility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
                abilityId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The ability was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted ability */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchSkillsetAbility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
                abilityId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The skillset was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the skillset ability */
                        id: string;
                        /** @description The name of the skillset ability */
                        name: string;
                        /** @description The description of the skillset ability */
                        description: string;
                        /** @description The instruction of the skillset ability */
                        instruction: string;
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the skillset ability was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the skillset ability was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateSkillsetAbility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
                abilityId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the ability */
                    name?: string;
                    /** @description The description for the ability */
                    description?: string;
                    /** @description The text to update the ability with */
                    instruction?: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The ability was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated ability */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createSkillsetAbility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the ability */
                    name: string;
                    /** @description The description for the ability */
                    description: string;
                    /** @description The instruction of the ability */
                    instruction: string;
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The ability was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created ability */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    exportSkillsetAbilities: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The export of skillset abilities was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            id: string;
                            name: string;
                            description: string;
                            instruction: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            id: string;
                            name: string;
                            description: string;
                            instruction: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        };
                    };
                    "text/csv": string;
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listSkillsetAbilities: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of abilities was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: {
                            id: string;
                            name: string;
                            description: string;
                            instruction: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            id: string;
                            name: string;
                            description: string;
                            instruction: string;
                            meta?: Record<string, never>;
                            createdAt: number;
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    deleteSkillset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description The skillset was deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the deleted skillset */
                        id: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchSkillset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The skillset was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the skillset */
                        id: string;
                        /** @description The name of the skillset */
                        name?: string;
                        /** @description The description of the skillset */
                        description?: string;
                        /**
                         * @description The skillset visibility
                         * @enum {string}
                         */
                        visibility?: "private" | "public";
                        /** @description Meta data information */
                        meta?: {
                            [key: string]: unknown;
                        };
                        /** @description The timestamp for when the skillset was created (in milliseconds) */
                        createdAt: number;
                        /** @description The timestamp for when the skillset was last updated (in milliseconds) */
                        updatedAt: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    updateSkillset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                skillsetId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The new name for the skillset */
                    name?: string;
                    /** @description The new description for the skillset */
                    description?: string;
                    /**
                     * @description The skillset visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The skillset was updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the updated skillset */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The specified resource was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    createSkillset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the skillset */
                    name?: string;
                    /** @description A description of the skillset */
                    description?: string;
                    /**
                     * @description The skillset visibility
                     * @enum {string}
                     */
                    visibility?: "private" | "public";
                    /** @description Meta data information */
                    meta?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description The skillset was created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The ID of the created skillset */
                        id: string;
                    };
                };
            };
            /** @description The request could not be understood or was missing required parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
            /** @description The request could not be completed due to a conflict with the current state of the resource. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    listSkillsets: {
        parameters: {
            query?: {
                cursor?: string;
                take?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of skillsets was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description An array of skillsets */
                        items: {
                            /** @description The ID of the skillset */
                            id: string;
                            /** @description The name of the skillset */
                            name?: string;
                            /** @description The description of the skillset */
                            description?: string;
                            /**
                             * @description The skillset visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the skillset was created */
                            createdAt: number;
                            /** @description The timestamp when the skillset was last updated */
                            updatedAt: number;
                        }[];
                    };
                    "application/jsonl": {
                        /**
                         * @description The type of event
                         * @enum {string}
                         */
                        type: "item";
                        data: {
                            /** @description The ID of the skillset */
                            id: string;
                            /** @description The name of the skillset */
                            name?: string;
                            /** @description The description of the skillset */
                            description?: string;
                            /**
                             * @description The skillset visibility
                             * @enum {string}
                             */
                            visibility: "private" | "public";
                            /** @description Meta data information */
                            meta?: {
                                [key: string]: unknown;
                            };
                            /** @description The timestamp when the skillset was created */
                            createdAt: number;
                            /** @description The timestamp when the skillset was last updated */
                            updatedAt: number;
                        };
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
    fetchUsage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The usage information was retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The number of tokens the user has used */
                        tokens: number;
                        /** @description The number of conversations the user has created */
                        conversations: number;
                    };
                };
            };
            /** @description The user is not authorized to access the requested resource */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The error message */
                        message?: string;
                        /** @description The error code */
                        code?: string;
                    };
                };
            };
        };
    };
}
