{
  "openapi": "3.0.0",
  "info": {
    "title": "ChatBotKit API",
    "version": "v1 (build 1740255818992)"
  },
  "servers": [
    {
      "url": "https://api.chatbotkit.com/v1"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Message": {
        "type": "object",
        "description": "A message in the conversation",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the message",
            "enum": [
              "user",
              "bot",
              "context",
              "instruction",
              "backstory",
              "activity"
            ],
            "$$ref": "#/components/schemas/MessageType"
          },
          "text": {
            "type": "string",
            "description": "The text of the message"
          },
          "meta": {
            "type": "object",
            "description": "Meta data information",
            "additionalProperties": true,
            "$$ref": "#/components/schemas/Meta"
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "Entity": {
        "type": "object",
        "description": "Extracted entity from the message",
        "properties": {
          "type": {
            "type": "string",
            "description": "The entity type"
          },
          "begin": {
            "type": "number",
            "description": "Start offset"
          },
          "end": {
            "type": "number",
            "description": "End offset"
          },
          "text": {
            "type": "string",
            "description": "The text value of the entity"
          },
          "replacement": {
            "type": "object",
            "properties": {
              "begin": {
                "type": "number",
                "description": "Start offset"
              },
              "end": {
                "type": "number",
                "description": "End offset"
              },
              "text": {
                "type": "string",
                "description": "The text value of the replacement"
              }
            },
            "required": [
              "begin",
              "end",
              "text"
            ]
          }
        },
        "required": [
          "type",
          "begin",
          "end",
          "text"
        ]
      },
      "MessageType": {
        "type": "string",
        "description": "The type of the message",
        "enum": [
          "user",
          "bot",
          "context",
          "instruction",
          "backstory",
          "activity"
        ]
      },
      "Schedule": {
        "type": "string",
        "description": "The schedule",
        "enum": [
          "never",
          "quarterhourly",
          "halfhourly",
          "hourly",
          "daily",
          "weekly",
          "monthly"
        ]
      },
      "BotVisibility": {
        "type": "string",
        "description": "The bot visibility",
        "enum": [
          "private",
          "protected",
          "public"
        ]
      },
      "DatasetVisibility": {
        "type": "string",
        "description": "The dataset visibility",
        "enum": [
          "private",
          "protected",
          "public"
        ]
      },
      "DatasetFileAttachmentType": {
        "type": "string",
        "description": "The dataset file attachment type",
        "enum": [
          "source"
        ]
      },
      "DatasetFilter": {
        "type": "object",
        "additionalProperties": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "object",
              "properties": {
                "$eq": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                }
              },
              "required": [
                "$eq"
              ],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$ne": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                }
              },
              "required": [
                "$ne"
              ],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$gt": {
                  "type": "number"
                }
              },
              "required": [
                "$gt"
              ],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$gte": {
                  "type": "number"
                }
              },
              "required": [
                "$gte"
              ],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$lt": {
                  "type": "number"
                }
              },
              "required": [
                "$lt"
              ],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "$lte": {
                  "type": "number"
                }
              },
              "required": [
                "$lte"
              ],
              "additionalProperties": false
            }
          ]
        }
      },
      "SkillsetVisibility": {
        "type": "string",
        "description": "The skillset visibility",
        "enum": [
          "private",
          "protected",
          "public"
        ]
      },
      "FileVisibility": {
        "type": "string",
        "description": "The file visibility",
        "enum": [
          "private",
          "protected",
          "public"
        ]
      },
      "SecretKind": {
        "type": "string",
        "description": "The kind of the secret",
        "enum": [
          "shared",
          "personal"
        ]
      },
      "SecretType": {
        "type": "string",
        "description": "The type of the secret",
        "enum": [
          "plain",
          "basic",
          "bearer",
          "oauth",
          "template"
        ]
      },
      "SecretVisibility": {
        "type": "string",
        "description": "The visibility of the secret",
        "enum": [
          "private",
          "protected",
          "public"
        ]
      },
      "Usage": {
        "type": "object",
        "description": "Usage information",
        "properties": {
          "token": {
            "type": "number",
            "description": "The tokens used in this exchange"
          }
        },
        "required": [
          "token"
        ]
      },
      "Meta": {
        "type": "object",
        "description": "Meta data information",
        "additionalProperties": true
      },
      "Model": {
        "type": "string",
        "description": "A model definition",
        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
        "example": "gpt-4-turbo/temperature=0.7"
      },
      "BotRef": {
        "type": "object",
        "description": "A bot configuration that can be applied without a dedicated bot instance.",
        "properties": {
          "botId": {
            "type": "string",
            "description": "The ID of the bot this configuration is using"
          }
        }
      },
      "BotConfig": {
        "type": "object",
        "description": "A bot configuration that can be applied without a dedicated bot instance.",
        "properties": {
          "model": {
            "type": "string",
            "description": "A model definition",
            "pattern": "\\w+(?:\\/\\w+=\\w+)*",
            "example": "gpt-4-turbo/temperature=0.7",
            "$$ref": "#/components/schemas/Model"
          },
          "backstory": {
            "type": "string",
            "description": "The backstory this configuration is using"
          },
          "datasetId": {
            "type": "string",
            "description": "The id of the dataset this configuration is using"
          },
          "skillsetId": {
            "type": "string",
            "description": "The id of the skillset this configuration is using"
          },
          "privacy": {
            "type": "boolean",
            "description": "The privacy flag for this configuration"
          },
          "moderation": {
            "type": "boolean",
            "description": "The moderation flag for this configuration"
          }
        }
      },
      "BotRefOrConfig": {
        "description": "A bot configuration or reference",
        "oneOf": [
          {
            "type": "object",
            "description": "A bot configuration that can be applied without a dedicated bot instance.",
            "properties": {
              "botId": {
                "type": "string",
                "description": "The ID of the bot this configuration is using"
              }
            },
            "$$ref": "#/components/schemas/BotRef"
          },
          {
            "type": "object",
            "description": "A bot configuration that can be applied without a dedicated bot instance.",
            "properties": {
              "model": {
                "type": "string",
                "description": "A model definition",
                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                "example": "gpt-4-turbo/temperature=0.7",
                "$$ref": "#/components/schemas/Model"
              },
              "backstory": {
                "type": "string",
                "description": "The backstory this configuration is using"
              },
              "datasetId": {
                "type": "string",
                "description": "The id of the dataset this configuration is using"
              },
              "skillsetId": {
                "type": "string",
                "description": "The id of the skillset this configuration is using"
              },
              "privacy": {
                "type": "boolean",
                "description": "The privacy flag for this configuration"
              },
              "moderation": {
                "type": "boolean",
                "description": "The moderation flag for this configuration"
              }
            },
            "$$ref": "#/components/schemas/BotConfig"
          }
        ]
      },
      "InstanceCrudProps": {
        "type": "object",
        "description": "Instance crud properties",
        "properties": {
          "name": {
            "type": "string",
            "description": "The associated name"
          },
          "description": {
            "type": "string",
            "description": "The associated description"
          },
          "meta": {
            "type": "object",
            "description": "Meta data information",
            "additionalProperties": true,
            "$$ref": "#/components/schemas/Meta"
          }
        }
      },
      "InstanceListProps": {
        "type": "object",
        "description": "Instance list properties",
        "properties": {
          "name": {
            "type": "string",
            "description": "The associated name"
          },
          "description": {
            "type": "string",
            "description": "The associated description"
          },
          "meta": {
            "type": "object",
            "description": "Meta data information",
            "additionalProperties": true,
            "$$ref": "#/components/schemas/Meta"
          },
          "id": {
            "type": "string",
            "description": "The instance ID"
          },
          "createdAt": {
            "type": "number",
            "description": "The timestamp (ms) when the instance was created"
          },
          "updatedAt": {
            "type": "number",
            "description": "The timestamp (ms) when the instance was updated"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      }
    },
    "responses": {
      "ErrorResponse": {
        "description": "An error response",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/blueprint/{blueprintId}/clone": {
      "post": {
        "operationId": "cloneBlueprint",
        "summary": "Clone a blueprint",
        "tags": [
          "Blueprint"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "blueprintId",
            "required": true,
            "schema": {
              "description": "The ID of the blueprint to clone",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The blueprint was cloned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the cloned blueprint",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "cloneBlueprint",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/blueprint/{blueprintId}/delete": {
      "post": {
        "operationId": "deleteBlueprint",
        "summary": "Delete a blueprint",
        "tags": [
          "Blueprint"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "blueprintId",
            "required": true,
            "schema": {
              "description": "The ID of the blueprint to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The blueprint was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted blueprint",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteBlueprint",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/blueprint/{blueprintId}/fetch": {
      "get": {
        "operationId": "fetchBlueprint",
        "summary": "Fetch a blueprint",
        "tags": [
          "Blueprint"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "blueprintId",
            "required": true,
            "schema": {
              "description": "The ID of the blueprint to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The blueprint was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchBlueprint",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/blueprint/{blueprintId}/update": {
      "post": {
        "operationId": "updateBlueprint",
        "summary": "Update blueprint",
        "tags": [
          "Blueprint"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "blueprintId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The blueprint was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated blueprint",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateBlueprint",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/blueprint/create": {
      "post": {
        "operationId": "createBlueprint",
        "summary": "Create blueprint",
        "tags": [
          "Blueprint"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The blueprint was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created blueprint",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createBlueprint",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/blueprint/list": {
      "get": {
        "operationId": "listBlueprints",
        "summary": "Retrieve a list of blueprints",
        "tags": [
          "Blueprint"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of blueprints was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            }
                          },
                          "$$ref": "#/paths/~1blueprint~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listBlueprints",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/bot/{botId}/delete": {
      "post": {
        "operationId": "deleteBot",
        "summary": "Delete a bot",
        "tags": [
          "Bot"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "botId",
            "required": true,
            "schema": {
              "description": "The ID of the bot to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The bot was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted bot",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteBot",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/bot/{botId}/downvote": {
      "post": {
        "operationId": "downvoteBot",
        "summary": "Downvote a bot",
        "tags": [
          "Bot"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "botId",
            "required": true,
            "schema": {
              "description": "The ID of the bot",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The value of the downvote",
                    "type": "integer",
                    "minimum": -100,
                    "maximum": -1,
                    "default": -100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was downvoted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The bot ID of the downvoted bot",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "downvoteBot",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/bot/{botId}/fetch": {
      "get": {
        "operationId": "fetchBot",
        "summary": "Fetch a bot",
        "tags": [
          "Bot"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "botId",
            "required": true,
            "schema": {
              "description": "The ID of the bot to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The bot was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A bot configuration that can be applied without a dedicated bot instance.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "model": {
                      "type": "string",
                      "description": "A model definition",
                      "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                      "example": "gpt-4-turbo/temperature=0.7",
                      "$$ref": "#/components/schemas/Model"
                    },
                    "backstory": {
                      "type": "string",
                      "description": "The backstory this configuration is using"
                    },
                    "datasetId": {
                      "type": "string",
                      "description": "The id of the dataset this configuration is using"
                    },
                    "skillsetId": {
                      "type": "string",
                      "description": "The id of the skillset this configuration is using"
                    },
                    "privacy": {
                      "type": "boolean",
                      "description": "The privacy flag for this configuration"
                    },
                    "moderation": {
                      "type": "boolean",
                      "description": "The moderation flag for this configuration"
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The bot visibility",
                      "enum": [
                        "private",
                        "protected",
                        "public"
                      ],
                      "$$ref": "#/components/schemas/BotVisibility"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchBot",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/bot/{botId}/session/create": {
      "post": {
        "operationId": "createBotSession",
        "summary": "Create bot session",
        "tags": [
          "Bot Session"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "botId",
            "required": true,
            "schema": {
              "description": "The ID of the bot for this session",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "durationInSeconds": {
                    "description": "The maximum amount of time this session will stay open",
                    "type": "number"
                  },
                  "messages": {
                    "description": "An array of messages to be included in the conversation",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of the message",
                          "enum": [
                            "user",
                            "bot",
                            "context",
                            "instruction",
                            "backstory",
                            "activity"
                          ],
                          "$$ref": "#/components/schemas/MessageType"
                        },
                        "text": {
                          "description": "The text of the message",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "text"
                      ]
                    }
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The bot was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the bot",
                      "type": "string"
                    },
                    "conversationId": {
                      "description": "The ID of the conversation",
                      "type": "string"
                    },
                    "token": {
                      "description": "The token for this conversation",
                      "type": "string"
                    },
                    "expiresAt": {
                      "description": "The time the token will expire in milliseconds",
                      "type": "number"
                    },
                    "messages": {
                      "description": "An array of messages included in the conversation",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of the message",
                            "enum": [
                              "user",
                              "bot",
                              "context",
                              "instruction",
                              "backstory",
                              "activity"
                            ],
                            "$$ref": "#/components/schemas/MessageType"
                          },
                          "text": {
                            "description": "The text of the message",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "text"
                        ]
                      }
                    }
                  },
                  "required": [
                    "id",
                    "conversationId",
                    "token",
                    "expiresAt"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createBotSession",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/bot/{botId}/update": {
      "post": {
        "operationId": "updateBot",
        "summary": "Update bot",
        "tags": [
          "Bot"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "botId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The bot visibility",
                    "enum": [
                      "private",
                      "protected",
                      "public"
                    ],
                    "$$ref": "#/components/schemas/BotVisibility"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The bot was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated bot",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateBot",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/bot/{botId}/upvote": {
      "post": {
        "operationId": "upvoteBot",
        "summary": "Upvote a bot",
        "tags": [
          "Bot"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "botId",
            "required": true,
            "schema": {
              "description": "The ID of the bot",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The value of the upvote",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The bot was upvoted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the upvoted bot",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "upvoteBot",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/bot/create": {
      "post": {
        "operationId": "createBot",
        "summary": "Create bot",
        "tags": [
          "Bot"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration that can be applied without a dedicated bot instance.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "model": {
                    "type": "string",
                    "description": "A model definition",
                    "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                    "example": "gpt-4-turbo/temperature=0.7",
                    "$$ref": "#/components/schemas/Model"
                  },
                  "backstory": {
                    "type": "string",
                    "description": "The backstory this configuration is using"
                  },
                  "datasetId": {
                    "type": "string",
                    "description": "The id of the dataset this configuration is using"
                  },
                  "skillsetId": {
                    "type": "string",
                    "description": "The id of the skillset this configuration is using"
                  },
                  "privacy": {
                    "type": "boolean",
                    "description": "The privacy flag for this configuration"
                  },
                  "moderation": {
                    "type": "boolean",
                    "description": "The moderation flag for this configuration"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The bot visibility",
                    "enum": [
                      "private",
                      "protected",
                      "public"
                    ],
                    "$$ref": "#/components/schemas/BotVisibility"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The bot was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created bot",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createBot",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/bot/list": {
      "get": {
        "operationId": "listBots",
        "summary": "Retrieve a list of bots",
        "tags": [
          "Bot"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of bots was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration that can be applied without a dedicated bot instance.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "model": {
                            "type": "string",
                            "description": "A model definition",
                            "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                            "example": "gpt-4-turbo/temperature=0.7",
                            "$$ref": "#/components/schemas/Model"
                          },
                          "backstory": {
                            "type": "string",
                            "description": "The backstory this configuration is using"
                          },
                          "datasetId": {
                            "type": "string",
                            "description": "The id of the dataset this configuration is using"
                          },
                          "skillsetId": {
                            "type": "string",
                            "description": "The id of the skillset this configuration is using"
                          },
                          "privacy": {
                            "type": "boolean",
                            "description": "The privacy flag for this configuration"
                          },
                          "moderation": {
                            "type": "boolean",
                            "description": "The moderation flag for this configuration"
                          },
                          "visibility": {
                            "type": "string",
                            "description": "The bot visibility",
                            "enum": [
                              "private",
                              "protected",
                              "public"
                            ],
                            "$$ref": "#/components/schemas/BotVisibility"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration that can be applied without a dedicated bot instance.",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "model": {
                              "type": "string",
                              "description": "A model definition",
                              "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                              "example": "gpt-4-turbo/temperature=0.7",
                              "$$ref": "#/components/schemas/Model"
                            },
                            "backstory": {
                              "type": "string",
                              "description": "The backstory this configuration is using"
                            },
                            "datasetId": {
                              "type": "string",
                              "description": "The id of the dataset this configuration is using"
                            },
                            "skillsetId": {
                              "type": "string",
                              "description": "The id of the skillset this configuration is using"
                            },
                            "privacy": {
                              "type": "boolean",
                              "description": "The privacy flag for this configuration"
                            },
                            "moderation": {
                              "type": "boolean",
                              "description": "The moderation flag for this configuration"
                            },
                            "visibility": {
                              "type": "string",
                              "description": "The bot visibility",
                              "enum": [
                                "private",
                                "protected",
                                "public"
                              ],
                              "$$ref": "#/components/schemas/BotVisibility"
                            }
                          },
                          "$$ref": "#/paths/~1bot~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listBots",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/{contactId}/conversation/list": {
      "get": {
        "operationId": "listContactConversations",
        "summary": "List contact conversations",
        "tags": [
          "Contact Conversation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "description": "The ID of the contact to list conversations for",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of conversations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration or reference",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "contactId": {
                            "description": "The contact id assigned to this conversation",
                            "type": "string"
                          },
                          "taskId": {
                            "description": "The task id assigned to this conversation",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ],
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "botId": {
                                "type": "string",
                                "description": "The ID of the bot this configuration is using"
                              }
                            },
                            "$$ref": "#/components/schemas/BotRef"
                          },
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "A model definition",
                                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                "example": "gpt-4-turbo/temperature=0.7",
                                "$$ref": "#/components/schemas/Model"
                              },
                              "backstory": {
                                "type": "string",
                                "description": "The backstory this configuration is using"
                              },
                              "datasetId": {
                                "type": "string",
                                "description": "The id of the dataset this configuration is using"
                              },
                              "skillsetId": {
                                "type": "string",
                                "description": "The id of the skillset this configuration is using"
                              },
                              "privacy": {
                                "type": "boolean",
                                "description": "The privacy flag for this configuration"
                              },
                              "moderation": {
                                "type": "boolean",
                                "description": "The moderation flag for this configuration"
                              }
                            },
                            "$$ref": "#/components/schemas/BotConfig"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration or reference",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "contactId": {
                              "description": "The contact id assigned to this conversation",
                              "type": "string"
                            },
                            "taskId": {
                              "description": "The task id assigned to this conversation",
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1contact~1{contactId}~1conversation~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ],
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "botId": {
                                  "type": "string",
                                  "description": "The ID of the bot this configuration is using"
                                }
                              },
                              "$$ref": "#/components/schemas/BotRef"
                            },
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "description": "A model definition",
                                  "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                  "example": "gpt-4-turbo/temperature=0.7",
                                  "$$ref": "#/components/schemas/Model"
                                },
                                "backstory": {
                                  "type": "string",
                                  "description": "The backstory this configuration is using"
                                },
                                "datasetId": {
                                  "type": "string",
                                  "description": "The id of the dataset this configuration is using"
                                },
                                "skillsetId": {
                                  "type": "string",
                                  "description": "The id of the skillset this configuration is using"
                                },
                                "privacy": {
                                  "type": "boolean",
                                  "description": "The privacy flag for this configuration"
                                },
                                "moderation": {
                                  "type": "boolean",
                                  "description": "The moderation flag for this configuration"
                                }
                              },
                              "$$ref": "#/components/schemas/BotConfig"
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listContactConversations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/{contactId}/delete": {
      "post": {
        "operationId": "deleteContact",
        "summary": "Delete contact",
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "description": "The ID of the contact to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The contact was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted contact",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteContact",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/{contactId}/fetch": {
      "get": {
        "operationId": "fetchContact",
        "summary": "Fetch contact",
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "description": "The ID of the contact to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The contact was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "fingerprint": {
                      "description": "The fingerprint of the contact",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email address of the contact",
                      "type": "string"
                    },
                    "phone": {
                      "description": "The phone number of the contact",
                      "type": "string"
                    },
                    "nick": {
                      "description": "The nickname of the contact",
                      "type": "string"
                    },
                    "verifiedAt": {
                      "description": "The timestamp (ms) when the contact was verified",
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "fingerprint"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchContact",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/{contactId}/secret/{secretId}/authenticate": {
      "post": {
        "operationId": "authenticateContactSecret",
        "summary": "Authenticate contact secret",
        "tags": [
          "Contact Secret"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the contact the secret belongs to"
            }
          },
          {
            "in": "path",
            "name": "secretId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the secret to authenticate"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The contact secret is about to be authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the secret to authenticate",
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL to authenticate the secret",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "url"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "authenticateContactSecret",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/{contactId}/secret/{secretId}/revoke": {
      "post": {
        "operationId": "revokeContactSecret",
        "summary": "Revoke contact secret",
        "tags": [
          "Contact Secret"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the contact the secret belongs to"
            }
          },
          {
            "in": "path",
            "name": "secretId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the secret to be revoked"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The contact secret was revoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the revoked secret",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "revokeContactSecret",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/{contactId}/secret/{secretId}/verify": {
      "post": {
        "operationId": "verifyContactSecret",
        "summary": "Verify contact secret",
        "tags": [
          "Contact Secret"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the contact the secret belongs to"
            }
          },
          {
            "in": "path",
            "name": "secretId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the secret to be verified"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The contact secret was verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the verified secret",
                      "type": "string"
                    },
                    "status": {
                      "description": "The status of the secret",
                      "type": "string",
                      "enum": [
                        "unauthenticated",
                        "authenticated"
                      ]
                    },
                    "action": {
                      "oneOf": [
                        {
                          "description": "The action to take next",
                          "type": "object",
                          "properties": {
                            "type": {
                              "description": "The type of action to take",
                              "type": "string",
                              "enum": [
                                "authenticate"
                              ]
                            },
                            "url": {
                              "description": "The URL to authenticate the secret",
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "url"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "status"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "verifyContactSecret",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/{contactId}/secret/list": {
      "get": {
        "operationId": "listContactSecrets",
        "summary": "List contact secrets",
        "tags": [
          "Contact Secret"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "description": "The ID of the contact to list secrets for",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of contacts was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "type": {
                            "description": "The type of the secret",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "type"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "type": {
                              "description": "The type of the secret",
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1contact~1{contactId}~1secret~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "type"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listContactSecrets",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/{contactId}/task/list": {
      "get": {
        "operationId": "listContactTasks",
        "summary": "List contact tasks",
        "tags": [
          "Contact Task"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "description": "The ID of the contact to list tasks for",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of contacts was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "contactId": {
                            "description": "The contact id assigned to this task",
                            "type": "string"
                          },
                          "botId": {
                            "type": "string",
                            "description": "The bot associated with the task"
                          },
                          "schedule": {
                            "type": "string",
                            "description": "The schedule of the task"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "contactId": {
                              "description": "The contact id assigned to this task",
                              "type": "string"
                            },
                            "botId": {
                              "type": "string",
                              "description": "The bot associated with the task"
                            },
                            "schedule": {
                              "type": "string",
                              "description": "The schedule of the task"
                            }
                          },
                          "$$ref": "#/paths/~1contact~1{contactId}~1task~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listContactTasks",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/{contactId}/update": {
      "post": {
        "operationId": "updateContact",
        "summary": "Update contact",
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "fingerprint": {
                    "description": "The fingerprint of the contact",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the contact",
                    "type": "string"
                  },
                  "phone": {
                    "description": "The phone number of the contact",
                    "type": "string"
                  },
                  "nick": {
                    "description": "The nickname of the contact",
                    "type": "string"
                  },
                  "verifiedAt": {
                    "description": "The timestamp (ms) when the contact was verified",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The contact was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated contact",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateContact",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/create": {
      "post": {
        "operationId": "createContact",
        "summary": "Create a new contact",
        "description": "Create a new contact with the given parameters.\n",
        "tags": [
          "Contact"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "fingerprint": {
                    "description": "The fingerprint of the contact",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the contact",
                    "type": "string"
                  },
                  "phone": {
                    "description": "The phone number of the contact",
                    "type": "string"
                  },
                  "nick": {
                    "description": "The nickname of the contact",
                    "type": "string"
                  },
                  "verifiedAt": {
                    "description": "The timestamp (ms) when the contact was verified",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The contact was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created contact",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createContact",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/ensure": {
      "post": {
        "operationId": "ensureContact",
        "summary": "Ensure a contact exists or create a new one",
        "description": "Ensure a contact with the given parameters exists or create a new one.\n",
        "tags": [
          "Contact"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "fingerprint": {
                    "description": "The fingerprint of the contact",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email address of the contact",
                    "type": "string"
                  },
                  "phone": {
                    "description": "The phone number of the contact",
                    "type": "string"
                  },
                  "nick": {
                    "description": "The nickname of the contact",
                    "type": "string"
                  },
                  "verifiedAt": {
                    "description": "The timestamp (ms) when the contact was verified",
                    "type": "number"
                  }
                },
                "required": [
                  "fingerprint"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The contact was ensured successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the ensured contact",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "ensureContact",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/export": {
      "get": {
        "operationId": "exportContacts",
        "summary": "Export contacts",
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of contacts was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "fingerprint": {
                            "description": "The fingerprint of the contact",
                            "type": "string"
                          },
                          "email": {
                            "description": "The email address of the contact",
                            "type": "string"
                          },
                          "phone": {
                            "description": "The phone number of the contact",
                            "type": "string"
                          },
                          "nick": {
                            "description": "The nickname of the contact",
                            "type": "string"
                          },
                          "verifiedAt": {
                            "description": "The timestamp (ms) when the contact was verified",
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "fingerprint"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "fingerprint": {
                              "description": "The fingerprint of the contact",
                              "type": "string"
                            },
                            "email": {
                              "description": "The email address of the contact",
                              "type": "string"
                            },
                            "phone": {
                              "description": "The phone number of the contact",
                              "type": "string"
                            },
                            "nick": {
                              "description": "The nickname of the contact",
                              "type": "string"
                            },
                            "verifiedAt": {
                              "description": "The timestamp (ms) when the contact was verified",
                              "type": "number"
                            }
                          },
                          "$$ref": "#/paths/~1contact~1export/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "fingerprint"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "exportContacts",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/contact/list": {
      "get": {
        "operationId": "listContacts",
        "summary": "List contacts",
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of contacts was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "fingerprint": {
                            "description": "The fingerprint of the contact",
                            "type": "string"
                          },
                          "email": {
                            "description": "The email address of the contact",
                            "type": "string"
                          },
                          "phone": {
                            "description": "The phone number of the contact",
                            "type": "string"
                          },
                          "nick": {
                            "description": "The nickname of the contact",
                            "type": "string"
                          },
                          "verifiedAt": {
                            "description": "The timestamp (ms) when the contact was verified",
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "fingerprint"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "fingerprint": {
                              "description": "The fingerprint of the contact",
                              "type": "string"
                            },
                            "email": {
                              "description": "The email address of the contact",
                              "type": "string"
                            },
                            "phone": {
                              "description": "The phone number of the contact",
                              "type": "string"
                            },
                            "nick": {
                              "description": "The nickname of the contact",
                              "type": "string"
                            },
                            "verifiedAt": {
                              "description": "The timestamp (ms) when the contact was verified",
                              "type": "number"
                            }
                          },
                          "$$ref": "#/paths/~1contact~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "fingerprint"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listContacts",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/attachment/upload": {
      "post": {
        "operationId": "uploadConversationAttachment",
        "summary": "Upload a file as a conversation attachment",
        "description": "Upload the specified file to the conversation. The file can be\nspecified either as a HTTP URL, a data URL, a multipart/form-data, or\nas a raw file stream. There is currently a limit of 4.5MB for files\nuploaded via all available methods except for direct-to-source uploads\nwhen using application/json request body with a file object.\n",
        "tags": [
          "Conversation Attachment"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "file": {
                        "description": "The file to upload either as http: or data: URL",
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "file": {
                        "description": "The file definition to upload",
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "The file type",
                            "type": "string"
                          },
                          "size": {
                            "description": "The file size",
                            "type": "number"
                          },
                          "name": {
                            "description": "The file name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "size"
                        ]
                      }
                    }
                  }
                ],
                "required": [
                  "file"
                ]
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "The file to upload",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The file was upload successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the upload file",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the upload file",
                      "type": "string"
                    },
                    "uploadRequest": {
                      "description": "The request required to upload the file",
                      "type": "object",
                      "properties": {
                        "method": {
                          "description": "The HTTP method to use",
                          "type": "string"
                        },
                        "url": {
                          "description": "The HTTP url to use",
                          "type": "string"
                        },
                        "headers": {
                          "description": "The HTTP url to use",
                          "type": "object"
                        }
                      },
                      "required": [
                        "method",
                        "url",
                        "headers"
                      ]
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "uploadConversationAttachment",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/complete": {
      "post": {
        "operationId": "completeConversationMessage",
        "summary": "Send and receive a conversation response",
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation to receive message from",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "description": "The text of the message to send",
                    "type": "string"
                  },
                  "entities": {
                    "description": "Known entities",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Extracted entity from the message",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The entity type"
                        },
                        "begin": {
                          "type": "number",
                          "description": "Start offset"
                        },
                        "end": {
                          "type": "number",
                          "description": "End offset"
                        },
                        "text": {
                          "type": "string",
                          "description": "The text value of the entity"
                        },
                        "replacement": {
                          "type": "object",
                          "properties": {
                            "begin": {
                              "type": "number",
                              "description": "Start offset"
                            },
                            "end": {
                              "type": "number",
                              "description": "End offset"
                            },
                            "text": {
                              "type": "string",
                              "description": "The text value of the replacement"
                            }
                          },
                          "required": [
                            "begin",
                            "end",
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "begin",
                        "end",
                        "text"
                      ],
                      "$$ref": "#/components/schemas/Entity"
                    }
                  }
                },
                "required": [
                  "text"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was received successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created message",
                      "type": "string"
                    },
                    "text": {
                      "description": "The text of the message received",
                      "type": "string"
                    },
                    "usage": {
                      "type": "object",
                      "description": "Usage information",
                      "properties": {
                        "token": {
                          "type": "number",
                          "description": "The tokens used in this exchange"
                        }
                      },
                      "required": [
                        "token"
                      ],
                      "$$ref": "#/components/schemas/Usage"
                    }
                  },
                  "required": [
                    "id",
                    "text",
                    "usage"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "result"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The ID of the created message",
                              "type": "string"
                            },
                            "text": {
                              "description": "The text of the message received",
                              "type": "string"
                            },
                            "usage": {
                              "type": "object",
                              "description": "Usage information",
                              "properties": {
                                "token": {
                                  "type": "number",
                                  "description": "The tokens used in this exchange"
                                }
                              },
                              "required": [
                                "token"
                              ],
                              "$$ref": "#/components/schemas/Usage"
                            }
                          },
                          "required": [
                            "id",
                            "text",
                            "usage"
                          ],
                          "$$ref": "#/paths/~1conversation~1{conversationId}~1complete/post/responses/200/content/application~1json/schema"
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "message"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A message in the conversation",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of the message",
                              "enum": [
                                "user",
                                "bot",
                                "context",
                                "instruction",
                                "backstory",
                                "activity"
                              ],
                              "$$ref": "#/components/schemas/MessageType"
                            },
                            "text": {
                              "type": "string",
                              "description": "The text of the message"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            }
                          },
                          "required": [
                            "type",
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "token"
                          ]
                        },
                        "data": {
                          "description": "The data for the event",
                          "type": "object",
                          "properties": {
                            "token": {
                              "description": "The token generated",
                              "type": "string"
                            }
                          },
                          "required": [
                            "token"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "completeConversationMessage",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/contact/upsert": {
      "post": {
        "operationId": "upsertConversationContact",
        "summary": "Upsert contact",
        "tags": [
          "Conversation Contact"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "email": {
                    "description": "The email address of the contact",
                    "type": "string"
                  },
                  "phone": {
                    "description": "The phone number of the contact",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The contact was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created contact",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "upsertConversationContact",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/delete": {
      "post": {
        "operationId": "deleteConversation",
        "summary": "Delete conversation",
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The conversation was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted conversation",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteConversation",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/downvote": {
      "post": {
        "operationId": "downvoteConversation",
        "summary": "Downvote conversation",
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The value of the downvote",
                    "type": "integer",
                    "minimum": -100,
                    "maximum": -1,
                    "default": -100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was downvoted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The conversation ID of the downvoted conversation",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "downvoteConversation",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/fetch": {
      "get": {
        "operationId": "fetchConversation",
        "summary": "Fetch conversation",
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The conversation was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A bot configuration or reference",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "contactId": {
                      "description": "The contact id assigned to this conversation",
                      "type": "string"
                    },
                    "taskId": {
                      "description": "The task id assigned to this conversation",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ],
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "botId": {
                          "type": "string",
                          "description": "The ID of the bot this configuration is using"
                        }
                      },
                      "$$ref": "#/components/schemas/BotRef"
                    },
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "model": {
                          "type": "string",
                          "description": "A model definition",
                          "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                          "example": "gpt-4-turbo/temperature=0.7",
                          "$$ref": "#/components/schemas/Model"
                        },
                        "backstory": {
                          "type": "string",
                          "description": "The backstory this configuration is using"
                        },
                        "datasetId": {
                          "type": "string",
                          "description": "The id of the dataset this configuration is using"
                        },
                        "skillsetId": {
                          "type": "string",
                          "description": "The id of the skillset this configuration is using"
                        },
                        "privacy": {
                          "type": "boolean",
                          "description": "The privacy flag for this configuration"
                        },
                        "moderation": {
                          "type": "boolean",
                          "description": "The moderation flag for this configuration"
                        }
                      },
                      "$$ref": "#/components/schemas/BotConfig"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchConversation",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/message/{messageId}/delete": {
      "post": {
        "operationId": "deleteConversationMessage",
        "summary": "Delete a message",
        "tags": [
          "Conversation Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation containing the message",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "description": "The ID of the message to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteConversationMessage",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/message/{messageId}/downvote": {
      "post": {
        "operationId": "downvoteConversationMessage",
        "summary": "Downvote conversation message",
        "tags": [
          "Conversation Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "description": "The ID of the message",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The value of the downvote",
                    "type": "integer",
                    "minimum": -100,
                    "maximum": -1,
                    "default": -100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was downvoted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the downvoted message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "downvoteConversationMessage",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/message/{messageId}/fetch": {
      "get": {
        "operationId": "fetchConversationMessage",
        "summary": "Fetch conversation message",
        "tags": [
          "Conversation Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation containing the message",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "description": "The ID of the message to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The message was fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the message",
                      "enum": [
                        "user",
                        "bot",
                        "context",
                        "instruction",
                        "backstory",
                        "activity"
                      ],
                      "$$ref": "#/components/schemas/MessageType"
                    },
                    "text": {
                      "description": "The text of the fetched message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "type",
                    "text"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchConversationMessage",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/message/{messageId}/synthesize": {
      "post": {
        "operationId": "synthesizeConversationMessage",
        "summary": "Synthesize conversation message",
        "tags": [
          "Conversation Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "description": "The ID of the message",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was synthesized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the synthesized message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "synthesizeConversationMessage",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/message/{messageId}/update": {
      "post": {
        "operationId": "updateConversationMessage",
        "summary": "Update conversation message",
        "tags": [
          "Conversation Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "description": "The ID of the message",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the message",
                    "enum": [
                      "user",
                      "bot",
                      "context",
                      "instruction",
                      "backstory",
                      "activity"
                    ],
                    "$$ref": "#/components/schemas/MessageType"
                  },
                  "text": {
                    "description": "The updated text of the message",
                    "type": "string"
                  },
                  "entities": {
                    "description": "Known entities",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Extracted entity from the message",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The entity type"
                        },
                        "begin": {
                          "type": "number",
                          "description": "Start offset"
                        },
                        "end": {
                          "type": "number",
                          "description": "End offset"
                        },
                        "text": {
                          "type": "string",
                          "description": "The text value of the entity"
                        },
                        "replacement": {
                          "type": "object",
                          "properties": {
                            "begin": {
                              "type": "number",
                              "description": "Start offset"
                            },
                            "end": {
                              "type": "number",
                              "description": "End offset"
                            },
                            "text": {
                              "type": "string",
                              "description": "The text value of the replacement"
                            }
                          },
                          "required": [
                            "begin",
                            "end",
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "begin",
                        "end",
                        "text"
                      ],
                      "$$ref": "#/components/schemas/Entity"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateConversationMessage",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/message/{messageId}/upvote": {
      "post": {
        "operationId": "upvoteConversationMessage",
        "summary": "Upvote conversation message",
        "tags": [
          "Conversation Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": {
              "description": "The ID of the message",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The value of the upvote",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was upvoted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the upvoted message",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "upvoteConversationMessage",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/message/create": {
      "post": {
        "operationId": "createConversationMessage",
        "summary": "Create message",
        "tags": [
          "Conversation Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the message",
                    "enum": [
                      "user",
                      "bot",
                      "context",
                      "instruction",
                      "backstory",
                      "activity"
                    ],
                    "$$ref": "#/components/schemas/MessageType"
                  },
                  "text": {
                    "description": "The text of the message",
                    "type": "string"
                  },
                  "entities": {
                    "description": "Known entities",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Extracted entity from the message",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The entity type"
                        },
                        "begin": {
                          "type": "number",
                          "description": "Start offset"
                        },
                        "end": {
                          "type": "number",
                          "description": "End offset"
                        },
                        "text": {
                          "type": "string",
                          "description": "The text value of the entity"
                        },
                        "replacement": {
                          "type": "object",
                          "properties": {
                            "begin": {
                              "type": "number",
                              "description": "Start offset"
                            },
                            "end": {
                              "type": "number",
                              "description": "End offset"
                            },
                            "text": {
                              "type": "string",
                              "description": "The text value of the replacement"
                            }
                          },
                          "required": [
                            "begin",
                            "end",
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "begin",
                        "end",
                        "text"
                      ],
                      "$$ref": "#/components/schemas/Entity"
                    }
                  }
                },
                "required": [
                  "type",
                  "text"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created message",
                      "type": "string"
                    },
                    "entities": {
                      "description": "Extracted entities from the message",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Extracted entity from the message",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The entity type"
                          },
                          "begin": {
                            "type": "number",
                            "description": "Start offset"
                          },
                          "end": {
                            "type": "number",
                            "description": "End offset"
                          },
                          "text": {
                            "type": "string",
                            "description": "The text value of the entity"
                          },
                          "replacement": {
                            "type": "object",
                            "properties": {
                              "begin": {
                                "type": "number",
                                "description": "Start offset"
                              },
                              "end": {
                                "type": "number",
                                "description": "End offset"
                              },
                              "text": {
                                "type": "string",
                                "description": "The text value of the replacement"
                              }
                            },
                            "required": [
                              "begin",
                              "end",
                              "text"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "begin",
                          "end",
                          "text"
                        ],
                        "$$ref": "#/components/schemas/Entity"
                      }
                    }
                  },
                  "required": [
                    "id",
                    "entities"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createConversationMessage",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/message/list": {
      "get": {
        "operationId": "listConversationMessages",
        "summary": "List conversation messages",
        "tags": [
          "Conversation Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation to list messages for",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The messages were listed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the message",
                            "enum": [
                              "user",
                              "bot",
                              "context",
                              "instruction",
                              "backstory",
                              "activity"
                            ],
                            "$$ref": "#/components/schemas/MessageType"
                          },
                          "text": {
                            "description": "The text of the message",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "type",
                          "text"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "type": {
                              "type": "string",
                              "description": "The type of the message",
                              "enum": [
                                "user",
                                "bot",
                                "context",
                                "instruction",
                                "backstory",
                                "activity"
                              ],
                              "$$ref": "#/components/schemas/MessageType"
                            },
                            "text": {
                              "description": "The text of the message",
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1conversation~1{conversationId}~1message~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "type",
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listConversationMessages",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/receive": {
      "post": {
        "operationId": "receiveConversationMessage",
        "summary": "Receive a conversation response",
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation to receive message from",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was received successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created message",
                      "type": "string"
                    },
                    "text": {
                      "description": "The text of the message received",
                      "type": "string"
                    },
                    "usage": {
                      "type": "object",
                      "description": "Usage information",
                      "properties": {
                        "token": {
                          "type": "number",
                          "description": "The tokens used in this exchange"
                        }
                      },
                      "required": [
                        "token"
                      ],
                      "$$ref": "#/components/schemas/Usage"
                    }
                  },
                  "required": [
                    "id",
                    "text",
                    "usage"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "result"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The ID of the created message",
                              "type": "string"
                            },
                            "text": {
                              "description": "The text of the message received",
                              "type": "string"
                            },
                            "usage": {
                              "type": "object",
                              "description": "Usage information",
                              "properties": {
                                "token": {
                                  "type": "number",
                                  "description": "The tokens used in this exchange"
                                }
                              },
                              "required": [
                                "token"
                              ],
                              "$$ref": "#/components/schemas/Usage"
                            }
                          },
                          "required": [
                            "id",
                            "text",
                            "usage"
                          ],
                          "$$ref": "#/paths/~1conversation~1{conversationId}~1receive/post/responses/200/content/application~1json/schema"
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "message"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A message in the conversation",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of the message",
                              "enum": [
                                "user",
                                "bot",
                                "context",
                                "instruction",
                                "backstory",
                                "activity"
                              ],
                              "$$ref": "#/components/schemas/MessageType"
                            },
                            "text": {
                              "type": "string",
                              "description": "The text of the message"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            }
                          },
                          "required": [
                            "type",
                            "text"
                          ],
                          "$$ref": "#/components/schemas/Message"
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "token"
                          ]
                        },
                        "data": {
                          "description": "The data for the event",
                          "type": "object",
                          "properties": {
                            "token": {
                              "description": "The token generated",
                              "type": "string"
                            }
                          },
                          "required": [
                            "token"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "receiveConversationMessage",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/send": {
      "post": {
        "operationId": "sendConversationMessage",
        "summary": "Send a message to a conversation",
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation to send the message to",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "description": "The text of the message to send",
                    "type": "string"
                  },
                  "entities": {
                    "description": "Known entities",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Extracted entity from the message",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The entity type"
                        },
                        "begin": {
                          "type": "number",
                          "description": "Start offset"
                        },
                        "end": {
                          "type": "number",
                          "description": "End offset"
                        },
                        "text": {
                          "type": "string",
                          "description": "The text value of the entity"
                        },
                        "replacement": {
                          "type": "object",
                          "properties": {
                            "begin": {
                              "type": "number",
                              "description": "Start offset"
                            },
                            "end": {
                              "type": "number",
                              "description": "End offset"
                            },
                            "text": {
                              "type": "string",
                              "description": "The text value of the replacement"
                            }
                          },
                          "required": [
                            "begin",
                            "end",
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "begin",
                        "end",
                        "text"
                      ],
                      "$$ref": "#/components/schemas/Entity"
                    }
                  }
                },
                "required": [
                  "text"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the sent message",
                      "type": "string"
                    },
                    "entities": {
                      "description": "Extracted entities from the message",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Extracted entity from the message",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The entity type"
                          },
                          "begin": {
                            "type": "number",
                            "description": "Start offset"
                          },
                          "end": {
                            "type": "number",
                            "description": "End offset"
                          },
                          "text": {
                            "type": "string",
                            "description": "The text value of the entity"
                          },
                          "replacement": {
                            "type": "object",
                            "properties": {
                              "begin": {
                                "type": "number",
                                "description": "Start offset"
                              },
                              "end": {
                                "type": "number",
                                "description": "End offset"
                              },
                              "text": {
                                "type": "string",
                                "description": "The text value of the replacement"
                              }
                            },
                            "required": [
                              "begin",
                              "end",
                              "text"
                            ]
                          }
                        },
                        "required": [
                          "type",
                          "begin",
                          "end",
                          "text"
                        ],
                        "$$ref": "#/components/schemas/Entity"
                      }
                    }
                  },
                  "required": [
                    "id",
                    "entities"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "result"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The ID of the sent message",
                              "type": "string"
                            },
                            "entities": {
                              "description": "Extracted entities from the message",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "description": "Extracted entity from the message",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "The entity type"
                                  },
                                  "begin": {
                                    "type": "number",
                                    "description": "Start offset"
                                  },
                                  "end": {
                                    "type": "number",
                                    "description": "End offset"
                                  },
                                  "text": {
                                    "type": "string",
                                    "description": "The text value of the entity"
                                  },
                                  "replacement": {
                                    "type": "object",
                                    "properties": {
                                      "begin": {
                                        "type": "number",
                                        "description": "Start offset"
                                      },
                                      "end": {
                                        "type": "number",
                                        "description": "End offset"
                                      },
                                      "text": {
                                        "type": "string",
                                        "description": "The text value of the replacement"
                                      }
                                    },
                                    "required": [
                                      "begin",
                                      "end",
                                      "text"
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "begin",
                                  "end",
                                  "text"
                                ],
                                "$$ref": "#/components/schemas/Entity"
                              }
                            }
                          },
                          "required": [
                            "id",
                            "entities"
                          ],
                          "$$ref": "#/paths/~1conversation~1{conversationId}~1send/post/responses/200/content/application~1json/schema"
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "sendConversationMessage",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/session/create": {
      "post": {
        "operationId": "createConversationSession",
        "summary": "Create conversation session",
        "description": "Conversation tokens allow client-side applications to create a unique, authenticated credential for each conversation. This token can be used to interact with the conversation/{conversationId}/send, conversation/{conversationId}/receive, and conversation/{conversationId}/message/create routes on api.chatbotkit.com. By creating an individual token for each conversation, a client-side application is able to directly access and manipulate the conversation through these routes. Without conversation tokens, a client-side application would need to authenticate and access ChatBotKit conversation routes through a server-side application, which can be more complex and require additional infrastructure. By providing a way for client-side applications to authenticate and access the conversation routes directly, the token route simplifies the process of integrating with api.chatbotkit.com and makes it more convenient for developers to build chatbot applications.\n",
        "tags": [
          "Conversation Session"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the conversation"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "durationInSeconds": {
                    "description": "The maximum amount of time this session will stay open",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The session was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the conversation",
                      "type": "string"
                    },
                    "token": {
                      "description": "The token for this conversation",
                      "type": "string"
                    },
                    "expiresAt": {
                      "description": "The time the token will expire in milliseconds",
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "token",
                    "expiresAt"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createConversationSession",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/update": {
      "post": {
        "operationId": "updateConversation",
        "summary": "Update conversation",
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "contactId": {
                    "description": "The contact id assigned to this conversation",
                    "type": "string"
                  },
                  "taskId": {
                    "description": "The task id assigned to this conversation",
                    "type": "string"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The conversation was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated conversation",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateConversation",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/{conversationId}/upvote": {
      "post": {
        "operationId": "upvoteConversation",
        "summary": "Upvote conversation",
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "conversationId",
            "required": true,
            "schema": {
              "description": "The ID of the conversation",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "description": "The value of the upvote",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The conversation was upvoted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the upvoted conversation",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "upvoteConversation",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/complete": {
      "post": {
        "operationId": "completeConversation",
        "summary": "Complete the next message in a conversation",
        "tags": [
          "Conversation"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "A bot configuration or reference",
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ],
                "type": "object",
                "properties": {
                  "messages": {
                    "description": "An array of messages to be added to the conversation",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "A message in the conversation",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of the message",
                          "enum": [
                            "user",
                            "bot",
                            "context",
                            "instruction",
                            "backstory",
                            "activity"
                          ],
                          "$$ref": "#/components/schemas/MessageType"
                        },
                        "text": {
                          "type": "string",
                          "description": "The text of the message"
                        },
                        "meta": {
                          "type": "object",
                          "description": "Meta data information",
                          "additionalProperties": true,
                          "$$ref": "#/components/schemas/Meta"
                        }
                      },
                      "required": [
                        "type",
                        "text"
                      ],
                      "$$ref": "#/components/schemas/Message"
                    }
                  }
                },
                "required": [
                  "messages"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The next message in the conversation completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "description": "The next bot message",
                      "type": "string"
                    },
                    "usage": {
                      "type": "object",
                      "description": "Usage information",
                      "properties": {
                        "token": {
                          "type": "number",
                          "description": "The tokens used in this exchange"
                        }
                      },
                      "required": [
                        "token"
                      ],
                      "$$ref": "#/components/schemas/Usage"
                    }
                  },
                  "required": [
                    "text",
                    "usage"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "result"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "description": "The next bot message",
                              "type": "string"
                            },
                            "usage": {
                              "type": "object",
                              "description": "Usage information",
                              "properties": {
                                "token": {
                                  "type": "number",
                                  "description": "The tokens used in this exchange"
                                }
                              },
                              "required": [
                                "token"
                              ],
                              "$$ref": "#/components/schemas/Usage"
                            }
                          },
                          "required": [
                            "text",
                            "usage"
                          ],
                          "$$ref": "#/paths/~1conversation~1complete/post/responses/200/content/application~1json/schema"
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "message"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A message in the conversation",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "The type of the message",
                              "enum": [
                                "user",
                                "bot",
                                "context",
                                "instruction",
                                "backstory",
                                "activity"
                              ],
                              "$$ref": "#/components/schemas/MessageType"
                            },
                            "text": {
                              "type": "string",
                              "description": "The text of the message"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            }
                          },
                          "required": [
                            "type",
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "token"
                          ]
                        },
                        "data": {
                          "description": "The data for the event",
                          "type": "object",
                          "properties": {
                            "token": {
                              "description": "The token generated",
                              "type": "string"
                            }
                          },
                          "required": [
                            "token"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "completeConversation",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/create": {
      "post": {
        "operationId": "createConversation",
        "summary": "Create a new conversation",
        "description": "Create a new conversation with the given parameters and optional\nmessages. The conversation will be initialized with the the backstory,\nmodel, dataset, skillset and other configuration options of the bot.\nAlternatively the conversation can be initialized directly with the\nbackstory, model, dataset, skillset and other configuration options.\n\nAn array of messages can be included in the request body to add to the\nconversation.\n",
        "tags": [
          "Conversation"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "contactId": {
                    "description": "The contact id assigned to this conversation",
                    "type": "string"
                  },
                  "taskId": {
                    "description": "The task id assigned to this conversation",
                    "type": "string"
                  },
                  "messages": {
                    "description": "An array of messages to be added to the conversation",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of the message",
                          "enum": [
                            "user",
                            "bot",
                            "context",
                            "instruction",
                            "backstory",
                            "activity"
                          ],
                          "$$ref": "#/components/schemas/MessageType"
                        },
                        "text": {
                          "description": "The text of the message",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "text"
                      ]
                    }
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The conversation was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created conversation",
                      "type": "string"
                    },
                    "messages": {
                      "description": "An array of messages included in the conversation",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of the message",
                            "enum": [
                              "user",
                              "bot",
                              "context",
                              "instruction",
                              "backstory",
                              "activity"
                            ],
                            "$$ref": "#/components/schemas/MessageType"
                          },
                          "text": {
                            "description": "The text of the message",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "text"
                        ]
                      }
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createConversation",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/export": {
      "get": {
        "operationId": "exportConversations",
        "summary": "Export conversations",
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of conversations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration or reference",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "contactId": {
                            "description": "The contact id assigned to this conversation",
                            "type": "string"
                          },
                          "taskId": {
                            "description": "The task id assigned to this conversation",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ],
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "botId": {
                                "type": "string",
                                "description": "The ID of the bot this configuration is using"
                              }
                            },
                            "$$ref": "#/components/schemas/BotRef"
                          },
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "A model definition",
                                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                "example": "gpt-4-turbo/temperature=0.7",
                                "$$ref": "#/components/schemas/Model"
                              },
                              "backstory": {
                                "type": "string",
                                "description": "The backstory this configuration is using"
                              },
                              "datasetId": {
                                "type": "string",
                                "description": "The id of the dataset this configuration is using"
                              },
                              "skillsetId": {
                                "type": "string",
                                "description": "The id of the skillset this configuration is using"
                              },
                              "privacy": {
                                "type": "boolean",
                                "description": "The privacy flag for this configuration"
                              },
                              "moderation": {
                                "type": "boolean",
                                "description": "The moderation flag for this configuration"
                              }
                            },
                            "$$ref": "#/components/schemas/BotConfig"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration or reference",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "contactId": {
                              "description": "The contact id assigned to this conversation",
                              "type": "string"
                            },
                            "taskId": {
                              "description": "The task id assigned to this conversation",
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1conversation~1export/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ],
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "botId": {
                                  "type": "string",
                                  "description": "The ID of the bot this configuration is using"
                                }
                              },
                              "$$ref": "#/components/schemas/BotRef"
                            },
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "description": "A model definition",
                                  "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                  "example": "gpt-4-turbo/temperature=0.7",
                                  "$$ref": "#/components/schemas/Model"
                                },
                                "backstory": {
                                  "type": "string",
                                  "description": "The backstory this configuration is using"
                                },
                                "datasetId": {
                                  "type": "string",
                                  "description": "The id of the dataset this configuration is using"
                                },
                                "skillsetId": {
                                  "type": "string",
                                  "description": "The id of the skillset this configuration is using"
                                },
                                "privacy": {
                                  "type": "boolean",
                                  "description": "The privacy flag for this configuration"
                                },
                                "moderation": {
                                  "type": "boolean",
                                  "description": "The moderation flag for this configuration"
                                }
                              },
                              "$$ref": "#/components/schemas/BotConfig"
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "exportConversations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/conversation/list": {
      "get": {
        "operationId": "listConversations",
        "summary": "List conversations",
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of conversations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration or reference",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "contactId": {
                            "description": "The contact id assigned to this conversation",
                            "type": "string"
                          },
                          "taskId": {
                            "description": "The task id assigned to this conversation",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ],
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "botId": {
                                "type": "string",
                                "description": "The ID of the bot this configuration is using"
                              }
                            },
                            "$$ref": "#/components/schemas/BotRef"
                          },
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "A model definition",
                                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                "example": "gpt-4-turbo/temperature=0.7",
                                "$$ref": "#/components/schemas/Model"
                              },
                              "backstory": {
                                "type": "string",
                                "description": "The backstory this configuration is using"
                              },
                              "datasetId": {
                                "type": "string",
                                "description": "The id of the dataset this configuration is using"
                              },
                              "skillsetId": {
                                "type": "string",
                                "description": "The id of the skillset this configuration is using"
                              },
                              "privacy": {
                                "type": "boolean",
                                "description": "The privacy flag for this configuration"
                              },
                              "moderation": {
                                "type": "boolean",
                                "description": "The moderation flag for this configuration"
                              }
                            },
                            "$$ref": "#/components/schemas/BotConfig"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration or reference",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "contactId": {
                              "description": "The contact id assigned to this conversation",
                              "type": "string"
                            },
                            "taskId": {
                              "description": "The task id assigned to this conversation",
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1conversation~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ],
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "botId": {
                                  "type": "string",
                                  "description": "The ID of the bot this configuration is using"
                                }
                              },
                              "$$ref": "#/components/schemas/BotRef"
                            },
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "description": "A model definition",
                                  "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                  "example": "gpt-4-turbo/temperature=0.7",
                                  "$$ref": "#/components/schemas/Model"
                                },
                                "backstory": {
                                  "type": "string",
                                  "description": "The backstory this configuration is using"
                                },
                                "datasetId": {
                                  "type": "string",
                                  "description": "The id of the dataset this configuration is using"
                                },
                                "skillsetId": {
                                  "type": "string",
                                  "description": "The id of the skillset this configuration is using"
                                },
                                "privacy": {
                                  "type": "boolean",
                                  "description": "The privacy flag for this configuration"
                                },
                                "moderation": {
                                  "type": "boolean",
                                  "description": "The moderation flag for this configuration"
                                }
                              },
                              "$$ref": "#/components/schemas/BotConfig"
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listConversations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/delete": {
      "post": {
        "operationId": "deleteDataset",
        "summary": "Delete a dataset",
        "tags": [
          "Dataset"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "description": "The ID of the dataset to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The dataset was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted dataset",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteDataset",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/fetch": {
      "get": {
        "operationId": "fetchDataset",
        "summary": "Fetch a dataset",
        "tags": [
          "Dataset"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "description": "The ID of the dataset to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The dataset was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "store": {
                      "description": "The storage class for the dataset",
                      "type": "string"
                    },
                    "reranker": {
                      "description": "The reranker class for the dataset",
                      "type": "string"
                    },
                    "recordMaxTokens": {
                      "description": "The total number of tokens for each record",
                      "type": "number"
                    },
                    "searchMinScore": {
                      "description": "The minimum score to filter search results by",
                      "type": "number"
                    },
                    "searchMaxRecords": {
                      "description": "The total number of records to return during search",
                      "type": "number"
                    },
                    "searchMaxTokens": {
                      "description": "The total number of tokens to use during search",
                      "type": "number"
                    },
                    "matchInstruction": {
                      "description": "An instruction to include before found records",
                      "type": "string"
                    },
                    "mismatchInstruction": {
                      "description": "An instruction to include if no records where found",
                      "type": "string"
                    },
                    "separators": {
                      "description": "A list of separators to use when tokenizing text",
                      "type": "string"
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The dataset visibility",
                      "enum": [
                        "private",
                        "protected",
                        "public"
                      ],
                      "$$ref": "#/components/schemas/DatasetVisibility"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchDataset",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/file/{fileId}/attach": {
      "post": {
        "operationId": "attachDatasetFile",
        "summary": "Attach dataset file",
        "tags": [
          "Dataset File"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "description": "The ID of the dataset",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "description": "The ID of the file",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The dataset file attachment type",
                    "enum": [
                      "source"
                    ],
                    "$$ref": "#/components/schemas/DatasetFileAttachmentType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The dataset file that was attached successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the dataset file",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "attachDatasetFile",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/file/{fileId}/detach": {
      "post": {
        "operationId": "detachDatasetFile",
        "summary": "Detach dataset file",
        "tags": [
          "Dataset File"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "description": "The ID of the dataset",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "description": "The ID of the file",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deleteRecords": {
                    "type": "boolean",
                    "description": "Delete records associated with the file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The dataset file that was detached successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the dataset file",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "detachDatasetFile",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/file/{fileId}/sync": {
      "post": {
        "operationId": "syncDatasetFile",
        "summary": "Sync dataset file",
        "tags": [
          "Dataset File"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "description": "The ID of the dataset",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "description": "The ID of the file",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The dataset file that was synced successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the dataset file",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "syncDatasetFile",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/file/list": {
      "get": {
        "operationId": "listDatasetFiles",
        "summary": "Retrieve a list of dataset files",
        "tags": [
          "Dataset File"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "description": "The ID of the dataset",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of files was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "visibility": {
                            "type": "string",
                            "description": "The file visibility",
                            "enum": [
                              "private",
                              "protected",
                              "public"
                            ],
                            "$$ref": "#/components/schemas/FileVisibility"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "visibility": {
                              "type": "string",
                              "description": "The file visibility",
                              "enum": [
                                "private",
                                "protected",
                                "public"
                              ],
                              "$$ref": "#/components/schemas/FileVisibility"
                            }
                          },
                          "$$ref": "#/paths/~1file~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listDatasetFiles",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/record/{recordId}/delete": {
      "post": {
        "operationId": "deleteDatasetRecord",
        "summary": "Delete a record from a dataset",
        "tags": [
          "Dataset Record"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "description": "The ID of the dataset",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "description": "The ID of the record to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The record was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted record",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteDatasetRecord",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/record/{recordId}/fetch": {
      "get": {
        "operationId": "fetchDatasetRecord",
        "summary": "Fetch a record from a dataset",
        "tags": [
          "Dataset Record"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "description": "The ID of the dataset",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "description": "The ID of the record to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The dataset was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "text": {
                      "description": "The text of the dataset record",
                      "type": "string"
                    },
                    "source": {
                      "description": "The source of the dataset record",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "text"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchDatasetRecord",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/record/{recordId}/update": {
      "post": {
        "operationId": "updateDatasetRecord",
        "summary": "Update a dataset record",
        "tags": [
          "Dataset Record"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "description": "The text to update the record with",
                    "type": "string"
                  },
                  "source": {
                    "description": "The source to update the record with",
                    "type": "string"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The record was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated record",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateDatasetRecord",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/record/create": {
      "post": {
        "operationId": "createDatasetRecord",
        "summary": "Create record",
        "tags": [
          "Dataset Record"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "description": "The text of the record",
                    "type": "string"
                  },
                  "source": {
                    "description": "The source of the record",
                    "type": "string"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  }
                },
                "required": [
                  "text"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The record was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created record",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createDatasetRecord",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/record/export": {
      "get": {
        "operationId": "exportDatasetRecords",
        "summary": "Export dataset records",
        "tags": [
          "Dataset Record"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "description": "The ID of the dataset to export",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The export of dataset records was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "text": {
                            "type": "string"
                          },
                          "source": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "text"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "text": {
                              "type": "string"
                            },
                            "source": {
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1dataset~1{datasetId}~1record~1export/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "exportDatasetRecords",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/record/list": {
      "get": {
        "operationId": "listDatasetRecords",
        "summary": "Retrieve a list of dataset records",
        "tags": [
          "Dataset Record"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "description": "The ID of the dataset",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "text": {
                            "type": "string"
                          },
                          "source": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "text"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "text": {
                              "type": "string"
                            },
                            "source": {
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1dataset~1{datasetId}~1record~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listDatasetRecords",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/search": {
      "post": {
        "operationId": "searchDataset",
        "summary": "Search a dataset for records matching a given search query",
        "tags": [
          "Dataset"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "description": "The ID of the dataset to search",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "search": {
                    "description": "The keyword/phrase to search for",
                    "type": "string"
                  },
                  "filter": {
                    "type": "object",
                    "additionalProperties": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        },
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "$eq": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "boolean"
                                }
                              ]
                            }
                          },
                          "required": [
                            "$eq"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "$ne": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                },
                                {
                                  "type": "boolean"
                                }
                              ]
                            }
                          },
                          "required": [
                            "$ne"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "$gt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "$gt"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "$gte": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "$gte"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "$lt": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "$lt"
                          ],
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "$lte": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "$lte"
                          ],
                          "additionalProperties": false
                        }
                      ]
                    },
                    "$$ref": "#/components/schemas/DatasetFilter"
                  }
                },
                "required": [
                  "search"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The search was successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the dataset that was searched",
                      "type": "string"
                    },
                    "records": {
                      "description": "An array of records matching the search query",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "text": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "text"
                        ]
                      }
                    }
                  },
                  "required": [
                    "id",
                    "records"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "searchDataset",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/{datasetId}/update": {
      "post": {
        "operationId": "updateDataset",
        "summary": "Update dataset",
        "tags": [
          "Dataset"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "reranker": {
                    "description": "The reranker class for the dataset",
                    "type": "string"
                  },
                  "recordMaxTokens": {
                    "description": "The total number of tokens to for each record",
                    "type": "number"
                  },
                  "searchMinScore": {
                    "description": "The minimum score to filter search results by",
                    "type": "number"
                  },
                  "searchMaxRecords": {
                    "description": "The total number of records to return during search",
                    "type": "number"
                  },
                  "searchMaxTokens": {
                    "description": "The total number of tokens to use during search",
                    "type": "number"
                  },
                  "matchInstruction": {
                    "description": "An instruction to include before found records",
                    "type": "string"
                  },
                  "mismatchInstruction": {
                    "description": "An instruction to include if no records where found",
                    "type": "string"
                  },
                  "separators": {
                    "description": "A list of separators to use when tokenizing text",
                    "type": "string"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The dataset visibility",
                    "enum": [
                      "private",
                      "protected",
                      "public"
                    ],
                    "$$ref": "#/components/schemas/DatasetVisibility"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The dataset was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated dataset",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateDataset",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/create": {
      "post": {
        "operationId": "createDataset",
        "summary": "Create dataset",
        "tags": [
          "Dataset"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "store": {
                    "description": "The storage class for the dataset",
                    "type": "string"
                  },
                  "reranker": {
                    "description": "The reranker class for the dataset",
                    "type": "string"
                  },
                  "recordMaxTokens": {
                    "description": "The total number of tokens for each record",
                    "type": "number"
                  },
                  "searchMinScore": {
                    "description": "The minimum score to filter search results by",
                    "type": "number"
                  },
                  "searchMaxRecords": {
                    "description": "The total number of records to return during search",
                    "type": "number"
                  },
                  "searchMaxTokens": {
                    "description": "The total number of tokens to use during search",
                    "type": "number"
                  },
                  "matchInstruction": {
                    "description": "An instruction to include before found records",
                    "type": "string"
                  },
                  "mismatchInstruction": {
                    "description": "An instruction to include if no records where found",
                    "type": "string"
                  },
                  "separators": {
                    "description": "A list of separators to use when tokenizing text",
                    "type": "string"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The dataset visibility",
                    "enum": [
                      "private",
                      "protected",
                      "public"
                    ],
                    "$$ref": "#/components/schemas/DatasetVisibility"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The dataset was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created dataset",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createDataset",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/dataset/list": {
      "get": {
        "operationId": "listDatasets",
        "summary": "Retrieve a list of datasets",
        "tags": [
          "Dataset"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of datasets was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "store": {
                            "description": "The storage class for the dataset",
                            "type": "string"
                          },
                          "reranker": {
                            "description": "The reranker class for the dataset",
                            "type": "string"
                          },
                          "recordMaxTokens": {
                            "description": "The total number of tokens for each record",
                            "type": "number"
                          },
                          "searchMinScore": {
                            "description": "The minimum score to filter search results by",
                            "type": "number"
                          },
                          "searchMaxRecords": {
                            "description": "The total number of records to return during search",
                            "type": "number"
                          },
                          "searchMaxTokens": {
                            "description": "The total number of tokens to use during search",
                            "type": "number"
                          },
                          "matchInstruction": {
                            "description": "An instruction to include before found records",
                            "type": "string"
                          },
                          "mismatchInstruction": {
                            "description": "An instruction to include if no records where found",
                            "type": "string"
                          },
                          "separators": {
                            "description": "A list of separators to use when tokenizing text",
                            "type": "string"
                          },
                          "visibility": {
                            "type": "string",
                            "description": "The dataset visibility",
                            "enum": [
                              "private",
                              "protected",
                              "public"
                            ],
                            "$$ref": "#/components/schemas/DatasetVisibility"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "store": {
                              "description": "The storage class for the dataset",
                              "type": "string"
                            },
                            "reranker": {
                              "description": "The reranker class for the dataset",
                              "type": "string"
                            },
                            "recordMaxTokens": {
                              "description": "The total number of tokens for each record",
                              "type": "number"
                            },
                            "searchMinScore": {
                              "description": "The minimum score to filter search results by",
                              "type": "number"
                            },
                            "searchMaxRecords": {
                              "description": "The total number of records to return during search",
                              "type": "number"
                            },
                            "searchMaxTokens": {
                              "description": "The total number of tokens to use during search",
                              "type": "number"
                            },
                            "matchInstruction": {
                              "description": "An instruction to include before found records",
                              "type": "string"
                            },
                            "mismatchInstruction": {
                              "description": "An instruction to include if no records where found",
                              "type": "string"
                            },
                            "separators": {
                              "description": "A list of separators to use when tokenizing text",
                              "type": "string"
                            },
                            "visibility": {
                              "type": "string",
                              "description": "The dataset visibility",
                              "enum": [
                                "private",
                                "protected",
                                "public"
                              ],
                              "$$ref": "#/components/schemas/DatasetVisibility"
                            }
                          },
                          "$$ref": "#/paths/~1dataset~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listDatasets",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/file/{fileId}/delete": {
      "post": {
        "operationId": "deleteFile",
        "summary": "Delete a file",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "description": "The ID of the file to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The file was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted file",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteFile",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/file/{fileId}/download": {
      "get": {
        "operationId": "downloadFile",
        "summary": "Download a file",
        "description": "Download a file. If the file is not public, the user must be\nauthenticated.\n",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "description": "The ID of the file to download",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file was downloaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "description": "The URL to download the file",
                      "type": "string"
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              },
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "downloadFile",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/file/{fileId}/fetch": {
      "get": {
        "operationId": "fetchFile",
        "summary": "Fetch a file",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "description": "The ID of the file to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The file visibility",
                      "enum": [
                        "private",
                        "protected",
                        "public"
                      ],
                      "$$ref": "#/components/schemas/FileVisibility"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchFile",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/file/{fileId}/sync": {
      "post": {
        "operationId": "syncFile",
        "summary": "Sync file",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "description": "The ID of the file to sync",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The file was synced successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the file",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "syncFile",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/file/{fileId}/update": {
      "post": {
        "operationId": "updateFile",
        "summary": "Update file",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The file visibility",
                    "enum": [
                      "private",
                      "protected",
                      "public"
                    ],
                    "$$ref": "#/components/schemas/FileVisibility"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The file was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated file",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateFile",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/file/{fileId}/upload": {
      "post": {
        "operationId": "uploadFile",
        "summary": "Upload the specified file",
        "description": "Upload the specified file to the file storage service. The file can be\nspecified either as a HTTP URL, a data URL, a multipart/form-data, or\nas a raw file stream. There is currently a limit of 4.5MB for files\nuploaded via all available methods except for direct-to-source uploads\nwhen using application/json request body with a file object.\n",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "file": {
                        "description": "The file to upload either as http: or data: URL",
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "file": {
                        "description": "The file definition to upload",
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "The file type",
                            "type": "string"
                          },
                          "size": {
                            "description": "The file size",
                            "type": "number"
                          },
                          "name": {
                            "description": "The file name",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type",
                          "size"
                        ]
                      }
                    }
                  }
                ],
                "required": [
                  "file"
                ]
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "The file to upload",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The file was upload successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the upload file",
                      "type": "string"
                    },
                    "uploadRequest": {
                      "description": "The request required to upload the file",
                      "type": "object",
                      "properties": {
                        "method": {
                          "description": "The HTTP method to use",
                          "type": "string"
                        },
                        "url": {
                          "description": "The HTTP url to use",
                          "type": "string"
                        },
                        "headers": {
                          "description": "The HTTP url to use",
                          "type": "object"
                        }
                      },
                      "required": [
                        "method",
                        "url",
                        "headers"
                      ]
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "uploadFile",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/file/create": {
      "post": {
        "operationId": "createFile",
        "summary": "Create file",
        "tags": [
          "File"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The file visibility",
                    "enum": [
                      "private",
                      "protected",
                      "public"
                    ],
                    "$$ref": "#/components/schemas/FileVisibility"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The file was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created file",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createFile",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/file/list": {
      "get": {
        "operationId": "listFiles",
        "summary": "Retrieve a list of files",
        "tags": [
          "File"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of files was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "visibility": {
                            "type": "string",
                            "description": "The file visibility",
                            "enum": [
                              "private",
                              "protected",
                              "public"
                            ],
                            "$$ref": "#/components/schemas/FileVisibility"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "visibility": {
                              "type": "string",
                              "description": "The file visibility",
                              "enum": [
                                "private",
                                "protected",
                                "public"
                              ],
                              "$$ref": "#/components/schemas/FileVisibility"
                            }
                          },
                          "$$ref": "#/paths/~1file~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listFiles",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/discord/{discordIntegrationId}/delete": {
      "post": {
        "operationId": "deleteDiscordIntegration",
        "summary": "Delete Discord integration",
        "tags": [
          "Discord Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "discordIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Discord integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Discord integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted Discord integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteDiscordIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/discord/{discordIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchDiscordIntegration",
        "summary": "Fetch a discordIntegration",
        "tags": [
          "Discord Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "discordIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Discord integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Discord integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A bot configuration or reference",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "appId": {
                      "description": "The Discord application ID",
                      "type": "string"
                    },
                    "handle": {
                      "description": "The Discord command handle",
                      "type": "string"
                    },
                    "contactCollection": {
                      "description": "Weather to collect contacts",
                      "type": "boolean"
                    },
                    "sessionDuration": {
                      "description": "The chat session duration",
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ],
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "botId": {
                          "type": "string",
                          "description": "The ID of the bot this configuration is using"
                        }
                      },
                      "$$ref": "#/components/schemas/BotRef"
                    },
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "model": {
                          "type": "string",
                          "description": "A model definition",
                          "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                          "example": "gpt-4-turbo/temperature=0.7",
                          "$$ref": "#/components/schemas/Model"
                        },
                        "backstory": {
                          "type": "string",
                          "description": "The backstory this configuration is using"
                        },
                        "datasetId": {
                          "type": "string",
                          "description": "The id of the dataset this configuration is using"
                        },
                        "skillsetId": {
                          "type": "string",
                          "description": "The id of the skillset this configuration is using"
                        },
                        "privacy": {
                          "type": "boolean",
                          "description": "The privacy flag for this configuration"
                        },
                        "moderation": {
                          "type": "boolean",
                          "description": "The moderation flag for this configuration"
                        }
                      },
                      "$$ref": "#/components/schemas/BotConfig"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchDiscordIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/discord/{discordIntegrationId}/setup": {
      "post": {
        "operationId": "setupDiscordIntegration",
        "summary": "Setup Discord integration",
        "tags": [
          "Discord Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "discordIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Discord integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Discord integration was setup successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the setuped Discord integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "setupDiscordIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/discord/{discordIntegrationId}/update": {
      "post": {
        "operationId": "updateDiscordIntegration",
        "summary": "Update a Discord integration",
        "tags": [
          "Discord Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "discordIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Discord integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "appId": {
                    "description": "The Discord application ID",
                    "type": "string"
                  },
                  "botToken": {
                    "description": "The Discord bot token",
                    "type": "string"
                  },
                  "publicKey": {
                    "description": "The Discord public key",
                    "type": "string"
                  },
                  "handle": {
                    "description": "The Discord command handle",
                    "type": "string"
                  },
                  "contactCollection": {
                    "description": "Weather to collect contacts",
                    "type": "boolean"
                  },
                  "sessionDuration": {
                    "description": "The chat session duration",
                    "type": "number"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Discord integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Discord Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateDiscordIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/discord/create": {
      "post": {
        "operationId": "createDiscordIntegration",
        "summary": "Create Discord integration",
        "tags": [
          "Discord Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "appId": {
                    "description": "The Discord application ID",
                    "type": "string"
                  },
                  "botToken": {
                    "description": "The Discord bot token",
                    "type": "string"
                  },
                  "publicKey": {
                    "description": "The Discord public key",
                    "type": "string"
                  },
                  "handle": {
                    "description": "The Discord command handle",
                    "type": "string"
                  },
                  "contactCollection": {
                    "description": "Weather to collect contacts",
                    "type": "boolean"
                  },
                  "sessionDuration": {
                    "description": "The chat session duration",
                    "type": "number"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Discord integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Discord Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createDiscordIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/discord/list": {
      "get": {
        "operationId": "listDiscordIntegrations",
        "summary": "List Discord integrations",
        "tags": [
          "Discord Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Discord integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration or reference",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "appId": {
                            "description": "The Discord application ID",
                            "type": "string"
                          },
                          "handle": {
                            "description": "The Discord command handle",
                            "type": "string"
                          },
                          "contactCollection": {
                            "description": "Weather to collect contacts",
                            "type": "boolean"
                          },
                          "sessionDuration": {
                            "description": "The chat session duration",
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ],
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "botId": {
                                "type": "string",
                                "description": "The ID of the bot this configuration is using"
                              }
                            },
                            "$$ref": "#/components/schemas/BotRef"
                          },
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "A model definition",
                                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                "example": "gpt-4-turbo/temperature=0.7",
                                "$$ref": "#/components/schemas/Model"
                              },
                              "backstory": {
                                "type": "string",
                                "description": "The backstory this configuration is using"
                              },
                              "datasetId": {
                                "type": "string",
                                "description": "The id of the dataset this configuration is using"
                              },
                              "skillsetId": {
                                "type": "string",
                                "description": "The id of the skillset this configuration is using"
                              },
                              "privacy": {
                                "type": "boolean",
                                "description": "The privacy flag for this configuration"
                              },
                              "moderation": {
                                "type": "boolean",
                                "description": "The moderation flag for this configuration"
                              }
                            },
                            "$$ref": "#/components/schemas/BotConfig"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration or reference",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "appId": {
                              "description": "The Discord application ID",
                              "type": "string"
                            },
                            "handle": {
                              "description": "The Discord command handle",
                              "type": "string"
                            },
                            "contactCollection": {
                              "description": "Weather to collect contacts",
                              "type": "boolean"
                            },
                            "sessionDuration": {
                              "description": "The chat session duration",
                              "type": "number"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1discord~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ],
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "botId": {
                                  "type": "string",
                                  "description": "The ID of the bot this configuration is using"
                                }
                              },
                              "$$ref": "#/components/schemas/BotRef"
                            },
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "description": "A model definition",
                                  "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                  "example": "gpt-4-turbo/temperature=0.7",
                                  "$$ref": "#/components/schemas/Model"
                                },
                                "backstory": {
                                  "type": "string",
                                  "description": "The backstory this configuration is using"
                                },
                                "datasetId": {
                                  "type": "string",
                                  "description": "The id of the dataset this configuration is using"
                                },
                                "skillsetId": {
                                  "type": "string",
                                  "description": "The id of the skillset this configuration is using"
                                },
                                "privacy": {
                                  "type": "boolean",
                                  "description": "The privacy flag for this configuration"
                                },
                                "moderation": {
                                  "type": "boolean",
                                  "description": "The moderation flag for this configuration"
                                }
                              },
                              "$$ref": "#/components/schemas/BotConfig"
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listDiscordIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/email/{emailIntegrationId}/delete": {
      "post": {
        "operationId": "deleteEmailIntegration",
        "summary": "Delete Email integration",
        "tags": [
          "Email Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "emailIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Email integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Email integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted Email integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteEmailIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/email/{emailIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchEmailIntegration",
        "summary": "Fetch a emailIntegration",
        "tags": [
          "Email Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "emailIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Email integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Email integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A bot configuration or reference",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "contactCollection": {
                      "description": "Weather to collect contacts",
                      "type": "boolean"
                    },
                    "sessionDuration": {
                      "description": "The session duration (in milliseconds)",
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ],
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "botId": {
                          "type": "string",
                          "description": "The ID of the bot this configuration is using"
                        }
                      },
                      "$$ref": "#/components/schemas/BotRef"
                    },
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "model": {
                          "type": "string",
                          "description": "A model definition",
                          "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                          "example": "gpt-4-turbo/temperature=0.7",
                          "$$ref": "#/components/schemas/Model"
                        },
                        "backstory": {
                          "type": "string",
                          "description": "The backstory this configuration is using"
                        },
                        "datasetId": {
                          "type": "string",
                          "description": "The id of the dataset this configuration is using"
                        },
                        "skillsetId": {
                          "type": "string",
                          "description": "The id of the skillset this configuration is using"
                        },
                        "privacy": {
                          "type": "boolean",
                          "description": "The privacy flag for this configuration"
                        },
                        "moderation": {
                          "type": "boolean",
                          "description": "The moderation flag for this configuration"
                        }
                      },
                      "$$ref": "#/components/schemas/BotConfig"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchEmailIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/email/{emailIntegrationId}/setup": {
      "post": {
        "operationId": "setupEmailIntegration",
        "summary": "Setup a Email integration",
        "tags": [
          "Email Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "emailIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Email integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Email integration was successfully setup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Email Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "setupEmailIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/email/{emailIntegrationId}/update": {
      "post": {
        "operationId": "updateEmailIntegration",
        "summary": "Update a Email integration",
        "tags": [
          "Email Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "emailIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Email integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "contactCollection": {
                    "description": "Weather to collect contacts",
                    "type": "boolean"
                  },
                  "sessionDuration": {
                    "description": "The session duration (in milliseconds)",
                    "type": "number"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Email integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Email Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateEmailIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/email/create": {
      "post": {
        "operationId": "createEmailIntegration",
        "summary": "Create Email integration",
        "tags": [
          "Email Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "contactCollection": {
                    "description": "Weather to collect contacts",
                    "type": "boolean"
                  },
                  "sessionDuration": {
                    "description": "The session duration (in milliseconds)",
                    "type": "number"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Email integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Email Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createEmailIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/email/list": {
      "get": {
        "operationId": "listEmailIntegrations",
        "summary": "List Email integrations",
        "tags": [
          "Email Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Email integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration or reference",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "contactCollection": {
                            "description": "Weather to collect contacts",
                            "type": "boolean"
                          },
                          "sessionDuration": {
                            "description": "The session duration (in milliseconds)",
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ],
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "botId": {
                                "type": "string",
                                "description": "The ID of the bot this configuration is using"
                              }
                            },
                            "$$ref": "#/components/schemas/BotRef"
                          },
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "A model definition",
                                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                "example": "gpt-4-turbo/temperature=0.7",
                                "$$ref": "#/components/schemas/Model"
                              },
                              "backstory": {
                                "type": "string",
                                "description": "The backstory this configuration is using"
                              },
                              "datasetId": {
                                "type": "string",
                                "description": "The id of the dataset this configuration is using"
                              },
                              "skillsetId": {
                                "type": "string",
                                "description": "The id of the skillset this configuration is using"
                              },
                              "privacy": {
                                "type": "boolean",
                                "description": "The privacy flag for this configuration"
                              },
                              "moderation": {
                                "type": "boolean",
                                "description": "The moderation flag for this configuration"
                              }
                            },
                            "$$ref": "#/components/schemas/BotConfig"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration or reference",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "contactCollection": {
                              "description": "Weather to collect contacts",
                              "type": "boolean"
                            },
                            "sessionDuration": {
                              "description": "The session duration (in milliseconds)",
                              "type": "number"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1email~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ],
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "botId": {
                                  "type": "string",
                                  "description": "The ID of the bot this configuration is using"
                                }
                              },
                              "$$ref": "#/components/schemas/BotRef"
                            },
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "description": "A model definition",
                                  "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                  "example": "gpt-4-turbo/temperature=0.7",
                                  "$$ref": "#/components/schemas/Model"
                                },
                                "backstory": {
                                  "type": "string",
                                  "description": "The backstory this configuration is using"
                                },
                                "datasetId": {
                                  "type": "string",
                                  "description": "The id of the dataset this configuration is using"
                                },
                                "skillsetId": {
                                  "type": "string",
                                  "description": "The id of the skillset this configuration is using"
                                },
                                "privacy": {
                                  "type": "boolean",
                                  "description": "The privacy flag for this configuration"
                                },
                                "moderation": {
                                  "type": "boolean",
                                  "description": "The moderation flag for this configuration"
                                }
                              },
                              "$$ref": "#/components/schemas/BotConfig"
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listEmailIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/extract/{extractIntegrationId}/delete": {
      "post": {
        "operationId": "deleteExtractIntegration",
        "summary": "Delete Extract integration",
        "tags": [
          "Extract Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "extractIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Extract integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Extract integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted Extract integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteExtractIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/extract/{extractIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchExtractIntegration",
        "summary": "Fetch a extractIntegration",
        "tags": [
          "Extract Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "extractIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Extract integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Extract integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "botId": {
                      "description": "The ID of the Bot to use",
                      "type": "string"
                    },
                    "schema": {
                      "description": "The configured extraction schema",
                      "type": "object",
                      "additionalProperties": true
                    },
                    "request": {
                      "description": "Optional webhook to receive the extracted data",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "botId"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchExtractIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/extract/{extractIntegrationId}/update": {
      "post": {
        "operationId": "updateExtractIntegration",
        "summary": "Update a Extract integration",
        "tags": [
          "Extract Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "extractIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Extract integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "botId": {
                    "description": "The ID of the Bot to use",
                    "type": "string"
                  },
                  "schema": {
                    "description": "The configured extraction schema",
                    "type": "object",
                    "additionalProperties": true
                  },
                  "request": {
                    "description": "Optional webhook to receive the extracted data",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Extract integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Extract Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateExtractIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/extract/create": {
      "post": {
        "operationId": "createExtractIntegration",
        "summary": "Create Extract integration",
        "tags": [
          "Extract Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "botId": {
                    "description": "The ID of the Bot to use",
                    "type": "string"
                  },
                  "schema": {
                    "description": "The configured extraction schema",
                    "type": "object",
                    "additionalProperties": true
                  },
                  "request": {
                    "description": "Optional webhook to receive the extracted data",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Extract integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Extract Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createExtractIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/extract/list": {
      "get": {
        "operationId": "listExtractIntegrations",
        "summary": "List Extract integrations",
        "tags": [
          "Extract Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Extract integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "botId": {
                            "description": "The ID of the Bot to use",
                            "type": "string"
                          },
                          "schema": {
                            "description": "The configured extraction schema",
                            "type": "object",
                            "additionalProperties": true
                          },
                          "request": {
                            "description": "Optional webhook to receive the extracted data",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "botId"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "botId": {
                              "description": "The ID of the Bot to use",
                              "type": "string"
                            },
                            "schema": {
                              "description": "The configured extraction schema",
                              "type": "object",
                              "additionalProperties": true
                            },
                            "request": {
                              "description": "Optional webhook to receive the extracted data",
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1extract~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "botId"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listExtractIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/messenger/{messengerIntegrationId}/delete": {
      "post": {
        "operationId": "deleteMessengerIntegration",
        "summary": "Delete Messenger integration",
        "tags": [
          "Messenger Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "messengerIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Messenger integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Messenger integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted Messenger integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteMessengerIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/messenger/{messengerIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchMessengerIntegration",
        "summary": "Fetch a messengerIntegration",
        "tags": [
          "Messenger Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "messengerIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Messenger integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Messenger integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A bot configuration or reference",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "verifyToken": {
                      "description": "The Messenger integration verify token",
                      "type": "string"
                    },
                    "sessionDuration": {
                      "description": "The session duration (in milliseconds)",
                      "type": "number"
                    },
                    "attachments": {
                      "description": "Weather the bot supports attachments",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "verifyToken"
                  ],
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "botId": {
                          "type": "string",
                          "description": "The ID of the bot this configuration is using"
                        }
                      },
                      "$$ref": "#/components/schemas/BotRef"
                    },
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "model": {
                          "type": "string",
                          "description": "A model definition",
                          "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                          "example": "gpt-4-turbo/temperature=0.7",
                          "$$ref": "#/components/schemas/Model"
                        },
                        "backstory": {
                          "type": "string",
                          "description": "The backstory this configuration is using"
                        },
                        "datasetId": {
                          "type": "string",
                          "description": "The id of the dataset this configuration is using"
                        },
                        "skillsetId": {
                          "type": "string",
                          "description": "The id of the skillset this configuration is using"
                        },
                        "privacy": {
                          "type": "boolean",
                          "description": "The privacy flag for this configuration"
                        },
                        "moderation": {
                          "type": "boolean",
                          "description": "The moderation flag for this configuration"
                        }
                      },
                      "$$ref": "#/components/schemas/BotConfig"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchMessengerIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/messenger/{messengerIntegrationId}/setup": {
      "post": {
        "operationId": "setupMessengerIntegration",
        "summary": "Setup a Messenger integration",
        "tags": [
          "Messenger Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "messengerIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Messenger integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Messenger integration was successfully setup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Messenger Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "setupMessengerIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/messenger/{messengerIntegrationId}/update": {
      "post": {
        "operationId": "updateMessengerIntegration",
        "summary": "Update a Messenger integration",
        "tags": [
          "Messenger Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "messengerIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Messenger integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "accessToken": {
                    "description": "The Messenger integration access token",
                    "type": "string"
                  },
                  "sessionDuration": {
                    "description": "The session duration (in milliseconds)",
                    "type": "number"
                  },
                  "attachments": {
                    "description": "Weather the bot supports attachments",
                    "type": "boolean"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Messenger integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Messenger Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateMessengerIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/messenger/create": {
      "post": {
        "operationId": "createMessengerIntegration",
        "summary": "Create Messenger integration",
        "tags": [
          "Messenger Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "accessToken": {
                    "description": "The Messenger integration access token",
                    "type": "string"
                  },
                  "sessionDuration": {
                    "description": "The session duration (in milliseconds)",
                    "type": "number"
                  },
                  "attachments": {
                    "description": "Weather the bot supports attachments",
                    "type": "boolean"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Messenger integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Messenger Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createMessengerIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/messenger/list": {
      "get": {
        "operationId": "listMessengerIntegrations",
        "summary": "List Messenger integrations",
        "tags": [
          "Messenger Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Messenger integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration or reference",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "verifyToken": {
                            "description": "The Messenger integration verify token",
                            "type": "string"
                          },
                          "sessionDuration": {
                            "description": "The session duration (in milliseconds)",
                            "type": "number"
                          },
                          "attachments": {
                            "description": "Weather the bot supports attachments",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "verifyToken"
                        ],
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "botId": {
                                "type": "string",
                                "description": "The ID of the bot this configuration is using"
                              }
                            },
                            "$$ref": "#/components/schemas/BotRef"
                          },
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "A model definition",
                                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                "example": "gpt-4-turbo/temperature=0.7",
                                "$$ref": "#/components/schemas/Model"
                              },
                              "backstory": {
                                "type": "string",
                                "description": "The backstory this configuration is using"
                              },
                              "datasetId": {
                                "type": "string",
                                "description": "The id of the dataset this configuration is using"
                              },
                              "skillsetId": {
                                "type": "string",
                                "description": "The id of the skillset this configuration is using"
                              },
                              "privacy": {
                                "type": "boolean",
                                "description": "The privacy flag for this configuration"
                              },
                              "moderation": {
                                "type": "boolean",
                                "description": "The moderation flag for this configuration"
                              }
                            },
                            "$$ref": "#/components/schemas/BotConfig"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration or reference",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "verifyToken": {
                              "description": "The Messenger integration verify token",
                              "type": "string"
                            },
                            "sessionDuration": {
                              "description": "The session duration (in milliseconds)",
                              "type": "number"
                            },
                            "attachments": {
                              "description": "Weather the bot supports attachments",
                              "type": "boolean"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1messenger~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "verifyToken"
                          ],
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "botId": {
                                  "type": "string",
                                  "description": "The ID of the bot this configuration is using"
                                }
                              },
                              "$$ref": "#/components/schemas/BotRef"
                            },
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "description": "A model definition",
                                  "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                  "example": "gpt-4-turbo/temperature=0.7",
                                  "$$ref": "#/components/schemas/Model"
                                },
                                "backstory": {
                                  "type": "string",
                                  "description": "The backstory this configuration is using"
                                },
                                "datasetId": {
                                  "type": "string",
                                  "description": "The id of the dataset this configuration is using"
                                },
                                "skillsetId": {
                                  "type": "string",
                                  "description": "The id of the skillset this configuration is using"
                                },
                                "privacy": {
                                  "type": "boolean",
                                  "description": "The privacy flag for this configuration"
                                },
                                "moderation": {
                                  "type": "boolean",
                                  "description": "The moderation flag for this configuration"
                                }
                              },
                              "$$ref": "#/components/schemas/BotConfig"
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listMessengerIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/notion/{notionIntegrationId}/delete": {
      "post": {
        "operationId": "deleteNotionIntegration",
        "summary": "Delete Notion integration",
        "tags": [
          "Notion Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "notionIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Notion integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Notion integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted Notion integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteNotionIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/notion/{notionIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchNotionIntegration",
        "summary": "Fetch a notionIntegration",
        "tags": [
          "Notion Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "notionIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Notion integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Notion integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "datasetId": {
                      "description": "The ID of the dataset to sync into",
                      "type": "string"
                    },
                    "token": {
                      "description": "The Notion API token",
                      "type": "string"
                    },
                    "syncSchedule": {
                      "description": "The sync schedule",
                      "type": "string"
                    },
                    "expiresIn": {
                      "description": "The time in milliseconds until records expire",
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "datasetId"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchNotionIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/notion/{notionIntegrationId}/sync": {
      "post": {
        "operationId": "syncNotionIntegration",
        "summary": "Sync Notion integration",
        "tags": [
          "Notion Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "notionIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Notion integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Notion integration was synced successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the synced Notion integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "syncNotionIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/notion/{notionIntegrationId}/update": {
      "post": {
        "operationId": "updateNotionIntegration",
        "summary": "Update a Notion integration",
        "tags": [
          "Notion Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "notionIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Notion integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "datasetId": {
                    "description": "The ID of the dataset to sync into",
                    "type": "string"
                  },
                  "token": {
                    "description": "The Notion API token",
                    "type": "string"
                  },
                  "syncSchedule": {
                    "description": "The sync schedule",
                    "type": "string"
                  },
                  "expiresIn": {
                    "description": "The time in milliseconds until records expire",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Notion integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Notion Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateNotionIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/notion/create": {
      "post": {
        "operationId": "createNotionIntegration",
        "summary": "Create Notion integration",
        "tags": [
          "Notion Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "datasetId": {
                    "description": "The ID of the dataset to sync into",
                    "type": "string"
                  },
                  "token": {
                    "description": "The Notion API token",
                    "type": "string"
                  },
                  "syncSchedule": {
                    "description": "The sync schedule",
                    "type": "string"
                  },
                  "expiresIn": {
                    "description": "The time in milliseconds until records expire",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Notion integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Notion Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createNotionIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/notion/list": {
      "get": {
        "operationId": "listNotionIntegrations",
        "summary": "List Notion integrations",
        "tags": [
          "Notion Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Notion integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "datasetId": {
                            "description": "The ID of the dataset to sync into",
                            "type": "string"
                          },
                          "token": {
                            "description": "The Notion API token",
                            "type": "string"
                          },
                          "syncSchedule": {
                            "description": "The sync schedule",
                            "type": "string"
                          },
                          "expiresIn": {
                            "description": "The time in milliseconds until records expire",
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "datasetId"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "datasetId": {
                              "description": "The ID of the dataset to sync into",
                              "type": "string"
                            },
                            "token": {
                              "description": "The Notion API token",
                              "type": "string"
                            },
                            "syncSchedule": {
                              "description": "The sync schedule",
                              "type": "string"
                            },
                            "expiresIn": {
                              "description": "The time in milliseconds until records expire",
                              "type": "number"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1notion~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "datasetId"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listNotionIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/sitemap/{sitemapIntegrationId}/delete": {
      "post": {
        "operationId": "deleteSitemapIntegration",
        "summary": "Delete Sitemap integration",
        "tags": [
          "Sitemap Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sitemapIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Sitemap integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Sitemap integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted Sitemap integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteSitemapIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/sitemap/{sitemapIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchSitemapIntegration",
        "summary": "Fetch a sitemapIntegration",
        "tags": [
          "Sitemap Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sitemapIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Sitemap integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Sitemap integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "datasetId": {
                      "description": "The ID of the dataset used in the Sitemap integration",
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL to use for this Sitemap integration",
                      "type": "string"
                    },
                    "glob": {
                      "description": "The glob rules to use for this Sitemap integration",
                      "type": "string"
                    },
                    "selectors": {
                      "description": "The selector rules to use for this Sitemap integration",
                      "type": "string"
                    },
                    "javascript": {
                      "description": "Indicates if the Sitemap integration should use JavaScript during the spidering process",
                      "type": "boolean"
                    },
                    "syncSchedule": {
                      "description": "The sync schedule to use for this Sitemap integration",
                      "type": "string"
                    },
                    "expiresIn": {
                      "description": "Record expiry in milliseconds",
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "datasetId"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchSitemapIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/sitemap/{sitemapIntegrationId}/sync": {
      "post": {
        "operationId": "syncSitemapIntegration",
        "summary": "Sync a Sitemap integration",
        "tags": [
          "Sitemap Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sitemapIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Sitemap integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Sitemap integration was scheduled for syncing successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Sitemap Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "syncSitemapIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/sitemap/{sitemapIntegrationId}/update": {
      "post": {
        "operationId": "updateSitemapIntegration",
        "summary": "Update a Sitemap integration",
        "tags": [
          "Sitemap Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sitemapIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Sitemap integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "datasetId": {
                    "description": "The ID of the dataset to use for this Sitemap integration",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL to use for this Sitemap integration",
                    "type": "string"
                  },
                  "glob": {
                    "description": "The glob rules to use for this Sitemap integration",
                    "type": "string"
                  },
                  "selectors": {
                    "description": "The selector rules to use for this Sitemap integration",
                    "type": "string"
                  },
                  "javascript": {
                    "description": "Indicates if the Sitemap integration should use JavaScript during the spidering process",
                    "type": "boolean"
                  },
                  "syncSchedule": {
                    "description": "The sync schedule to use for this Sitemap integration",
                    "type": "string"
                  },
                  "expiresIn": {
                    "description": "Record expiry in milliseconds",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Sitemap integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Sitemap Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateSitemapIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/sitemap/create": {
      "post": {
        "operationId": "createSitemapIntegration",
        "summary": "Create Sitemap integration",
        "tags": [
          "Sitemap Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "datasetId": {
                    "description": "The ID of the dataset to use for this Sitemap integration",
                    "type": "string"
                  },
                  "url": {
                    "description": "The URL to use for this Sitemap integration",
                    "type": "string"
                  },
                  "glob": {
                    "description": "The glob rules to use for this Sitemap integration",
                    "type": "string"
                  },
                  "selectors": {
                    "description": "The selector rules to use for this Sitemap integration",
                    "type": "string"
                  },
                  "javascript": {
                    "description": "Indicates if the Sitemap integration should use JavaScript during the spidering process",
                    "type": "boolean"
                  },
                  "syncSchedule": {
                    "description": "The sync schedule to use for this Sitemap integration",
                    "type": "string"
                  },
                  "expiresIn": {
                    "description": "Record expiry in milliseconds",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Sitemap integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Sitemap Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createSitemapIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/sitemap/list": {
      "get": {
        "operationId": "listSitemapIntegrations",
        "summary": "List Sitemap integrations",
        "tags": [
          "Sitemap Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Sitemap integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "datasetId": {
                            "description": "The ID of the dataset used in the Sitemap integration",
                            "type": "string"
                          },
                          "url": {
                            "description": "The URL to use for this Sitemap integration",
                            "type": "string"
                          },
                          "glob": {
                            "description": "The glob rules to use for this Sitemap integration",
                            "type": "string"
                          },
                          "selectors": {
                            "description": "The selector rules to use for this Sitemap integration",
                            "type": "string"
                          },
                          "javascript": {
                            "description": "Indicates if the Sitemap integration should use JavaScript during the spidering process",
                            "type": "boolean"
                          },
                          "syncSchedule": {
                            "description": "The sync schedule to use for this Sitemap integration",
                            "type": "string"
                          },
                          "expiresIn": {
                            "description": "Record expiry in milliseconds",
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "datasetId"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "datasetId": {
                              "description": "The ID of the dataset used in the Sitemap integration",
                              "type": "string"
                            },
                            "url": {
                              "description": "The URL to use for this Sitemap integration",
                              "type": "string"
                            },
                            "glob": {
                              "description": "The glob rules to use for this Sitemap integration",
                              "type": "string"
                            },
                            "selectors": {
                              "description": "The selector rules to use for this Sitemap integration",
                              "type": "string"
                            },
                            "javascript": {
                              "description": "Indicates if the Sitemap integration should use JavaScript during the spidering process",
                              "type": "boolean"
                            },
                            "syncSchedule": {
                              "description": "The sync schedule to use for this Sitemap integration",
                              "type": "string"
                            },
                            "expiresIn": {
                              "description": "Record expiry in milliseconds",
                              "type": "number"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1sitemap~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "datasetId"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listSitemapIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/slack/{slackIntegrationId}/delete": {
      "post": {
        "operationId": "deleteSlackIntegration",
        "summary": "Delete Slack integration",
        "tags": [
          "Slack Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slackIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Slack integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Slack integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted Slack integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteSlackIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/slack/{slackIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchSlackIntegration",
        "summary": "Fetch a slackIntegration",
        "tags": [
          "Slack Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slackIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Slack integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Slack integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A bot configuration or reference",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "contactCollection": {
                      "description": "Weather to collect contacts",
                      "type": "boolean"
                    },
                    "sessionDuration": {
                      "description": "The session duration for the Slack integration",
                      "type": "number"
                    },
                    "visibleMessages": {
                      "description": "The number of visible messages outside of the new thread",
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ],
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "botId": {
                          "type": "string",
                          "description": "The ID of the bot this configuration is using"
                        }
                      },
                      "$$ref": "#/components/schemas/BotRef"
                    },
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "model": {
                          "type": "string",
                          "description": "A model definition",
                          "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                          "example": "gpt-4-turbo/temperature=0.7",
                          "$$ref": "#/components/schemas/Model"
                        },
                        "backstory": {
                          "type": "string",
                          "description": "The backstory this configuration is using"
                        },
                        "datasetId": {
                          "type": "string",
                          "description": "The id of the dataset this configuration is using"
                        },
                        "skillsetId": {
                          "type": "string",
                          "description": "The id of the skillset this configuration is using"
                        },
                        "privacy": {
                          "type": "boolean",
                          "description": "The privacy flag for this configuration"
                        },
                        "moderation": {
                          "type": "boolean",
                          "description": "The moderation flag for this configuration"
                        }
                      },
                      "$$ref": "#/components/schemas/BotConfig"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchSlackIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/slack/{slackIntegrationId}/setup": {
      "post": {
        "operationId": "setupSlackIntegration",
        "summary": "Setup Slack integration",
        "tags": [
          "Slack Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slackIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Slack integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Slack integration was setuped successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the setuped Slack integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "setupSlackIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/slack/{slackIntegrationId}/update": {
      "post": {
        "operationId": "updateSlackIntegration",
        "summary": "Update a Slack integration",
        "tags": [
          "Slack Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slackIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Slack integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "signingSecret": {
                    "description": "The signing secret for the Slack integration",
                    "type": "string"
                  },
                  "botToken": {
                    "description": "The bot token for the Slack integration",
                    "type": "string"
                  },
                  "contactCollection": {
                    "description": "Weather to collect contacts",
                    "type": "boolean"
                  },
                  "sessionDuration": {
                    "description": "The session duration for the Slack integration",
                    "type": "number"
                  },
                  "visibleMessages": {
                    "description": "The number of visible messages outside of the new thread",
                    "type": "number"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Slack integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Slack Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateSlackIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/slack/create": {
      "post": {
        "operationId": "createSlackIntegration",
        "summary": "Create Slack integration",
        "tags": [
          "Slack Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "signingSecret": {
                    "description": "The signing secret for the Slack integration",
                    "type": "string"
                  },
                  "botToken": {
                    "description": "The bot token for the Slack integration",
                    "type": "string"
                  },
                  "sessionDuration": {
                    "description": "The session duration for the Slack integration",
                    "type": "number"
                  },
                  "contactCollection": {
                    "description": "Weather to collect contacts",
                    "type": "boolean"
                  },
                  "visibleMessages": {
                    "description": "The number of visible messages outside of the new thread",
                    "type": "number"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Slack integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Slack Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createSlackIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/slack/list": {
      "get": {
        "operationId": "listSlackIntegrations",
        "summary": "List Slack integrations",
        "tags": [
          "Slack Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Slack integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration or reference",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "contactCollection": {
                            "description": "Weather to collect contacts",
                            "type": "boolean"
                          },
                          "sessionDuration": {
                            "description": "The session duration for the Slack integration",
                            "type": "number"
                          },
                          "visibleMessages": {
                            "description": "The number of visible messages outside of the new thread",
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ],
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "botId": {
                                "type": "string",
                                "description": "The ID of the bot this configuration is using"
                              }
                            },
                            "$$ref": "#/components/schemas/BotRef"
                          },
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "A model definition",
                                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                "example": "gpt-4-turbo/temperature=0.7",
                                "$$ref": "#/components/schemas/Model"
                              },
                              "backstory": {
                                "type": "string",
                                "description": "The backstory this configuration is using"
                              },
                              "datasetId": {
                                "type": "string",
                                "description": "The id of the dataset this configuration is using"
                              },
                              "skillsetId": {
                                "type": "string",
                                "description": "The id of the skillset this configuration is using"
                              },
                              "privacy": {
                                "type": "boolean",
                                "description": "The privacy flag for this configuration"
                              },
                              "moderation": {
                                "type": "boolean",
                                "description": "The moderation flag for this configuration"
                              }
                            },
                            "$$ref": "#/components/schemas/BotConfig"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration or reference",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "contactCollection": {
                              "description": "Weather to collect contacts",
                              "type": "boolean"
                            },
                            "sessionDuration": {
                              "description": "The session duration for the Slack integration",
                              "type": "number"
                            },
                            "visibleMessages": {
                              "description": "The number of visible messages outside of the new thread",
                              "type": "number"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1slack~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ],
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "botId": {
                                  "type": "string",
                                  "description": "The ID of the bot this configuration is using"
                                }
                              },
                              "$$ref": "#/components/schemas/BotRef"
                            },
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "description": "A model definition",
                                  "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                  "example": "gpt-4-turbo/temperature=0.7",
                                  "$$ref": "#/components/schemas/Model"
                                },
                                "backstory": {
                                  "type": "string",
                                  "description": "The backstory this configuration is using"
                                },
                                "datasetId": {
                                  "type": "string",
                                  "description": "The id of the dataset this configuration is using"
                                },
                                "skillsetId": {
                                  "type": "string",
                                  "description": "The id of the skillset this configuration is using"
                                },
                                "privacy": {
                                  "type": "boolean",
                                  "description": "The privacy flag for this configuration"
                                },
                                "moderation": {
                                  "type": "boolean",
                                  "description": "The moderation flag for this configuration"
                                }
                              },
                              "$$ref": "#/components/schemas/BotConfig"
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listSlackIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/support/{supportIntegrationId}/delete": {
      "post": {
        "operationId": "deleteSupportIntegration",
        "summary": "Delete Support integration",
        "tags": [
          "Support Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "supportIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Support integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Support integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted Support integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteSupportIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/support/{supportIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchSupportIntegration",
        "summary": "Fetch a supportIntegration",
        "tags": [
          "Support Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "supportIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Support integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Support integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "botId": {
                      "description": "The ID of the Bot to use",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email to use",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "botId"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchSupportIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/support/{supportIntegrationId}/update": {
      "post": {
        "operationId": "updateSupportIntegration",
        "summary": "Update a Support integration",
        "tags": [
          "Support Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "supportIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Support integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "botId": {
                    "description": "The ID of the Bot to use",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email to use",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Support integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Support Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateSupportIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/support/create": {
      "post": {
        "operationId": "createSupportIntegration",
        "summary": "Create Support integration",
        "tags": [
          "Support Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "botId": {
                    "description": "The ID of the Bot to use",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email to use",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Support integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Support Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createSupportIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/support/list": {
      "get": {
        "operationId": "listSupportIntegrations",
        "summary": "List Support integrations",
        "tags": [
          "Support Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Support integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "botId": {
                            "description": "The ID of the Bot to use",
                            "type": "string"
                          },
                          "email": {
                            "description": "The email to use",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "botId"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "botId": {
                              "description": "The ID of the Bot to use",
                              "type": "string"
                            },
                            "email": {
                              "description": "The email to use",
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1support~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "botId"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listSupportIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/telegram/{telegramIntegrationId}/delete": {
      "post": {
        "operationId": "deleteTelegramIntegration",
        "summary": "Delete Telegram integration",
        "tags": [
          "Telegram Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "telegramIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Telegram integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Telegram integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted Telegram integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteTelegramIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/telegram/{telegramIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchTelegramIntegration",
        "summary": "Fetch a telegramIntegration",
        "tags": [
          "Telegram Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "telegramIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Telegram integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Telegram integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A bot configuration or reference",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "contactCollection": {
                      "description": "Weather to collect contacts",
                      "type": "boolean"
                    },
                    "sessionDuration": {
                      "description": "The session duration (in milliseconds)",
                      "type": "number"
                    },
                    "attachments": {
                      "description": "Weather the bot supports attachments",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ],
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "botId": {
                          "type": "string",
                          "description": "The ID of the bot this configuration is using"
                        }
                      },
                      "$$ref": "#/components/schemas/BotRef"
                    },
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "model": {
                          "type": "string",
                          "description": "A model definition",
                          "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                          "example": "gpt-4-turbo/temperature=0.7",
                          "$$ref": "#/components/schemas/Model"
                        },
                        "backstory": {
                          "type": "string",
                          "description": "The backstory this configuration is using"
                        },
                        "datasetId": {
                          "type": "string",
                          "description": "The id of the dataset this configuration is using"
                        },
                        "skillsetId": {
                          "type": "string",
                          "description": "The id of the skillset this configuration is using"
                        },
                        "privacy": {
                          "type": "boolean",
                          "description": "The privacy flag for this configuration"
                        },
                        "moderation": {
                          "type": "boolean",
                          "description": "The moderation flag for this configuration"
                        }
                      },
                      "$$ref": "#/components/schemas/BotConfig"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchTelegramIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/telegram/{telegramIntegrationId}/setup": {
      "post": {
        "operationId": "setupTelegramIntegration",
        "summary": "Setup a Telegram integration",
        "tags": [
          "Telegram Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "telegramIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Telegram integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Telegram integration was successfully setup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Telegram Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "setupTelegramIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/telegram/{telegramIntegrationId}/update": {
      "post": {
        "operationId": "updateTelegramIntegration",
        "summary": "Update a Telegram integration",
        "tags": [
          "Telegram Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "telegramIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Telegram integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "botToken": {
                    "description": "The Telegram integration bot token",
                    "type": "string"
                  },
                  "contactCollection": {
                    "description": "Weather to collect contacts",
                    "type": "boolean"
                  },
                  "sessionDuration": {
                    "description": "The session duration (in milliseconds)",
                    "type": "number"
                  },
                  "attachments": {
                    "description": "Weather the bot supports attachments",
                    "type": "boolean"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Telegram integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Telegram Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateTelegramIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/telegram/create": {
      "post": {
        "operationId": "createTelegramIntegration",
        "summary": "Create Telegram integration",
        "tags": [
          "Telegram Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "botToken": {
                    "description": "The Telegram integration bot token",
                    "type": "string"
                  },
                  "contactCollection": {
                    "description": "Weather to collect contacts",
                    "type": "boolean"
                  },
                  "sessionDuration": {
                    "description": "The session duration (in milliseconds)",
                    "type": "number"
                  },
                  "attachments": {
                    "description": "Weather the bot supports attachments",
                    "type": "boolean"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Telegram integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Telegram Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createTelegramIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/telegram/list": {
      "get": {
        "operationId": "listTelegramIntegrations",
        "summary": "List Telegram integrations",
        "tags": [
          "Telegram Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Telegram integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration or reference",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "contactCollection": {
                            "description": "Weather to collect contacts",
                            "type": "boolean"
                          },
                          "sessionDuration": {
                            "description": "The session duration (in milliseconds)",
                            "type": "number"
                          },
                          "attachments": {
                            "description": "Weather the bot supports attachments",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ],
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "botId": {
                                "type": "string",
                                "description": "The ID of the bot this configuration is using"
                              }
                            },
                            "$$ref": "#/components/schemas/BotRef"
                          },
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "A model definition",
                                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                "example": "gpt-4-turbo/temperature=0.7",
                                "$$ref": "#/components/schemas/Model"
                              },
                              "backstory": {
                                "type": "string",
                                "description": "The backstory this configuration is using"
                              },
                              "datasetId": {
                                "type": "string",
                                "description": "The id of the dataset this configuration is using"
                              },
                              "skillsetId": {
                                "type": "string",
                                "description": "The id of the skillset this configuration is using"
                              },
                              "privacy": {
                                "type": "boolean",
                                "description": "The privacy flag for this configuration"
                              },
                              "moderation": {
                                "type": "boolean",
                                "description": "The moderation flag for this configuration"
                              }
                            },
                            "$$ref": "#/components/schemas/BotConfig"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration or reference",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "contactCollection": {
                              "description": "Weather to collect contacts",
                              "type": "boolean"
                            },
                            "sessionDuration": {
                              "description": "The session duration (in milliseconds)",
                              "type": "number"
                            },
                            "attachments": {
                              "description": "Weather the bot supports attachments",
                              "type": "boolean"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1telegram~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ],
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "botId": {
                                  "type": "string",
                                  "description": "The ID of the bot this configuration is using"
                                }
                              },
                              "$$ref": "#/components/schemas/BotRef"
                            },
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "description": "A model definition",
                                  "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                  "example": "gpt-4-turbo/temperature=0.7",
                                  "$$ref": "#/components/schemas/Model"
                                },
                                "backstory": {
                                  "type": "string",
                                  "description": "The backstory this configuration is using"
                                },
                                "datasetId": {
                                  "type": "string",
                                  "description": "The id of the dataset this configuration is using"
                                },
                                "skillsetId": {
                                  "type": "string",
                                  "description": "The id of the skillset this configuration is using"
                                },
                                "privacy": {
                                  "type": "boolean",
                                  "description": "The privacy flag for this configuration"
                                },
                                "moderation": {
                                  "type": "boolean",
                                  "description": "The moderation flag for this configuration"
                                }
                              },
                              "$$ref": "#/components/schemas/BotConfig"
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listTelegramIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/trigger/{triggerIntegrationId}/delete": {
      "post": {
        "operationId": "deleteTriggerIntegration",
        "summary": "Delete Trigger integration",
        "tags": [
          "Trigger Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "triggerIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Trigger integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Trigger integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted Trigger integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteTriggerIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/trigger/{triggerIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchTriggerIntegration",
        "summary": "Fetch a triggerIntegration",
        "tags": [
          "Trigger Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "triggerIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Trigger integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Trigger integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A bot configuration or reference",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "secret": {
                      "description": "The Trigger integration secret",
                      "type": "string"
                    },
                    "authenticate": {
                      "description": "When enabled the integration requires authentication",
                      "type": "boolean"
                    },
                    "triggerSchedule": {
                      "type": "string",
                      "description": "The schedule",
                      "enum": [
                        "never",
                        "quarterhourly",
                        "halfhourly",
                        "hourly",
                        "daily",
                        "weekly",
                        "monthly"
                      ],
                      "$$ref": "#/components/schemas/Schedule"
                    },
                    "sessionDuration": {
                      "description": "The session duration (in milliseconds)",
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "secret"
                  ],
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "botId": {
                          "type": "string",
                          "description": "The ID of the bot this configuration is using"
                        }
                      },
                      "$$ref": "#/components/schemas/BotRef"
                    },
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "model": {
                          "type": "string",
                          "description": "A model definition",
                          "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                          "example": "gpt-4-turbo/temperature=0.7",
                          "$$ref": "#/components/schemas/Model"
                        },
                        "backstory": {
                          "type": "string",
                          "description": "The backstory this configuration is using"
                        },
                        "datasetId": {
                          "type": "string",
                          "description": "The id of the dataset this configuration is using"
                        },
                        "skillsetId": {
                          "type": "string",
                          "description": "The id of the skillset this configuration is using"
                        },
                        "privacy": {
                          "type": "boolean",
                          "description": "The privacy flag for this configuration"
                        },
                        "moderation": {
                          "type": "boolean",
                          "description": "The moderation flag for this configuration"
                        }
                      },
                      "$$ref": "#/components/schemas/BotConfig"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchTriggerIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/trigger/{triggerIntegrationId}/invoke": {
      "post": {
        "operationId": "invokeTriggerIntegration",
        "summary": "Invoke Trigger integration",
        "tags": [
          "Trigger Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "triggerIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Trigger integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Trigger integration was trigged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the trigged Trigger integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "invokeTriggerIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/trigger/{triggerIntegrationId}/setup": {
      "post": {
        "operationId": "setupTriggerIntegration",
        "summary": "Setup a Trigger integration",
        "tags": [
          "Trigger Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "triggerIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Trigger integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Trigger integration was successfully setup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Trigger Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "setupTriggerIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/trigger/{triggerIntegrationId}/update": {
      "post": {
        "operationId": "updateTriggerIntegration",
        "summary": "Update a Trigger integration",
        "tags": [
          "Trigger Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "triggerIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Trigger integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "authenticate": {
                    "description": "When enabled the integration requires authentication",
                    "type": "boolean"
                  },
                  "triggerSchedule": {
                    "type": "string",
                    "description": "The schedule",
                    "enum": [
                      "never",
                      "quarterhourly",
                      "halfhourly",
                      "hourly",
                      "daily",
                      "weekly",
                      "monthly"
                    ],
                    "$$ref": "#/components/schemas/Schedule"
                  },
                  "sessionDuration": {
                    "description": "The session duration (in milliseconds)",
                    "type": "number"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Trigger integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Trigger Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateTriggerIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/trigger/create": {
      "post": {
        "operationId": "createTriggerIntegration",
        "summary": "Create Trigger integration",
        "tags": [
          "Trigger Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "authenticate": {
                    "description": "When enabled the integration requires authentication",
                    "type": "boolean"
                  },
                  "triggerSchedule": {
                    "type": "string",
                    "description": "The schedule",
                    "enum": [
                      "never",
                      "quarterhourly",
                      "halfhourly",
                      "hourly",
                      "daily",
                      "weekly",
                      "monthly"
                    ],
                    "$$ref": "#/components/schemas/Schedule"
                  },
                  "sessionDuration": {
                    "description": "The session duration (in milliseconds)",
                    "type": "number"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Trigger integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Trigger Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createTriggerIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/trigger/list": {
      "get": {
        "operationId": "listTriggerIntegrations",
        "summary": "List Trigger integrations",
        "tags": [
          "Trigger Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Trigger integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration or reference",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "secret": {
                            "description": "The Trigger integration secret",
                            "type": "string"
                          },
                          "authenticate": {
                            "description": "When enabled the integration requires authentication",
                            "type": "boolean"
                          },
                          "triggerSchedule": {
                            "type": "string",
                            "description": "The schedule",
                            "enum": [
                              "never",
                              "quarterhourly",
                              "halfhourly",
                              "hourly",
                              "daily",
                              "weekly",
                              "monthly"
                            ],
                            "$$ref": "#/components/schemas/Schedule"
                          },
                          "sessionDuration": {
                            "description": "The session duration (in milliseconds)",
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "secret"
                        ],
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "botId": {
                                "type": "string",
                                "description": "The ID of the bot this configuration is using"
                              }
                            },
                            "$$ref": "#/components/schemas/BotRef"
                          },
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "A model definition",
                                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                "example": "gpt-4-turbo/temperature=0.7",
                                "$$ref": "#/components/schemas/Model"
                              },
                              "backstory": {
                                "type": "string",
                                "description": "The backstory this configuration is using"
                              },
                              "datasetId": {
                                "type": "string",
                                "description": "The id of the dataset this configuration is using"
                              },
                              "skillsetId": {
                                "type": "string",
                                "description": "The id of the skillset this configuration is using"
                              },
                              "privacy": {
                                "type": "boolean",
                                "description": "The privacy flag for this configuration"
                              },
                              "moderation": {
                                "type": "boolean",
                                "description": "The moderation flag for this configuration"
                              }
                            },
                            "$$ref": "#/components/schemas/BotConfig"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration or reference",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "secret": {
                              "description": "The Trigger integration secret",
                              "type": "string"
                            },
                            "authenticate": {
                              "description": "When enabled the integration requires authentication",
                              "type": "boolean"
                            },
                            "triggerSchedule": {
                              "type": "string",
                              "description": "The schedule",
                              "enum": [
                                "never",
                                "quarterhourly",
                                "halfhourly",
                                "hourly",
                                "daily",
                                "weekly",
                                "monthly"
                              ],
                              "$$ref": "#/components/schemas/Schedule"
                            },
                            "sessionDuration": {
                              "description": "The session duration (in milliseconds)",
                              "type": "number"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1trigger~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "secret"
                          ],
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "botId": {
                                  "type": "string",
                                  "description": "The ID of the bot this configuration is using"
                                }
                              },
                              "$$ref": "#/components/schemas/BotRef"
                            },
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "description": "A model definition",
                                  "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                  "example": "gpt-4-turbo/temperature=0.7",
                                  "$$ref": "#/components/schemas/Model"
                                },
                                "backstory": {
                                  "type": "string",
                                  "description": "The backstory this configuration is using"
                                },
                                "datasetId": {
                                  "type": "string",
                                  "description": "The id of the dataset this configuration is using"
                                },
                                "skillsetId": {
                                  "type": "string",
                                  "description": "The id of the skillset this configuration is using"
                                },
                                "privacy": {
                                  "type": "boolean",
                                  "description": "The privacy flag for this configuration"
                                },
                                "moderation": {
                                  "type": "boolean",
                                  "description": "The moderation flag for this configuration"
                                }
                              },
                              "$$ref": "#/components/schemas/BotConfig"
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listTriggerIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/whatsapp/{whatsappIntegrationId}/delete": {
      "post": {
        "operationId": "deleteWhatsAppIntegration",
        "summary": "Delete WhatsApp integration",
        "tags": [
          "WhatsApp Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "whatsappIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the WhatsApp integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The WhatsApp integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted WhatsApp integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteWhatsAppIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/whatsapp/{whatsappIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchWhatsAppIntegration",
        "summary": "Fetch a whatsappIntegration",
        "tags": [
          "WhatsApp Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "whatsappIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the WhatsApp integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The WhatsApp integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A bot configuration or reference",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "verifyToken": {
                      "description": "The WhatsApp integration verify token",
                      "type": "string"
                    },
                    "phoneNumberId": {
                      "description": "The WhatsApp integration phone number ID",
                      "type": "string"
                    },
                    "contactCollection": {
                      "description": "Weather to collect contacts",
                      "type": "boolean"
                    },
                    "sessionDuration": {
                      "description": "The session duration (in milliseconds)",
                      "type": "number"
                    },
                    "attachments": {
                      "description": "Weather the bot supports attachments",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "verifyToken"
                  ],
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "botId": {
                          "type": "string",
                          "description": "The ID of the bot this configuration is using"
                        }
                      },
                      "$$ref": "#/components/schemas/BotRef"
                    },
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "model": {
                          "type": "string",
                          "description": "A model definition",
                          "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                          "example": "gpt-4-turbo/temperature=0.7",
                          "$$ref": "#/components/schemas/Model"
                        },
                        "backstory": {
                          "type": "string",
                          "description": "The backstory this configuration is using"
                        },
                        "datasetId": {
                          "type": "string",
                          "description": "The id of the dataset this configuration is using"
                        },
                        "skillsetId": {
                          "type": "string",
                          "description": "The id of the skillset this configuration is using"
                        },
                        "privacy": {
                          "type": "boolean",
                          "description": "The privacy flag for this configuration"
                        },
                        "moderation": {
                          "type": "boolean",
                          "description": "The moderation flag for this configuration"
                        }
                      },
                      "$$ref": "#/components/schemas/BotConfig"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchWhatsAppIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/whatsapp/{whatsappIntegrationId}/setup": {
      "post": {
        "operationId": "setupWhatsAppIntegration",
        "summary": "Setup a WhatsApp integration",
        "tags": [
          "WhatsApp Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "whatsappIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the WhatsApp integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The WhatsApp integration was successfully setup",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the WhatsApp Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "setupWhatsAppIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/whatsapp/{whatsappIntegrationId}/update": {
      "post": {
        "operationId": "updateWhatsAppIntegration",
        "summary": "Update a WhatsApp integration",
        "tags": [
          "WhatsApp Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "whatsappIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the WhatsApp integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "phoneNumberId": {
                    "description": "The WhatsApp integration phone number ID",
                    "type": "string"
                  },
                  "accessToken": {
                    "description": "The WhatsApp integration access token",
                    "type": "string"
                  },
                  "contactCollection": {
                    "description": "Weather to collect contacts",
                    "type": "boolean"
                  },
                  "sessionDuration": {
                    "description": "The session duration (in milliseconds)",
                    "type": "number"
                  },
                  "attachments": {
                    "description": "Weather the bot supports attachments",
                    "type": "boolean"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The WhatsApp integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the WhatsApp Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateWhatsAppIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/whatsapp/create": {
      "post": {
        "operationId": "createWhatsAppIntegration",
        "summary": "Create WhatsApp integration",
        "tags": [
          "WhatsApp Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "phoneNumberId": {
                    "description": "The WhatsApp integration phone number ID",
                    "type": "string"
                  },
                  "accessToken": {
                    "description": "The WhatsApp integration access token",
                    "type": "string"
                  },
                  "contactCollection": {
                    "description": "Weather to collect contacts",
                    "type": "boolean"
                  },
                  "sessionDuration": {
                    "description": "The session duration (in milliseconds)",
                    "type": "number"
                  },
                  "attachments": {
                    "description": "Weather the bot supports attachments",
                    "type": "boolean"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The WhatsApp integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the WhatsApp Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createWhatsAppIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/whatsapp/list": {
      "get": {
        "operationId": "listWhatsAppIntegrations",
        "summary": "List WhatsApp integrations",
        "tags": [
          "WhatsApp Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of WhatsApp integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration or reference",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "verifyToken": {
                            "description": "The WhatsApp integration verify token",
                            "type": "string"
                          },
                          "phoneNumberId": {
                            "description": "The WhatsApp integration phone number ID",
                            "type": "string"
                          },
                          "contactCollection": {
                            "description": "Weather to collect contacts",
                            "type": "boolean"
                          },
                          "sessionDuration": {
                            "description": "The session duration (in milliseconds)",
                            "type": "number"
                          },
                          "attachments": {
                            "description": "Weather the bot supports attachments",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "verifyToken"
                        ],
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "botId": {
                                "type": "string",
                                "description": "The ID of the bot this configuration is using"
                              }
                            },
                            "$$ref": "#/components/schemas/BotRef"
                          },
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "A model definition",
                                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                "example": "gpt-4-turbo/temperature=0.7",
                                "$$ref": "#/components/schemas/Model"
                              },
                              "backstory": {
                                "type": "string",
                                "description": "The backstory this configuration is using"
                              },
                              "datasetId": {
                                "type": "string",
                                "description": "The id of the dataset this configuration is using"
                              },
                              "skillsetId": {
                                "type": "string",
                                "description": "The id of the skillset this configuration is using"
                              },
                              "privacy": {
                                "type": "boolean",
                                "description": "The privacy flag for this configuration"
                              },
                              "moderation": {
                                "type": "boolean",
                                "description": "The moderation flag for this configuration"
                              }
                            },
                            "$$ref": "#/components/schemas/BotConfig"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration or reference",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "verifyToken": {
                              "description": "The WhatsApp integration verify token",
                              "type": "string"
                            },
                            "phoneNumberId": {
                              "description": "The WhatsApp integration phone number ID",
                              "type": "string"
                            },
                            "contactCollection": {
                              "description": "Weather to collect contacts",
                              "type": "boolean"
                            },
                            "sessionDuration": {
                              "description": "The session duration (in milliseconds)",
                              "type": "number"
                            },
                            "attachments": {
                              "description": "Weather the bot supports attachments",
                              "type": "boolean"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1whatsapp~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "verifyToken"
                          ],
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "botId": {
                                  "type": "string",
                                  "description": "The ID of the bot this configuration is using"
                                }
                              },
                              "$$ref": "#/components/schemas/BotRef"
                            },
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "description": "A model definition",
                                  "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                  "example": "gpt-4-turbo/temperature=0.7",
                                  "$$ref": "#/components/schemas/Model"
                                },
                                "backstory": {
                                  "type": "string",
                                  "description": "The backstory this configuration is using"
                                },
                                "datasetId": {
                                  "type": "string",
                                  "description": "The id of the dataset this configuration is using"
                                },
                                "skillsetId": {
                                  "type": "string",
                                  "description": "The id of the skillset this configuration is using"
                                },
                                "privacy": {
                                  "type": "boolean",
                                  "description": "The privacy flag for this configuration"
                                },
                                "moderation": {
                                  "type": "boolean",
                                  "description": "The moderation flag for this configuration"
                                }
                              },
                              "$$ref": "#/components/schemas/BotConfig"
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listWhatsAppIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/widget/{widgetIntegrationId}/delete": {
      "post": {
        "operationId": "deleteWidgetIntegration",
        "summary": "Delete Widget integration",
        "tags": [
          "Widget Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "widgetIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Widget integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Widget integration was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted Widget integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteWidgetIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/widget/{widgetIntegrationId}/fetch": {
      "get": {
        "operationId": "fetchWidgetIntegration",
        "summary": "Fetch a widgetIntegration",
        "tags": [
          "Widget Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "widgetIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Widget integration to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Widget integration was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A bot configuration or reference",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "theme": {
                      "description": "The theme of the Widget integration",
                      "type": "string"
                    },
                    "layout": {
                      "description": "The default layout of the Widget integration",
                      "type": "string"
                    },
                    "title": {
                      "description": "The title of the Widget integration",
                      "type": "string"
                    },
                    "intro": {
                      "description": "The intro of the Widget integration",
                      "type": "string"
                    },
                    "initial": {
                      "description": "The initial message of the Widget integration",
                      "type": "string"
                    },
                    "placeholder": {
                      "description": "The input placeholder of the Widget integration",
                      "type": "string"
                    },
                    "origin": {
                      "description": "The origin URLs of the Widget integration",
                      "type": "string"
                    },
                    "sessionDuration": {
                      "description": "The session duration of the Widget integration",
                      "type": "number"
                    },
                    "language": {
                      "description": "The language of the Widget integration",
                      "type": "string"
                    },
                    "stream": {
                      "description": "Whether the Widget integration is streaming",
                      "type": "boolean"
                    },
                    "verbose": {
                      "description": "Whether the Widget integration is verbose",
                      "type": "boolean"
                    },
                    "tools": {
                      "description": "Whether the Widget integration has tools",
                      "type": "boolean"
                    },
                    "unfurl": {
                      "description": "Whether the Widget integration unfurls links",
                      "type": "boolean"
                    },
                    "math": {
                      "description": "Whether the Widget integration supports math",
                      "type": "boolean"
                    },
                    "carousel": {
                      "description": "Whether the Widget integration supports carousels",
                      "type": "boolean"
                    },
                    "attachments": {
                      "description": "Whether the Widget integration supports attachments",
                      "type": "boolean"
                    },
                    "autoScroll": {
                      "description": "Whether the Widget integration auto scrolls",
                      "type": "boolean"
                    },
                    "startFirst": {
                      "description": "Whether the Widget integration starts first",
                      "type": "boolean"
                    },
                    "contactCollection": {
                      "description": "Whether the Widget integration collects contacts",
                      "type": "boolean"
                    },
                    "exportConversation": {
                      "description": "Controls whether the Widget allows exporting the current conversation",
                      "type": "boolean"
                    },
                    "restartConversation": {
                      "description": "Controls whether the Widget allows restarting the conversation",
                      "type": "boolean"
                    },
                    "maximize": {
                      "description": "Controls whether the Widget allows maximizing the conversation",
                      "type": "boolean"
                    },
                    "messagePeek": {
                      "description": "Controls whether the Widget allows peeking at the initial messages",
                      "type": "boolean"
                    },
                    "voiceIn": {
                      "description": "Whether the Widget integration supports voice input",
                      "type": "boolean"
                    },
                    "voiceOut": {
                      "description": "Whether the Widget integration supports voice output",
                      "type": "boolean"
                    },
                    "poweredBy": {
                      "description": "Whether the Widget integration displays powered by ChatBotKit",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ],
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "botId": {
                          "type": "string",
                          "description": "The ID of the bot this configuration is using"
                        }
                      },
                      "$$ref": "#/components/schemas/BotRef"
                    },
                    {
                      "type": "object",
                      "description": "A bot configuration that can be applied without a dedicated bot instance.",
                      "properties": {
                        "model": {
                          "type": "string",
                          "description": "A model definition",
                          "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                          "example": "gpt-4-turbo/temperature=0.7",
                          "$$ref": "#/components/schemas/Model"
                        },
                        "backstory": {
                          "type": "string",
                          "description": "The backstory this configuration is using"
                        },
                        "datasetId": {
                          "type": "string",
                          "description": "The id of the dataset this configuration is using"
                        },
                        "skillsetId": {
                          "type": "string",
                          "description": "The id of the skillset this configuration is using"
                        },
                        "privacy": {
                          "type": "boolean",
                          "description": "The privacy flag for this configuration"
                        },
                        "moderation": {
                          "type": "boolean",
                          "description": "The moderation flag for this configuration"
                        }
                      },
                      "$$ref": "#/components/schemas/BotConfig"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchWidgetIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/widget/{widgetIntegrationId}/setup": {
      "post": {
        "operationId": "setupWidgetIntegration",
        "summary": "Setup Widget integration",
        "tags": [
          "Widget Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "widgetIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Widget integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Widget integration was setup successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Widget integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "setupWidgetIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/widget/{widgetIntegrationId}/update": {
      "post": {
        "operationId": "updateWidgetIntegration",
        "summary": "Update a Widget integration",
        "tags": [
          "Widget Integration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "widgetIntegrationId",
            "required": true,
            "schema": {
              "description": "The ID of the Widget integration",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "theme": {
                    "description": "The theme of the Widget integration",
                    "type": "string"
                  },
                  "layout": {
                    "description": "The default layout of the Widget integration",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the Widget integration",
                    "type": "string"
                  },
                  "intro": {
                    "description": "The intro of the Widget integration",
                    "type": "string"
                  },
                  "initial": {
                    "description": "The initial message of the Widget integration",
                    "type": "string"
                  },
                  "placeholder": {
                    "description": "The input placeholder of the Widget integration",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The origin URLs of the Widget integration",
                    "type": "string"
                  },
                  "sessionDuration": {
                    "description": "The session duration of the Widget integration",
                    "type": "number"
                  },
                  "language": {
                    "description": "The language of the Widget integration",
                    "type": "string"
                  },
                  "stream": {
                    "description": "Whether the Widget integration is streaming",
                    "type": "boolean"
                  },
                  "verbose": {
                    "description": "Whether the Widget integration is verbose",
                    "type": "boolean"
                  },
                  "tools": {
                    "description": "Whether the Widget integration has tools",
                    "type": "boolean"
                  },
                  "unfurl": {
                    "description": "Whether the Widget integration unfurls links",
                    "type": "boolean"
                  },
                  "math": {
                    "description": "Whether the Widget integration supports math",
                    "type": "boolean"
                  },
                  "carousel": {
                    "description": "Whether the Widget integration supports carousels",
                    "type": "boolean"
                  },
                  "attachments": {
                    "description": "Whether the Widget integration supports attachments",
                    "type": "boolean"
                  },
                  "autoScroll": {
                    "description": "Whether the Widget integration auto scrolls",
                    "type": "boolean"
                  },
                  "startFirst": {
                    "description": "Whether the Widget integration starts first",
                    "type": "boolean"
                  },
                  "contactCollection": {
                    "description": "Whether the Widget integration collects contacts",
                    "type": "boolean"
                  },
                  "exportConversation": {
                    "description": "Controls whether the Widget allows exporting the current conversation",
                    "type": "boolean"
                  },
                  "restartConversation": {
                    "description": "Controls whether the Widget allows restarting the conversation",
                    "type": "boolean"
                  },
                  "maximize": {
                    "description": "Controls whether the Widget allows maximizing the conversation",
                    "type": "boolean"
                  },
                  "messagePeek": {
                    "description": "Controls whether the Widget allows peeking at the initial messages",
                    "type": "boolean"
                  },
                  "voiceIn": {
                    "description": "Controls whether the Widget allows voice input",
                    "type": "boolean"
                  },
                  "voiceOut": {
                    "description": "Controls whether the Widget allows voice output",
                    "type": "boolean"
                  },
                  "poweredBy": {
                    "description": "Whether the Widget integration displays powered by ChatBotKit",
                    "type": "boolean"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Widget integration was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Widget Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateWidgetIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/widget/create": {
      "post": {
        "operationId": "createWidgetIntegration",
        "summary": "Create Widget integration",
        "tags": [
          "Widget Integration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A bot configuration or reference",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "theme": {
                    "description": "The theme of the Widget integration",
                    "type": "string"
                  },
                  "layout": {
                    "description": "The default layout of the Widget integration",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the Widget integration",
                    "type": "string"
                  },
                  "intro": {
                    "description": "The intro of the Widget integration",
                    "type": "string"
                  },
                  "initial": {
                    "description": "The initial message of the Widget integration",
                    "type": "string"
                  },
                  "placeholder": {
                    "description": "The input placeholder of the Widget integration",
                    "type": "string"
                  },
                  "origin": {
                    "description": "The origin URLs of the Widget integration",
                    "type": "string"
                  },
                  "sessionDuration": {
                    "description": "The session duration of the Widget integration",
                    "type": "number"
                  },
                  "language": {
                    "description": "The language of the Widget integration",
                    "type": "string"
                  },
                  "stream": {
                    "description": "Whether the Widget integration is streaming",
                    "type": "boolean"
                  },
                  "verbose": {
                    "description": "Whether the Widget integration is verbose",
                    "type": "boolean"
                  },
                  "tools": {
                    "description": "Whether the Widget integration has tools",
                    "type": "boolean"
                  },
                  "unfurl": {
                    "description": "Whether the Widget integration unfurls links",
                    "type": "boolean"
                  },
                  "math": {
                    "description": "Weather the Widget integration supports math",
                    "type": "boolean"
                  },
                  "carousel": {
                    "description": "Weather the Widget integration supports carousels",
                    "type": "boolean"
                  },
                  "attachments": {
                    "description": "Weather the Widget integration supports attachments",
                    "type": "boolean"
                  },
                  "autoScroll": {
                    "description": "Whether the Widget integration auto scrolls",
                    "type": "boolean"
                  },
                  "startFirst": {
                    "description": "Whether the Widget integration starts first",
                    "type": "boolean"
                  },
                  "contactCollection": {
                    "description": "Whether the Widget integration collects contacts",
                    "type": "boolean"
                  },
                  "exportConversation": {
                    "description": "Controls whether the Widget allows exporting the current conversation",
                    "type": "boolean"
                  },
                  "restartConversation": {
                    "description": "Controls whether the Widget allows restarting the conversation",
                    "type": "boolean"
                  },
                  "maximize": {
                    "description": "Controls whether the Widget allows maximizing the conversation",
                    "type": "boolean"
                  },
                  "messagePeek": {
                    "description": "Controls whether the Widget allows peeking at the initial messages",
                    "type": "boolean"
                  },
                  "voiceIn": {
                    "description": "Controls whether the Widget allows voice input",
                    "type": "boolean"
                  },
                  "voiceOut": {
                    "description": "Controls whether the Widget allows voice output",
                    "type": "boolean"
                  },
                  "poweredBy": {
                    "description": "Whether the Widget integration displays powered by ChatBotKit",
                    "type": "boolean"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "botId": {
                        "type": "string",
                        "description": "The ID of the bot this configuration is using"
                      }
                    },
                    "$$ref": "#/components/schemas/BotRef"
                  },
                  {
                    "type": "object",
                    "description": "A bot configuration that can be applied without a dedicated bot instance.",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "A model definition",
                        "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                        "example": "gpt-4-turbo/temperature=0.7",
                        "$$ref": "#/components/schemas/Model"
                      },
                      "backstory": {
                        "type": "string",
                        "description": "The backstory this configuration is using"
                      },
                      "datasetId": {
                        "type": "string",
                        "description": "The id of the dataset this configuration is using"
                      },
                      "skillsetId": {
                        "type": "string",
                        "description": "The id of the skillset this configuration is using"
                      },
                      "privacy": {
                        "type": "boolean",
                        "description": "The privacy flag for this configuration"
                      },
                      "moderation": {
                        "type": "boolean",
                        "description": "The moderation flag for this configuration"
                      }
                    },
                    "$$ref": "#/components/schemas/BotConfig"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The Widget integration was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Widget Integration",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createWidgetIntegration",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/integration/widget/list": {
      "get": {
        "operationId": "listWidgetIntegrations",
        "summary": "List Widget integrations",
        "tags": [
          "Widget Integration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Widget integrations was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A bot configuration or reference",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "theme": {
                            "description": "The theme of the Widget integration",
                            "type": "string"
                          },
                          "layout": {
                            "description": "The default layout of the Widget integration",
                            "type": "string"
                          },
                          "title": {
                            "description": "The title of the Widget integration",
                            "type": "string"
                          },
                          "intro": {
                            "description": "The intro of the Widget integration",
                            "type": "string"
                          },
                          "initial": {
                            "description": "The initial message of the Widget integration",
                            "type": "string"
                          },
                          "placeholder": {
                            "description": "The input placeholder of the Widget integration",
                            "type": "string"
                          },
                          "origin": {
                            "description": "The origin URLs of the Widget integration",
                            "type": "string"
                          },
                          "sessionDuration": {
                            "description": "The session duration of the Widget integration",
                            "type": "number"
                          },
                          "language": {
                            "description": "The language of the Widget integration",
                            "type": "string"
                          },
                          "stream": {
                            "description": "Whether the Widget integration is streaming",
                            "type": "boolean"
                          },
                          "verbose": {
                            "description": "Whether the Widget integration is verbose",
                            "type": "boolean"
                          },
                          "tools": {
                            "description": "Whether the Widget integration has tools",
                            "type": "boolean"
                          },
                          "unfurl": {
                            "description": "Whether the Widget integration unfurls links",
                            "type": "boolean"
                          },
                          "math": {
                            "description": "Weather the Widget integration supports math",
                            "type": "boolean"
                          },
                          "carousel": {
                            "description": "Weather the Widget integration supports carousels",
                            "type": "boolean"
                          },
                          "attachments": {
                            "description": "Weather the Widget integration supports attachments",
                            "type": "boolean"
                          },
                          "autoScroll": {
                            "description": "Whether the Widget integration auto scrolls",
                            "type": "boolean"
                          },
                          "startFirst": {
                            "description": "Whether the Widget integration starts first",
                            "type": "boolean"
                          },
                          "contactCollection": {
                            "description": "Whether the Widget integration collects contacts",
                            "type": "boolean"
                          },
                          "exportConversation": {
                            "description": "Controls whether the Widget allows exporting the current conversation",
                            "type": "boolean"
                          },
                          "restartConversation": {
                            "description": "Controls whether the Widget allows restarting the conversation",
                            "type": "boolean"
                          },
                          "maximize": {
                            "description": "Controls whether the Widget allows maximizing the conversation",
                            "type": "boolean"
                          },
                          "messagePeek": {
                            "description": "Controls whether the Widget allows peeking at the initial messages",
                            "type": "boolean"
                          },
                          "voiceIn": {
                            "description": "Whether the Widget integration supports voice input",
                            "type": "boolean"
                          },
                          "voiceOut": {
                            "description": "Whether the Widget integration supports voice output",
                            "type": "boolean"
                          },
                          "poweredBy": {
                            "description": "Whether the Widget integration displays powered by ChatBotKit",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ],
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "botId": {
                                "type": "string",
                                "description": "The ID of the bot this configuration is using"
                              }
                            },
                            "$$ref": "#/components/schemas/BotRef"
                          },
                          {
                            "type": "object",
                            "description": "A bot configuration that can be applied without a dedicated bot instance.",
                            "properties": {
                              "model": {
                                "type": "string",
                                "description": "A model definition",
                                "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                "example": "gpt-4-turbo/temperature=0.7",
                                "$$ref": "#/components/schemas/Model"
                              },
                              "backstory": {
                                "type": "string",
                                "description": "The backstory this configuration is using"
                              },
                              "datasetId": {
                                "type": "string",
                                "description": "The id of the dataset this configuration is using"
                              },
                              "skillsetId": {
                                "type": "string",
                                "description": "The id of the skillset this configuration is using"
                              },
                              "privacy": {
                                "type": "boolean",
                                "description": "The privacy flag for this configuration"
                              },
                              "moderation": {
                                "type": "boolean",
                                "description": "The moderation flag for this configuration"
                              }
                            },
                            "$$ref": "#/components/schemas/BotConfig"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "A bot configuration or reference",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "theme": {
                              "description": "The theme of the Widget integration",
                              "type": "string"
                            },
                            "layout": {
                              "description": "The default layout of the Widget integration",
                              "type": "string"
                            },
                            "title": {
                              "description": "The title of the Widget integration",
                              "type": "string"
                            },
                            "intro": {
                              "description": "The intro of the Widget integration",
                              "type": "string"
                            },
                            "initial": {
                              "description": "The initial message of the Widget integration",
                              "type": "string"
                            },
                            "placeholder": {
                              "description": "The input placeholder of the Widget integration",
                              "type": "string"
                            },
                            "origin": {
                              "description": "The origin URLs of the Widget integration",
                              "type": "string"
                            },
                            "sessionDuration": {
                              "description": "The session duration of the Widget integration",
                              "type": "number"
                            },
                            "language": {
                              "description": "The language of the Widget integration",
                              "type": "string"
                            },
                            "stream": {
                              "description": "Whether the Widget integration is streaming",
                              "type": "boolean"
                            },
                            "verbose": {
                              "description": "Whether the Widget integration is verbose",
                              "type": "boolean"
                            },
                            "tools": {
                              "description": "Whether the Widget integration has tools",
                              "type": "boolean"
                            },
                            "unfurl": {
                              "description": "Whether the Widget integration unfurls links",
                              "type": "boolean"
                            },
                            "math": {
                              "description": "Weather the Widget integration supports math",
                              "type": "boolean"
                            },
                            "carousel": {
                              "description": "Weather the Widget integration supports carousels",
                              "type": "boolean"
                            },
                            "attachments": {
                              "description": "Weather the Widget integration supports attachments",
                              "type": "boolean"
                            },
                            "autoScroll": {
                              "description": "Whether the Widget integration auto scrolls",
                              "type": "boolean"
                            },
                            "startFirst": {
                              "description": "Whether the Widget integration starts first",
                              "type": "boolean"
                            },
                            "contactCollection": {
                              "description": "Whether the Widget integration collects contacts",
                              "type": "boolean"
                            },
                            "exportConversation": {
                              "description": "Controls whether the Widget allows exporting the current conversation",
                              "type": "boolean"
                            },
                            "restartConversation": {
                              "description": "Controls whether the Widget allows restarting the conversation",
                              "type": "boolean"
                            },
                            "maximize": {
                              "description": "Controls whether the Widget allows maximizing the conversation",
                              "type": "boolean"
                            },
                            "messagePeek": {
                              "description": "Controls whether the Widget allows peeking at the initial messages",
                              "type": "boolean"
                            },
                            "voiceIn": {
                              "description": "Whether the Widget integration supports voice input",
                              "type": "boolean"
                            },
                            "voiceOut": {
                              "description": "Whether the Widget integration supports voice output",
                              "type": "boolean"
                            },
                            "poweredBy": {
                              "description": "Whether the Widget integration displays powered by ChatBotKit",
                              "type": "boolean"
                            }
                          },
                          "$$ref": "#/paths/~1integration~1widget~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ],
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "botId": {
                                  "type": "string",
                                  "description": "The ID of the bot this configuration is using"
                                }
                              },
                              "$$ref": "#/components/schemas/BotRef"
                            },
                            {
                              "type": "object",
                              "description": "A bot configuration that can be applied without a dedicated bot instance.",
                              "properties": {
                                "model": {
                                  "type": "string",
                                  "description": "A model definition",
                                  "pattern": "\\w+(?:\\/\\w+=\\w+)*",
                                  "example": "gpt-4-turbo/temperature=0.7",
                                  "$$ref": "#/components/schemas/Model"
                                },
                                "backstory": {
                                  "type": "string",
                                  "description": "The backstory this configuration is using"
                                },
                                "datasetId": {
                                  "type": "string",
                                  "description": "The id of the dataset this configuration is using"
                                },
                                "skillsetId": {
                                  "type": "string",
                                  "description": "The id of the skillset this configuration is using"
                                },
                                "privacy": {
                                  "type": "boolean",
                                  "description": "The privacy flag for this configuration"
                                },
                                "moderation": {
                                  "type": "boolean",
                                  "description": "The moderation flag for this configuration"
                                }
                              },
                              "$$ref": "#/components/schemas/BotConfig"
                            }
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listWidgetIntegrations",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/magic/{promptId}/generate": {
      "post": {
        "operationId": "generateMagicFromPrompt",
        "summary": "Generate text (description, records, abilities and more) based on input.",
        "tags": [
          "Magic"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "promptId",
            "required": true,
            "schema": {
              "description": "The ID of the prompt to use for generation",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "description": "The text to use as input",
                    "type": "string"
                  },
                  "props": {
                    "description": "Additional properties to pass to the prompt",
                    "type": "object"
                  },
                  "model": {
                    "description": "Optional language model to use for generation",
                    "type": "string"
                  }
                },
                "required": [
                  "text"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The magic prompt completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "description": "The input text",
                      "type": "string"
                    },
                    "usage": {
                      "type": "object",
                      "description": "Usage information",
                      "properties": {
                        "token": {
                          "type": "number",
                          "description": "The tokens used in this exchange"
                        }
                      },
                      "required": [
                        "token"
                      ],
                      "$$ref": "#/components/schemas/Usage"
                    }
                  },
                  "required": [
                    "text",
                    "usage"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The generated text",
                          "type": "string",
                          "enum": [
                            "result"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "description": "The input text",
                              "type": "string"
                            },
                            "usage": {
                              "type": "object",
                              "description": "Usage information",
                              "properties": {
                                "token": {
                                  "type": "number",
                                  "description": "The tokens used in this exchange"
                                }
                              },
                              "required": [
                                "token"
                              ],
                              "$$ref": "#/components/schemas/Usage"
                            }
                          },
                          "required": [
                            "text",
                            "usage"
                          ],
                          "$$ref": "#/paths/~1magic~1{promptId}~1generate/post/responses/200/content/application~1json/schema"
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "generateMagicFromPrompt",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/magic/list": {
      "get": {
        "operationId": "listMagicPrompts",
        "summary": "Retrieve a list of magic prompts",
        "tags": [
          "Magic"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of magic prompts was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "alias": {
                            "description": "The alias of the item",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "alias"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "alias": {
                              "description": "The alias of the item",
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1magic~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "alias"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listMagicPrompts",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/partner/user/{userId}/delete": {
      "post": {
        "operationId": "deletePartnerUser",
        "summary": "Delete a partner user",
        "tags": [
          "Partner"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "description": "The ID of the user to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted user",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deletePartnerUser",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/partner/user/{userId}/fetch": {
      "get": {
        "operationId": "fetchPartnerUser",
        "summary": "Fetch a partner user",
        "tags": [
          "Partner"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "description": "The ID of the partner user to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The partner user was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "image": {
                      "description": "The image of the partner user",
                      "type": "string"
                    },
                    "email": {
                      "description": "The email of the partner user",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchPartnerUser",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/partner/user/{userId}/token/{tokenId}/delete": {
      "post": {
        "operationId": "deletePartnerUserToken",
        "summary": "Delete a partner user token",
        "tags": [
          "Partner"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "description": "The ID of the user",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tokenId",
            "required": true,
            "schema": {
              "description": "The ID of the user token to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user token was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted user token",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deletePartnerUserToken",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/partner/user/{userId}/token/create": {
      "post": {
        "operationId": "createPartnerUserToken",
        "summary": "Create partner user token",
        "tags": [
          "Partner"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "description": "The ID of the user",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user token was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created user token",
                      "type": "string"
                    },
                    "token": {
                      "description": "The token of the created user token",
                      "type": "string"
                    },
                    "createdAt": {
                      "description": "The timestamp for when the user token was created (in milliseconds)",
                      "type": "number"
                    }
                  },
                  "required": [
                    "id",
                    "token",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createPartnerUserToken",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/partner/user/{userId}/token/list": {
      "get": {
        "operationId": "listPartnerUserTokens",
        "summary": "List partner user tokens",
        "tags": [
          "Partner"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "description": "The ID of the user",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of user tokens was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            }
                          },
                          "$$ref": "#/paths/~1partner~1user~1{userId}~1token~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listPartnerUserTokens",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/partner/user/{userId}/update": {
      "post": {
        "operationId": "updatePartnerUser",
        "summary": "Update a partner user",
        "tags": [
          "Partner"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "description": "The ID of the partner user",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "image": {
                    "description": "The image of the partner user",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email of the partner user",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated partner user",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updatePartnerUser",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/partner/user/create": {
      "post": {
        "operationId": "createPartnerUser",
        "summary": "Create partner user",
        "tags": [
          "Partner"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "image": {
                    "description": "The image of the partner user",
                    "type": "string"
                  },
                  "email": {
                    "description": "The email of the partner user",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created user",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createPartnerUser",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/partner/user/list": {
      "get": {
        "operationId": "listPartnerUsers",
        "summary": "List partner users",
        "tags": [
          "Partner"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of users was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "image": {
                            "description": "The image of the partner user",
                            "type": "string"
                          },
                          "email": {
                            "description": "The email of the partner user",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "image": {
                              "description": "The image of the partner user",
                              "type": "string"
                            },
                            "email": {
                              "description": "The email of the partner user",
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1partner~1user~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listPartnerUsers",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/platform/ability/list": {
      "get": {
        "operationId": "listPlatformAbilities",
        "summary": "Retrieve a list of platform abilities",
        "tags": [
          "Platform"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of abilities was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "parameters": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "operand": {
                                  "type": "string"
                                },
                                "required": {
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "name",
                                "description"
                              ]
                            }
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "parameters"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "parameters": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "operand": {
                                    "type": "string"
                                  },
                                  "required": {
                                    "type": "boolean"
                                  }
                                },
                                "required": [
                                  "name",
                                  "description"
                                ]
                              }
                            }
                          },
                          "$$ref": "#/paths/~1platform~1ability~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "parameters"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listPlatformAbilities",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/platform/model/list": {
      "get": {
        "operationId": "listPlatformModels",
        "summary": "Retrieve a list of platform models",
        "tags": [
          "Platform"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of models was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "provider": {
                            "description": "The backstory of the model",
                            "type": "string"
                          },
                          "family": {
                            "description": "The model of the model",
                            "type": "string"
                          },
                          "maxTokens": {
                            "description": "The maximum number of tokens the model can use",
                            "type": "number"
                          },
                          "maxInputTokens": {
                            "description": "The maximum number of tokens the model can accept",
                            "type": "number"
                          },
                          "maxOutputTokens": {
                            "description": "The maximum number of tokens the model can generate",
                            "type": "number"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "provider": {
                              "description": "The backstory of the model",
                              "type": "string"
                            },
                            "family": {
                              "description": "The model of the model",
                              "type": "string"
                            },
                            "maxTokens": {
                              "description": "The maximum number of tokens the model can use",
                              "type": "number"
                            },
                            "maxInputTokens": {
                              "description": "The maximum number of tokens the model can accept",
                              "type": "number"
                            },
                            "maxOutputTokens": {
                              "description": "The maximum number of tokens the model can generate",
                              "type": "number"
                            }
                          },
                          "$$ref": "#/paths/~1platform~1model~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listPlatformModels",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/platform/secret/list": {
      "get": {
        "operationId": "listPlatformSecrets",
        "summary": "Retrieve a list of platform secrets",
        "tags": [
          "Platform"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of secrets was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            }
                          },
                          "$$ref": "#/paths/~1platform~1secret~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listPlatformSecrets",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/secret/{secretId}/delete": {
      "post": {
        "operationId": "deleteSecret",
        "summary": "Delete a secret",
        "tags": [
          "Secret"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "secretId",
            "required": true,
            "schema": {
              "description": "The ID of the secret to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The secret was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted secret",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteSecret",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/secret/{secretId}/fetch": {
      "get": {
        "operationId": "fetchSecret",
        "summary": "Fetch a secret",
        "tags": [
          "Secret"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "secretId",
            "required": true,
            "schema": {
              "description": "The ID of the secret to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The secret was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "kind": {
                      "type": "string",
                      "description": "The kind of the secret",
                      "enum": [
                        "shared",
                        "personal"
                      ],
                      "$$ref": "#/components/schemas/SecretKind"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the secret",
                      "enum": [
                        "plain",
                        "basic",
                        "bearer",
                        "oauth",
                        "template"
                      ],
                      "$$ref": "#/components/schemas/SecretType"
                    },
                    "config": {
                      "description": "The config of the secret",
                      "type": "object"
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The visibility of the secret",
                      "enum": [
                        "private",
                        "protected",
                        "public"
                      ],
                      "$$ref": "#/components/schemas/SecretVisibility"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchSecret",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/secret/{secretId}/update": {
      "post": {
        "operationId": "updateSecret",
        "summary": "Update secret",
        "tags": [
          "Secret"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "secretId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "kind": {
                    "type": "string",
                    "description": "The kind of the secret",
                    "enum": [
                      "shared",
                      "personal"
                    ],
                    "$$ref": "#/components/schemas/SecretKind"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the secret",
                    "enum": [
                      "plain",
                      "basic",
                      "bearer",
                      "oauth",
                      "template"
                    ],
                    "$$ref": "#/components/schemas/SecretType"
                  },
                  "value": {
                    "description": "The value of the secret",
                    "type": "string"
                  },
                  "config": {
                    "description": "The config of the secret",
                    "type": "object"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The visibility of the secret",
                    "enum": [
                      "private",
                      "protected",
                      "public"
                    ],
                    "$$ref": "#/components/schemas/SecretVisibility"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The secret was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated secret",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateSecret",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/secret/create": {
      "post": {
        "operationId": "createSecret",
        "summary": "Create secret",
        "tags": [
          "Secret"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "kind": {
                    "type": "string",
                    "description": "The kind of the secret",
                    "enum": [
                      "shared",
                      "personal"
                    ],
                    "$$ref": "#/components/schemas/SecretKind"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the secret",
                    "enum": [
                      "plain",
                      "basic",
                      "bearer",
                      "oauth",
                      "template"
                    ],
                    "$$ref": "#/components/schemas/SecretType"
                  },
                  "value": {
                    "description": "The value of the secret",
                    "type": "string"
                  },
                  "config": {
                    "description": "The config of the secret",
                    "type": "string"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The visibility of the secret",
                    "enum": [
                      "private",
                      "protected",
                      "public"
                    ],
                    "$$ref": "#/components/schemas/SecretVisibility"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The secret was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created secret",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createSecret",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/secret/list": {
      "get": {
        "operationId": "listSecrets",
        "summary": "Retrieve a list of secrets",
        "tags": [
          "Secret"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of secrets was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "kind": {
                            "type": "string",
                            "description": "The kind of the secret",
                            "enum": [
                              "shared",
                              "personal"
                            ],
                            "$$ref": "#/components/schemas/SecretKind"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the secret",
                            "enum": [
                              "plain",
                              "basic",
                              "bearer",
                              "oauth",
                              "template"
                            ],
                            "$$ref": "#/components/schemas/SecretType"
                          },
                          "config": {
                            "description": "The config of the secret",
                            "type": "object"
                          },
                          "visibility": {
                            "type": "string",
                            "description": "The visibility of the secret",
                            "enum": [
                              "private",
                              "protected",
                              "public"
                            ],
                            "$$ref": "#/components/schemas/SecretVisibility"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "kind": {
                              "type": "string",
                              "description": "The kind of the secret",
                              "enum": [
                                "shared",
                                "personal"
                              ],
                              "$$ref": "#/components/schemas/SecretKind"
                            },
                            "type": {
                              "type": "string",
                              "description": "The type of the secret",
                              "enum": [
                                "plain",
                                "basic",
                                "bearer",
                                "oauth",
                                "template"
                              ],
                              "$$ref": "#/components/schemas/SecretType"
                            },
                            "config": {
                              "description": "The config of the secret",
                              "type": "object"
                            },
                            "visibility": {
                              "type": "string",
                              "description": "The visibility of the secret",
                              "enum": [
                                "private",
                                "protected",
                                "public"
                              ],
                              "$$ref": "#/components/schemas/SecretVisibility"
                            }
                          },
                          "$$ref": "#/paths/~1secret~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listSecrets",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/skillset/{skillsetId}/ability/{abilityId}/delete": {
      "post": {
        "operationId": "deleteSkillsetAbility",
        "summary": "Delete a ability from a skillset",
        "tags": [
          "Skillset Ability"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "skillsetId",
            "required": true,
            "schema": {
              "description": "The ID of the skillset",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "abilityId",
            "required": true,
            "schema": {
              "description": "The ID of the ability to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ability was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted ability",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteSkillsetAbility",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/skillset/{skillsetId}/ability/{abilityId}/fetch": {
      "get": {
        "operationId": "fetchSkillsetAbility",
        "summary": "Fetch a ability from a skillset",
        "tags": [
          "Skillset Ability"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "skillsetId",
            "required": true,
            "schema": {
              "description": "The ID of the skillset",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "abilityId",
            "required": true,
            "schema": {
              "description": "The ID of the ability to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The skillset was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "secretId": {
                      "description": "The ID of the secret associated with the ability",
                      "type": "string"
                    },
                    "botId": {
                      "description": "The ID of the bot associated with the ability",
                      "type": "string"
                    },
                    "instruction": {
                      "description": "The instruction of the skillset ability",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt",
                    "name",
                    "description",
                    "instruction"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchSkillsetAbility",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/skillset/{skillsetId}/ability/{abilityId}/update": {
      "post": {
        "operationId": "updateSkillsetAbility",
        "summary": "Update a skillset ability",
        "tags": [
          "Skillset Ability"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "skillsetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "abilityId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "secretId": {
                    "description": "The ID of the secret associated with the ability",
                    "type": "string"
                  },
                  "botId": {
                    "description": "The ID of the bot associated with the ability",
                    "type": "string"
                  },
                  "instruction": {
                    "description": "The text to update the ability with",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ability was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated ability",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateSkillsetAbility",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/skillset/{skillsetId}/ability/create": {
      "post": {
        "operationId": "createSkillsetAbility",
        "summary": "Create ability",
        "tags": [
          "Skillset Ability"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "skillsetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "secretId": {
                    "description": "The ID of the secret associated with the ability",
                    "type": "string"
                  },
                  "botId": {
                    "description": "The ID of the bot associated with the ability",
                    "type": "string"
                  },
                  "instruction": {
                    "description": "The instruction of the ability",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "description",
                  "instruction"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ability was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created ability",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createSkillsetAbility",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/skillset/{skillsetId}/ability/export": {
      "get": {
        "operationId": "exportSkillsetAbilities",
        "summary": "Export skillset abilities",
        "tags": [
          "Skillset Ability"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "skillsetId",
            "required": true,
            "schema": {
              "description": "The ID of the skillset to export",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The export of skillset abilities was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "secretId": {
                            "description": "The ID of the secret associated with the ability",
                            "type": "string"
                          },
                          "botId": {
                            "description": "The ID of the bot associated with the ability",
                            "type": "string"
                          },
                          "instruction": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "name",
                          "description",
                          "instruction"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "secretId": {
                              "description": "The ID of the secret associated with the ability",
                              "type": "string"
                            },
                            "botId": {
                              "description": "The ID of the bot associated with the ability",
                              "type": "string"
                            },
                            "instruction": {
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1skillset~1{skillsetId}~1ability~1export/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "name",
                            "description",
                            "instruction"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "exportSkillsetAbilities",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/skillset/{skillsetId}/ability/list": {
      "get": {
        "operationId": "listSkillsetAbilities",
        "summary": "Retrieve a list of skillset abilities",
        "tags": [
          "Skillset Ability"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "skillsetId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the skillset"
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of abilities was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "secretId": {
                            "description": "The ID of the secret associated with the ability",
                            "type": "string"
                          },
                          "botId": {
                            "description": "The ID of the bot associated with the ability",
                            "type": "string"
                          },
                          "instruction": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt",
                          "name",
                          "description",
                          "instruction"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "secretId": {
                              "description": "The ID of the secret associated with the ability",
                              "type": "string"
                            },
                            "botId": {
                              "description": "The ID of the bot associated with the ability",
                              "type": "string"
                            },
                            "instruction": {
                              "type": "string"
                            }
                          },
                          "$$ref": "#/paths/~1skillset~1{skillsetId}~1ability~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt",
                            "name",
                            "description",
                            "instruction"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listSkillsetAbilities",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/skillset/{skillsetId}/delete": {
      "post": {
        "operationId": "deleteSkillset",
        "summary": "Delete a skillset",
        "tags": [
          "Skillset"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "skillsetId",
            "required": true,
            "schema": {
              "description": "The ID of the skillset to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The skillset was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted skillset",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteSkillset",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/skillset/{skillsetId}/fetch": {
      "get": {
        "operationId": "fetchSkillset",
        "summary": "Fetch a skillset",
        "tags": [
          "Skillset"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "skillsetId",
            "required": true,
            "schema": {
              "description": "The ID of the skillset to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The skillset was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The skillset visibility",
                      "enum": [
                        "private",
                        "protected",
                        "public"
                      ],
                      "$$ref": "#/components/schemas/SkillsetVisibility"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchSkillset",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/skillset/{skillsetId}/update": {
      "post": {
        "operationId": "updateSkillset",
        "summary": "Update skillset",
        "tags": [
          "Skillset"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "skillsetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The skillset visibility",
                    "enum": [
                      "private",
                      "protected",
                      "public"
                    ],
                    "$$ref": "#/components/schemas/SkillsetVisibility"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The skillset was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated skillset",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateSkillset",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/skillset/create": {
      "post": {
        "operationId": "createSkillset",
        "summary": "Create skillset",
        "tags": [
          "Skillset"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The skillset visibility",
                    "enum": [
                      "private",
                      "protected",
                      "public"
                    ],
                    "$$ref": "#/components/schemas/SkillsetVisibility"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The skillset was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created skillset",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createSkillset",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/skillset/list": {
      "get": {
        "operationId": "listSkillsets",
        "summary": "Retrieve a list of skillsets",
        "tags": [
          "Skillset"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of skillsets was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "visibility": {
                            "type": "string",
                            "description": "The skillset visibility",
                            "enum": [
                              "private",
                              "protected",
                              "public"
                            ],
                            "$$ref": "#/components/schemas/SkillsetVisibility"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "visibility": {
                              "type": "string",
                              "description": "The skillset visibility",
                              "enum": [
                                "private",
                                "protected",
                                "public"
                              ],
                              "$$ref": "#/components/schemas/SkillsetVisibility"
                            }
                          },
                          "$$ref": "#/paths/~1skillset~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listSkillsets",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/task/{taskId}/delete": {
      "post": {
        "operationId": "deleteTask",
        "summary": "Delete task",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "description": "The ID of the task to delete",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The task was deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the deleted task",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "deleteTask",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/task/{taskId}/fetch": {
      "get": {
        "operationId": "fetchTask",
        "summary": "Fetch task",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "description": "The ID of the task to retrieve",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The task was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Instance list properties",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The associated name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The associated description"
                    },
                    "meta": {
                      "type": "object",
                      "description": "Meta data information",
                      "additionalProperties": true,
                      "$$ref": "#/components/schemas/Meta"
                    },
                    "id": {
                      "type": "string",
                      "description": "The instance ID"
                    },
                    "createdAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was created"
                    },
                    "updatedAt": {
                      "type": "number",
                      "description": "The timestamp (ms) when the instance was updated"
                    },
                    "contactId": {
                      "type": "string",
                      "description": "The contact associated with the task"
                    },
                    "botId": {
                      "type": "string",
                      "description": "The bot associated with the task"
                    },
                    "schedule": {
                      "type": "string",
                      "description": "The schedule of the task"
                    }
                  },
                  "required": [
                    "id",
                    "createdAt",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchTask",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/task/{taskId}/update": {
      "post": {
        "operationId": "updateTask",
        "summary": "Update task",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "contactId": {
                    "type": "string",
                    "description": "The contact associated with the task"
                  },
                  "botId": {
                    "type": "string",
                    "description": "The bot associated with the task"
                  },
                  "schedule": {
                    "type": "string",
                    "description": "The schedule of the task"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The task was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the updated task",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "updateTask",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/task/create": {
      "post": {
        "operationId": "createTask",
        "summary": "Create a new task",
        "description": "Create a new task with the given parameters.\n",
        "tags": [
          "Task"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Instance crud properties",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The associated name"
                  },
                  "description": {
                    "type": "string",
                    "description": "The associated description"
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data information",
                    "additionalProperties": true,
                    "$$ref": "#/components/schemas/Meta"
                  },
                  "contactId": {
                    "type": "string",
                    "description": "The contact associated with the task"
                  },
                  "botId": {
                    "type": "string",
                    "description": "The bot associated with the task"
                  },
                  "schedule": {
                    "type": "string",
                    "description": "The schedule of the task"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The task was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the created task",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "createTask",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/task/export": {
      "get": {
        "operationId": "exportTasks",
        "summary": "Export tasks",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of tasks was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "contactId": {
                            "type": "string",
                            "description": "The contact associated with the task"
                          },
                          "botId": {
                            "type": "string",
                            "description": "The bot associated with the task"
                          },
                          "schedule": {
                            "type": "string",
                            "description": "The schedule of the task"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "contactId": {
                              "type": "string",
                              "description": "The contact associated with the task"
                            },
                            "botId": {
                              "type": "string",
                              "description": "The bot associated with the task"
                            },
                            "schedule": {
                              "type": "string",
                              "description": "The schedule of the task"
                            }
                          },
                          "$$ref": "#/paths/~1task~1export/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "exportTasks",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/task/list": {
      "get": {
        "operationId": "listTasks",
        "summary": "List tasks",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "description": "The cursor to use for pagination",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "description": "The order of the paginated items",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "description": "The number of items to retrieve",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of tasks was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Instance list properties",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The associated name"
                          },
                          "description": {
                            "type": "string",
                            "description": "The associated description"
                          },
                          "meta": {
                            "type": "object",
                            "description": "Meta data information",
                            "additionalProperties": true,
                            "$$ref": "#/components/schemas/Meta"
                          },
                          "id": {
                            "type": "string",
                            "description": "The instance ID"
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was created"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "The timestamp (ms) when the instance was updated"
                          },
                          "contactId": {
                            "type": "string",
                            "description": "The contact associated with the task"
                          },
                          "botId": {
                            "type": "string",
                            "description": "The bot associated with the task"
                          },
                          "schedule": {
                            "type": "string",
                            "description": "The schedule of the task"
                          }
                        },
                        "required": [
                          "id",
                          "createdAt",
                          "updatedAt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "items"
                  ]
                }
              },
              "application/jsonl": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "description": "The type of event",
                          "type": "string",
                          "enum": [
                            "item"
                          ]
                        },
                        "data": {
                          "type": "object",
                          "description": "Instance list properties",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The associated name"
                            },
                            "description": {
                              "type": "string",
                              "description": "The associated description"
                            },
                            "meta": {
                              "type": "object",
                              "description": "Meta data information",
                              "additionalProperties": true,
                              "$$ref": "#/components/schemas/Meta"
                            },
                            "id": {
                              "type": "string",
                              "description": "The instance ID"
                            },
                            "createdAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was created"
                            },
                            "updatedAt": {
                              "type": "number",
                              "description": "The timestamp (ms) when the instance was updated"
                            },
                            "contactId": {
                              "type": "string",
                              "description": "The contact associated with the task"
                            },
                            "botId": {
                              "type": "string",
                              "description": "The bot associated with the task"
                            },
                            "schedule": {
                              "type": "string",
                              "description": "The schedule of the task"
                            }
                          },
                          "$$ref": "#/paths/~1task~1list/get/responses/200/content/application~1json/schema/properties/items/items",
                          "required": [
                            "id",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "data"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "listTasks",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/usage/fetch": {
      "get": {
        "operationId": "fetchUsage",
        "summary": "Fetch usage",
        "description": "Fetches the usage data for the user in the current billing period.",
        "tags": [
          "Usage"
        ],
        "responses": {
          "200": {
            "description": "The usage information was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tokens": {
                      "description": "The number of tokens the user has used",
                      "type": "number"
                    },
                    "conversations": {
                      "description": "The number of conversations the user has created",
                      "type": "number"
                    },
                    "messages": {
                      "description": "The number of messages the user has sent",
                      "type": "number"
                    },
                    "database": {
                      "description": "Database usage information",
                      "type": "object",
                      "properties": {
                        "datasets": {
                          "description": "The number of datasets the user has created",
                          "type": "number"
                        },
                        "records": {
                          "description": "The number of records the user has created",
                          "type": "number"
                        },
                        "skillsets": {
                          "description": "The number of skillsets the user has created",
                          "type": "number"
                        },
                        "abilities": {
                          "description": "The number of abilities the user has created",
                          "type": "number"
                        },
                        "files": {
                          "description": "The number of files the user has created",
                          "type": "number"
                        },
                        "users": {
                          "description": "The number of users the user has created",
                          "type": "number"
                        }
                      },
                      "required": [
                        "datasets",
                        "records",
                        "skillsets",
                        "abilities",
                        "files",
                        "users"
                      ]
                    }
                  },
                  "required": [
                    "tokens",
                    "conversations",
                    "messages",
                    "database"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchUsage",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/usage/series/fetch": {
      "get": {
        "operationId": "fetchUsageSeries",
        "summary": "Fetch usage series",
        "description": "Fetches a series of usage data points for the user for the last 90 days.",
        "tags": [
          "Usage"
        ],
        "responses": {
          "200": {
            "description": "The usage series information was retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tokens": {
                      "description": "The number of tokens the user has used",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "description": "The date of the data point",
                            "type": "number"
                          },
                          "total": {
                            "description": "The total number of tokens the user has used",
                            "type": "number"
                          }
                        },
                        "required": [
                          "date",
                          "total"
                        ]
                      }
                    },
                    "conversations": {
                      "description": "The number of conversations the user has created",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "description": "The date of the data point",
                            "type": "number"
                          },
                          "total": {
                            "description": "The total number of conversations the user has used",
                            "type": "number"
                          }
                        },
                        "required": [
                          "date",
                          "total"
                        ]
                      }
                    },
                    "messages": {
                      "description": "The number of messages the user has created",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "description": "The date of the data point",
                            "type": "number"
                          },
                          "total": {
                            "description": "The total number of messages the user has used",
                            "type": "number"
                          }
                        },
                        "required": [
                          "date",
                          "total"
                        ]
                      }
                    }
                  },
                  "required": [
                    "tokens",
                    "conversations",
                    "messages"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "$$ref": "#/components/responses/ErrorResponse"
          }
        },
        "__originalOperationId": "fetchUsageSeries",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "tags": [],
  "$$normalized": true
}